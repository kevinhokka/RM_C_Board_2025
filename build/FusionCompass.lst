ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"FusionCompass.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/FusionCompass.c"
  20              		.section	.text.FusionVectorCrossProduct,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	FusionVectorCrossProduct:
  27              	.LFB10:
  28              		.file 2 "Core/Inc/FusionMath.h"
   1:Core/Inc/FusionMath.h **** /**
   2:Core/Inc/FusionMath.h ****  * @file FusionMath.h
   3:Core/Inc/FusionMath.h ****  * @author Seb Madgwick
   4:Core/Inc/FusionMath.h ****  * @brief Math library.
   5:Core/Inc/FusionMath.h ****  */
   6:Core/Inc/FusionMath.h **** 
   7:Core/Inc/FusionMath.h **** #ifndef FUSION_MATH_H
   8:Core/Inc/FusionMath.h **** #define FUSION_MATH_H
   9:Core/Inc/FusionMath.h **** 
  10:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
  11:Core/Inc/FusionMath.h **** // Includes
  12:Core/Inc/FusionMath.h **** 
  13:Core/Inc/FusionMath.h **** #include <math.h> // M_PI, sqrtf, atan2f, asinf
  14:Core/Inc/FusionMath.h **** #include <stdbool.h>
  15:Core/Inc/FusionMath.h **** #include <stdint.h>
  16:Core/Inc/FusionMath.h **** 
  17:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
  18:Core/Inc/FusionMath.h **** // Definitions
  19:Core/Inc/FusionMath.h **** 
  20:Core/Inc/FusionMath.h **** /**
  21:Core/Inc/FusionMath.h ****  * @brief 3D vector.
  22:Core/Inc/FusionMath.h ****  */
  23:Core/Inc/FusionMath.h **** typedef union {
  24:Core/Inc/FusionMath.h ****     float array[3];
  25:Core/Inc/FusionMath.h **** 
  26:Core/Inc/FusionMath.h ****     struct {
  27:Core/Inc/FusionMath.h ****         float x;
  28:Core/Inc/FusionMath.h ****         float y;
  29:Core/Inc/FusionMath.h ****         float z;
  30:Core/Inc/FusionMath.h ****     } axis;
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 2


  31:Core/Inc/FusionMath.h **** } FusionVector;
  32:Core/Inc/FusionMath.h **** 
  33:Core/Inc/FusionMath.h **** /**
  34:Core/Inc/FusionMath.h ****  * @brief Quaternion.
  35:Core/Inc/FusionMath.h ****  */
  36:Core/Inc/FusionMath.h **** typedef union {
  37:Core/Inc/FusionMath.h ****     float array[4];
  38:Core/Inc/FusionMath.h **** 
  39:Core/Inc/FusionMath.h ****     struct {
  40:Core/Inc/FusionMath.h ****         float w;
  41:Core/Inc/FusionMath.h ****         float x;
  42:Core/Inc/FusionMath.h ****         float y;
  43:Core/Inc/FusionMath.h ****         float z;
  44:Core/Inc/FusionMath.h ****     } element;
  45:Core/Inc/FusionMath.h **** } FusionQuaternion;
  46:Core/Inc/FusionMath.h **** 
  47:Core/Inc/FusionMath.h **** /**
  48:Core/Inc/FusionMath.h ****  * @brief 3x3 matrix in row-major order.
  49:Core/Inc/FusionMath.h ****  * See http://en.wikipedia.org/wiki/Row-major_order
  50:Core/Inc/FusionMath.h ****  */
  51:Core/Inc/FusionMath.h **** typedef union {
  52:Core/Inc/FusionMath.h ****     float array[3][3];
  53:Core/Inc/FusionMath.h **** 
  54:Core/Inc/FusionMath.h ****     struct {
  55:Core/Inc/FusionMath.h ****         float xx;
  56:Core/Inc/FusionMath.h ****         float xy;
  57:Core/Inc/FusionMath.h ****         float xz;
  58:Core/Inc/FusionMath.h ****         float yx;
  59:Core/Inc/FusionMath.h ****         float yy;
  60:Core/Inc/FusionMath.h ****         float yz;
  61:Core/Inc/FusionMath.h ****         float zx;
  62:Core/Inc/FusionMath.h ****         float zy;
  63:Core/Inc/FusionMath.h ****         float zz;
  64:Core/Inc/FusionMath.h ****     } element;
  65:Core/Inc/FusionMath.h **** } FusionMatrix;
  66:Core/Inc/FusionMath.h **** 
  67:Core/Inc/FusionMath.h **** /**
  68:Core/Inc/FusionMath.h ****  * @brief Euler angles.  Roll, pitch, and yaw correspond to rotations around
  69:Core/Inc/FusionMath.h ****  * X, Y, and Z respectively.
  70:Core/Inc/FusionMath.h ****  */
  71:Core/Inc/FusionMath.h **** typedef union {
  72:Core/Inc/FusionMath.h ****     float array[3];
  73:Core/Inc/FusionMath.h **** 
  74:Core/Inc/FusionMath.h ****     struct {
  75:Core/Inc/FusionMath.h ****         float roll;
  76:Core/Inc/FusionMath.h ****         float pitch;
  77:Core/Inc/FusionMath.h ****         float yaw;
  78:Core/Inc/FusionMath.h ****     } angle;
  79:Core/Inc/FusionMath.h **** } FusionEuler;
  80:Core/Inc/FusionMath.h **** 
  81:Core/Inc/FusionMath.h **** /**
  82:Core/Inc/FusionMath.h ****  * @brief Vector of zeros.
  83:Core/Inc/FusionMath.h ****  */
  84:Core/Inc/FusionMath.h **** #define FUSION_VECTOR_ZERO ((FusionVector){ .array = {0.0f, 0.0f, 0.0f} })
  85:Core/Inc/FusionMath.h **** 
  86:Core/Inc/FusionMath.h **** /**
  87:Core/Inc/FusionMath.h ****  * @brief Vector of ones.
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 3


  88:Core/Inc/FusionMath.h ****  */
  89:Core/Inc/FusionMath.h **** #define FUSION_VECTOR_ONES ((FusionVector){ .array = {1.0f, 1.0f, 1.0f} })
  90:Core/Inc/FusionMath.h **** 
  91:Core/Inc/FusionMath.h **** /**
  92:Core/Inc/FusionMath.h ****  * @brief Identity quaternion.
  93:Core/Inc/FusionMath.h ****  */
  94:Core/Inc/FusionMath.h **** #define FUSION_IDENTITY_QUATERNION ((FusionQuaternion){ .array = {1.0f, 0.0f, 0.0f, 0.0f} })
  95:Core/Inc/FusionMath.h **** 
  96:Core/Inc/FusionMath.h **** /**
  97:Core/Inc/FusionMath.h ****  * @brief Identity matrix.
  98:Core/Inc/FusionMath.h ****  */
  99:Core/Inc/FusionMath.h **** #define FUSION_IDENTITY_MATRIX ((FusionMatrix){ .array = {{1.0f, 0.0f, 0.0f}, {0.0f, 1.0f, 0.0f}, {
 100:Core/Inc/FusionMath.h **** 
 101:Core/Inc/FusionMath.h **** /**
 102:Core/Inc/FusionMath.h ****  * @brief Euler angles of zero.
 103:Core/Inc/FusionMath.h ****  */
 104:Core/Inc/FusionMath.h **** #define FUSION_EULER_ZERO ((FusionEuler){ .array = {0.0f, 0.0f, 0.0f} })
 105:Core/Inc/FusionMath.h **** 
 106:Core/Inc/FusionMath.h **** /**
 107:Core/Inc/FusionMath.h ****  * @brief Pi. May not be defined in math.h.
 108:Core/Inc/FusionMath.h ****  */
 109:Core/Inc/FusionMath.h **** #ifndef M_PI
 110:Core/Inc/FusionMath.h **** #define M_PI (3.14159265358979323846)
 111:Core/Inc/FusionMath.h **** #endif
 112:Core/Inc/FusionMath.h **** 
 113:Core/Inc/FusionMath.h **** /**
 114:Core/Inc/FusionMath.h ****  * @brief Include this definition or add as a preprocessor definition to use
 115:Core/Inc/FusionMath.h ****  * normal square root operations.
 116:Core/Inc/FusionMath.h ****  */
 117:Core/Inc/FusionMath.h **** //#define FUSION_USE_NORMAL_SQRT
 118:Core/Inc/FusionMath.h **** 
 119:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 120:Core/Inc/FusionMath.h **** // Inline functions - Degrees and radians conversion
 121:Core/Inc/FusionMath.h **** 
 122:Core/Inc/FusionMath.h **** /**
 123:Core/Inc/FusionMath.h ****  * @brief Converts degrees to radians.
 124:Core/Inc/FusionMath.h ****  * @param degrees Degrees.
 125:Core/Inc/FusionMath.h ****  * @return Radians.
 126:Core/Inc/FusionMath.h ****  */
 127:Core/Inc/FusionMath.h **** static inline float FusionDegreesToRadians(const float degrees) {
 128:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 129:Core/Inc/FusionMath.h **** }
 130:Core/Inc/FusionMath.h **** 
 131:Core/Inc/FusionMath.h **** /**
 132:Core/Inc/FusionMath.h ****  * @brief Converts radians to degrees.
 133:Core/Inc/FusionMath.h ****  * @param radians Radians.
 134:Core/Inc/FusionMath.h ****  * @return Degrees.
 135:Core/Inc/FusionMath.h ****  */
 136:Core/Inc/FusionMath.h **** static inline float FusionRadiansToDegrees(const float radians) {
 137:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 138:Core/Inc/FusionMath.h **** }
 139:Core/Inc/FusionMath.h **** 
 140:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 141:Core/Inc/FusionMath.h **** // Inline functions - Arc sine
 142:Core/Inc/FusionMath.h **** 
 143:Core/Inc/FusionMath.h **** /**
 144:Core/Inc/FusionMath.h ****  * @brief Returns the arc sine of the value.
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 4


 145:Core/Inc/FusionMath.h ****  * @param value Value.
 146:Core/Inc/FusionMath.h ****  * @return Arc sine of the value.
 147:Core/Inc/FusionMath.h ****  */
 148:Core/Inc/FusionMath.h **** static inline float FusionAsin(const float value) {
 149:Core/Inc/FusionMath.h ****     if (value <= -1.0f) {
 150:Core/Inc/FusionMath.h ****         return (float) M_PI / -2.0f;
 151:Core/Inc/FusionMath.h ****     }
 152:Core/Inc/FusionMath.h ****     if (value >= 1.0f) {
 153:Core/Inc/FusionMath.h ****         return (float) M_PI / 2.0f;
 154:Core/Inc/FusionMath.h ****     }
 155:Core/Inc/FusionMath.h ****     return asinf(value);
 156:Core/Inc/FusionMath.h **** }
 157:Core/Inc/FusionMath.h **** 
 158:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 159:Core/Inc/FusionMath.h **** // Inline functions - Fast inverse square root
 160:Core/Inc/FusionMath.h **** 
 161:Core/Inc/FusionMath.h **** #ifndef FUSION_USE_NORMAL_SQRT
 162:Core/Inc/FusionMath.h **** 
 163:Core/Inc/FusionMath.h **** /**
 164:Core/Inc/FusionMath.h ****  * @brief Calculates the reciprocal of the square root.
 165:Core/Inc/FusionMath.h ****  * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 166:Core/Inc/FusionMath.h ****  * @param x Operand.
 167:Core/Inc/FusionMath.h ****  * @return Reciprocal of the square root of x.
 168:Core/Inc/FusionMath.h ****  */
 169:Core/Inc/FusionMath.h **** static inline float FusionFastInverseSqrt(const float x) {
 170:Core/Inc/FusionMath.h **** 
 171:Core/Inc/FusionMath.h ****     typedef union {
 172:Core/Inc/FusionMath.h ****         float f;
 173:Core/Inc/FusionMath.h ****         int32_t i;
 174:Core/Inc/FusionMath.h ****     } Union32;
 175:Core/Inc/FusionMath.h **** 
 176:Core/Inc/FusionMath.h ****     Union32 union32 = {.f = x};
 177:Core/Inc/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 178:Core/Inc/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 179:Core/Inc/FusionMath.h **** }
 180:Core/Inc/FusionMath.h **** 
 181:Core/Inc/FusionMath.h **** #endif
 182:Core/Inc/FusionMath.h **** 
 183:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 184:Core/Inc/FusionMath.h **** // Inline functions - Vector operations
 185:Core/Inc/FusionMath.h **** 
 186:Core/Inc/FusionMath.h **** /**
 187:Core/Inc/FusionMath.h ****  * @brief Returns true if the vector is zero.
 188:Core/Inc/FusionMath.h ****  * @param vector Vector.
 189:Core/Inc/FusionMath.h ****  * @return True if the vector is zero.
 190:Core/Inc/FusionMath.h ****  */
 191:Core/Inc/FusionMath.h **** static inline bool FusionVectorIsZero(const FusionVector vector) {
 192:Core/Inc/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 193:Core/Inc/FusionMath.h **** }
 194:Core/Inc/FusionMath.h **** 
 195:Core/Inc/FusionMath.h **** /**
 196:Core/Inc/FusionMath.h ****  * @brief Returns the sum of two vectors.
 197:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 198:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 199:Core/Inc/FusionMath.h ****  * @return Sum of two vectors.
 200:Core/Inc/FusionMath.h ****  */
 201:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) 
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 5


 202:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 203:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 204:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y + vectorB.axis.y,
 205:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z + vectorB.axis.z,
 206:Core/Inc/FusionMath.h ****     }};
 207:Core/Inc/FusionMath.h ****     return result;
 208:Core/Inc/FusionMath.h **** }
 209:Core/Inc/FusionMath.h **** 
 210:Core/Inc/FusionMath.h **** /**
 211:Core/Inc/FusionMath.h ****  * @brief Returns vector B subtracted from vector A.
 212:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 213:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 214:Core/Inc/FusionMath.h ****  * @return Vector B subtracted from vector A.
 215:Core/Inc/FusionMath.h ****  */
 216:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vect
 217:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 218:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 219:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y - vectorB.axis.y,
 220:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z - vectorB.axis.z,
 221:Core/Inc/FusionMath.h ****     }};
 222:Core/Inc/FusionMath.h ****     return result;
 223:Core/Inc/FusionMath.h **** }
 224:Core/Inc/FusionMath.h **** 
 225:Core/Inc/FusionMath.h **** /**
 226:Core/Inc/FusionMath.h ****  * @brief Returns the sum of the elements.
 227:Core/Inc/FusionMath.h ****  * @param vector Vector.
 228:Core/Inc/FusionMath.h ****  * @return Sum of the elements.
 229:Core/Inc/FusionMath.h ****  */
 230:Core/Inc/FusionMath.h **** static inline float FusionVectorSum(const FusionVector vector) {
 231:Core/Inc/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 232:Core/Inc/FusionMath.h **** }
 233:Core/Inc/FusionMath.h **** 
 234:Core/Inc/FusionMath.h **** /**
 235:Core/Inc/FusionMath.h ****  * @brief Returns the multiplication of a vector by a scalar.
 236:Core/Inc/FusionMath.h ****  * @param vector Vector.
 237:Core/Inc/FusionMath.h ****  * @param scalar Scalar.
 238:Core/Inc/FusionMath.h ****  * @return Multiplication of a vector by a scalar.
 239:Core/Inc/FusionMath.h ****  */
 240:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar
 241:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 242:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 243:Core/Inc/FusionMath.h ****             .y = vector.axis.y * scalar,
 244:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 245:Core/Inc/FusionMath.h ****     }};
 246:Core/Inc/FusionMath.h ****     return result;
 247:Core/Inc/FusionMath.h **** }
 248:Core/Inc/FusionMath.h **** 
 249:Core/Inc/FusionMath.h **** /**
 250:Core/Inc/FusionMath.h ****  * @brief Calculates the Hadamard product (element-wise multiplication).
 251:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 252:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 253:Core/Inc/FusionMath.h ****  * @return Hadamard product.
 254:Core/Inc/FusionMath.h ****  */
 255:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVect
 256:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 257:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 258:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y * vectorB.axis.y,
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 6


 259:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z * vectorB.axis.z,
 260:Core/Inc/FusionMath.h ****     }};
 261:Core/Inc/FusionMath.h ****     return result;
 262:Core/Inc/FusionMath.h **** }
 263:Core/Inc/FusionMath.h **** 
 264:Core/Inc/FusionMath.h **** /**
 265:Core/Inc/FusionMath.h ****  * @brief Returns the cross product.
 266:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 267:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 268:Core/Inc/FusionMath.h ****  * @return Cross product.
 269:Core/Inc/FusionMath.h ****  */
 270:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector 
  29              		.loc 2 270 109 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 64
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 90B0     		sub	sp, sp, #64
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 64
  37 0002 8DED070A 		vstr.32	s0, [sp, #28]
  38 0006 CDED080A 		vstr.32	s1, [sp, #32]
  39 000a 8DED091A 		vstr.32	s2, [sp, #36]
  40 000e CDED041A 		vstr.32	s3, [sp, #16]
  41 0012 8DED052A 		vstr.32	s4, [sp, #20]
  42 0016 CDED062A 		vstr.32	s5, [sp, #24]
 271:Core/Inc/FusionMath.h **** #define A vectorA.axis
 272:Core/Inc/FusionMath.h **** #define B vectorB.axis
 273:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
  43              		.loc 2 273 5 view .LVU1
 274:Core/Inc/FusionMath.h ****             .x = A.y * B.z - A.z * B.y,
  44              		.loc 2 274 22 is_stmt 0 view .LVU2
  45 001a 60EEA27A 		vmul.f32	s15, s1, s5
  46              		.loc 2 274 34 view .LVU3
  47 001e 21EE027A 		vmul.f32	s14, s2, s4
  48              		.loc 2 274 28 view .LVU4
  49 0022 77EEC77A 		vsub.f32	s15, s15, s14
 273:Core/Inc/FusionMath.h ****             .x = A.y * B.z - A.z * B.y,
  50              		.loc 2 273 24 view .LVU5
  51 0026 CDED0A7A 		vstr.32	s15, [sp, #40]
 275:Core/Inc/FusionMath.h ****             .y = A.z * B.x - A.x * B.z,
  52              		.loc 2 275 22 view .LVU6
  53 002a 21EE211A 		vmul.f32	s2, s2, s3
  54              		.loc 2 275 34 view .LVU7
  55 002e 62EE802A 		vmul.f32	s5, s5, s0
  56              		.loc 2 275 28 view .LVU8
  57 0032 31EE621A 		vsub.f32	s2, s2, s5
 273:Core/Inc/FusionMath.h ****             .x = A.y * B.z - A.z * B.y,
  58              		.loc 2 273 24 view .LVU9
  59 0036 8DED0B1A 		vstr.32	s2, [sp, #44]
 276:Core/Inc/FusionMath.h ****             .z = A.x * B.y - A.y * B.x,
  60              		.loc 2 276 22 view .LVU10
  61 003a 22EE002A 		vmul.f32	s4, s4, s0
  62              		.loc 2 276 34 view .LVU11
  63 003e 60EEA10A 		vmul.f32	s1, s1, s3
  64              		.loc 2 276 28 view .LVU12
  65 0042 32EE602A 		vsub.f32	s4, s4, s1
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 7


 273:Core/Inc/FusionMath.h ****             .x = A.y * B.z - A.z * B.y,
  66              		.loc 2 273 24 view .LVU13
  67 0046 8DED0C2A 		vstr.32	s4, [sp, #48]
 277:Core/Inc/FusionMath.h ****     }};
 278:Core/Inc/FusionMath.h ****     return result;
  68              		.loc 2 278 5 is_stmt 1 view .LVU14
  69              		.loc 2 278 12 is_stmt 0 view .LVU15
  70 004a 0AAB     		add	r3, sp, #40
  71 004c 93E80700 		ldm	r3, {r0, r1, r2}
  72 0050 10AB     		add	r3, sp, #64
  73 0052 03E90700 		stmdb	r3, {r0, r1, r2}
 279:Core/Inc/FusionMath.h **** #undef A
 280:Core/Inc/FusionMath.h **** #undef B
 281:Core/Inc/FusionMath.h **** }
  74              		.loc 2 281 1 view .LVU16
  75 0056 9DED0D0A 		vldr.32	s0, [sp, #52]
  76 005a DDED0E0A 		vldr.32	s1, [sp, #56]
  77 005e 9DED0F1A 		vldr.32	s2, [sp, #60]
  78 0062 10B0     		add	sp, sp, #64
  79              	.LCFI1:
  80              		.cfi_def_cfa_offset 0
  81              		@ sp needed
  82 0064 7047     		bx	lr
  83              		.cfi_endproc
  84              	.LFE10:
  86              		.section	.text.FusionVectorMagnitudeSquared,"ax",%progbits
  87              		.align	1
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  92              	FusionVectorMagnitudeSquared:
  93              	.LFB12:
 282:Core/Inc/FusionMath.h **** 
 283:Core/Inc/FusionMath.h **** /**
 284:Core/Inc/FusionMath.h ****  * @brief Returns the dot product.
 285:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 286:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 287:Core/Inc/FusionMath.h ****  * @return Dot product.
 288:Core/Inc/FusionMath.h ****  */
 289:Core/Inc/FusionMath.h **** static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) 
 290:Core/Inc/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 291:Core/Inc/FusionMath.h **** }
 292:Core/Inc/FusionMath.h **** 
 293:Core/Inc/FusionMath.h **** /**
 294:Core/Inc/FusionMath.h ****  * @brief Returns the vector magnitude squared.
 295:Core/Inc/FusionMath.h ****  * @param vector Vector.
 296:Core/Inc/FusionMath.h ****  * @return Vector magnitude squared.
 297:Core/Inc/FusionMath.h ****  */
 298:Core/Inc/FusionMath.h **** static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
  94              		.loc 2 298 77 is_stmt 1 view -0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 56
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99 0000 8EB0     		sub	sp, sp, #56
 100              	.LCFI2:
 101              		.cfi_def_cfa_offset 56
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 8


 102 0002 8DED010A 		vstr.32	s0, [sp, #4]
 103 0006 CDED020A 		vstr.32	s1, [sp, #8]
 104 000a 8DED031A 		vstr.32	s2, [sp, #12]
 299:Core/Inc/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 105              		.loc 2 299 5 view .LVU18
 106              	.LBB23:
 107              	.LBI23:
 255:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 108              		.loc 2 255 28 view .LVU19
 109              	.LBB24:
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 110              		.loc 2 256 5 view .LVU20
 257:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y * vectorB.axis.y,
 111              		.loc 2 257 33 is_stmt 0 view .LVU21
 112 000e 20EE000A 		vmul.f32	s0, s0, s0
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 113              		.loc 2 256 24 view .LVU22
 114 0012 8DED050A 		vstr.32	s0, [sp, #20]
 258:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z * vectorB.axis.z,
 115              		.loc 2 258 33 view .LVU23
 116 0016 60EEA00A 		vmul.f32	s1, s1, s1
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 117              		.loc 2 256 24 view .LVU24
 118 001a CDED060A 		vstr.32	s1, [sp, #24]
 259:Core/Inc/FusionMath.h ****     }};
 119              		.loc 2 259 33 view .LVU25
 120 001e 21EE011A 		vmul.f32	s2, s2, s2
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 121              		.loc 2 256 24 view .LVU26
 122 0022 8DED071A 		vstr.32	s2, [sp, #28]
 261:Core/Inc/FusionMath.h **** }
 123              		.loc 2 261 5 is_stmt 1 view .LVU27
 261:Core/Inc/FusionMath.h **** }
 124              		.loc 2 261 12 is_stmt 0 view .LVU28
 125 0026 0BAB     		add	r3, sp, #44
 126 0028 05AA     		add	r2, sp, #20
 127 002a 07CA     		ldm	r2, {r0, r1, r2}
 128 002c 83E80700 		stm	r3, {r0, r1, r2}
 129 0030 0DF1200C 		add	ip, sp, #32
 130 0034 8CE80700 		stm	ip, {r0, r1, r2}
 131              	.LBE24:
 132              	.LBE23:
 133              	.LBB25:
 134              	.LBI25:
 230:Core/Inc/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 135              		.loc 2 230 21 is_stmt 1 view .LVU29
 136              	.LBB26:
 231:Core/Inc/FusionMath.h **** }
 137              		.loc 2 231 5 view .LVU30
 231:Core/Inc/FusionMath.h **** }
 138              		.loc 2 231 26 is_stmt 0 view .LVU31
 139 0038 30EE200A 		vadd.f32	s0, s0, s1
 140              	.LBE26:
 141              	.LBE25:
 300:Core/Inc/FusionMath.h **** }
 142              		.loc 2 300 1 view .LVU32
 143 003c 30EE010A 		vadd.f32	s0, s0, s2
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 9


 144 0040 0EB0     		add	sp, sp, #56
 145              	.LCFI3:
 146              		.cfi_def_cfa_offset 0
 147              		@ sp needed
 148 0042 7047     		bx	lr
 149              		.cfi_endproc
 150              	.LFE12:
 152              		.section	.text.FusionVectorNormalise,"ax",%progbits
 153              		.align	1
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 158              	FusionVectorNormalise:
 159              	.LFB14:
 301:Core/Inc/FusionMath.h **** 
 302:Core/Inc/FusionMath.h **** /**
 303:Core/Inc/FusionMath.h ****  * @brief Returns the vector magnitude.
 304:Core/Inc/FusionMath.h ****  * @param vector Vector.
 305:Core/Inc/FusionMath.h ****  * @return Vector magnitude.
 306:Core/Inc/FusionMath.h ****  */
 307:Core/Inc/FusionMath.h **** static inline float FusionVectorMagnitude(const FusionVector vector) {
 308:Core/Inc/FusionMath.h ****     return sqrtf(FusionVectorMagnitudeSquared(vector));
 309:Core/Inc/FusionMath.h **** }
 310:Core/Inc/FusionMath.h **** 
 311:Core/Inc/FusionMath.h **** /**
 312:Core/Inc/FusionMath.h ****  * @brief Returns the normalised vector.
 313:Core/Inc/FusionMath.h ****  * @param vector Vector.
 314:Core/Inc/FusionMath.h ****  * @return Normalised vector.
 315:Core/Inc/FusionMath.h ****  */
 316:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 160              		.loc 2 316 77 is_stmt 1 view -0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 72
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164 0000 00B5     		push	{lr}
 165              	.LCFI4:
 166              		.cfi_def_cfa_offset 4
 167              		.cfi_offset 14, -4
 168 0002 2DED048B 		vpush.64	{d8, d9}
 169              	.LCFI5:
 170              		.cfi_def_cfa_offset 20
 171              		.cfi_offset 80, -20
 172              		.cfi_offset 81, -16
 173              		.cfi_offset 82, -12
 174              		.cfi_offset 83, -8
 175 0006 93B0     		sub	sp, sp, #76
 176              	.LCFI6:
 177              		.cfi_def_cfa_offset 96
 178 0008 B0EE409A 		vmov.f32	s18, s0
 179 000c F0EE608A 		vmov.f32	s17, s1
 180 0010 B0EE418A 		vmov.f32	s16, s2
 181 0014 8DED050A 		vstr.32	s0, [sp, #20]
 182 0018 CDED060A 		vstr.32	s1, [sp, #24]
 183 001c 8DED071A 		vstr.32	s2, [sp, #28]
 317:Core/Inc/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 318:Core/Inc/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
 319:Core/Inc/FusionMath.h **** #else
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 10


 320:Core/Inc/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 184              		.loc 2 320 5 view .LVU34
 185              		.loc 2 320 39 is_stmt 0 view .LVU35
 186 0020 FFF7FEFF 		bl	FusionVectorMagnitudeSquared
 187              	.LVL0:
 188              	.LBB27:
 189              	.LBI27:
 169:Core/Inc/FusionMath.h **** 
 190              		.loc 2 169 21 is_stmt 1 view .LVU36
 191              	.LBB28:
 171:Core/Inc/FusionMath.h ****         float f;
 192              		.loc 2 171 5 view .LVU37
 176:Core/Inc/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 193              		.loc 2 176 5 view .LVU38
 177:Core/Inc/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 194              		.loc 2 177 5 view .LVU39
 178:Core/Inc/FusionMath.h **** }
 195              		.loc 2 178 5 view .LVU40
 196 0024 1A4B     		ldr	r3, .L7
 197 0026 10EE102A 		vmov	r2, s0	@ int
 198 002a A3EB6203 		sub	r3, r3, r2, asr #1
 199 002e 07EE103A 		vmov	s14, r3	@ int
 178:Core/Inc/FusionMath.h **** }
 200              		.loc 2 178 52 is_stmt 0 view .LVU41
 201 0032 DFED187A 		vldr.32	s15, .L7+4
 202 0036 60EE277A 		vmul.f32	s15, s0, s15
 178:Core/Inc/FusionMath.h **** }
 203              		.loc 2 178 56 view .LVU42
 204 003a 67EE277A 		vmul.f32	s15, s14, s15
 178:Core/Inc/FusionMath.h **** }
 205              		.loc 2 178 68 view .LVU43
 206 003e 67EE277A 		vmul.f32	s15, s14, s15
 178:Core/Inc/FusionMath.h **** }
 207              		.loc 2 178 37 view .LVU44
 208 0042 DFED156A 		vldr.32	s13, .L7+8
 209 0046 76EEE77A 		vsub.f32	s15, s13, s15
 178:Core/Inc/FusionMath.h **** }
 210              		.loc 2 178 22 view .LVU45
 211 004a 67EE277A 		vmul.f32	s15, s14, s15
 212              	.LVL1:
 178:Core/Inc/FusionMath.h **** }
 213              		.loc 2 178 22 view .LVU46
 214              	.LBE28:
 215              	.LBE27:
 321:Core/Inc/FusionMath.h **** #endif
 322:Core/Inc/FusionMath.h ****     return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 216              		.loc 2 322 5 is_stmt 1 view .LVU47
 217              	.LBB29:
 218              	.LBI29:
 240:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 219              		.loc 2 240 28 view .LVU48
 220              	.LBB30:
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 221              		.loc 2 241 5 view .LVU49
 242:Core/Inc/FusionMath.h ****             .y = vector.axis.y * scalar,
 222              		.loc 2 242 32 is_stmt 0 view .LVU50
 223 004e 29EE279A 		vmul.f32	s18, s18, s15
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 11


 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 224              		.loc 2 241 24 view .LVU51
 225 0052 8DED099A 		vstr.32	s18, [sp, #36]
 243:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 226              		.loc 2 243 32 view .LVU52
 227 0056 68EEA78A 		vmul.f32	s17, s17, s15
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 228              		.loc 2 241 24 view .LVU53
 229 005a CDED0A8A 		vstr.32	s17, [sp, #40]
 244:Core/Inc/FusionMath.h ****     }};
 230              		.loc 2 244 32 view .LVU54
 231 005e 28EE278A 		vmul.f32	s16, s16, s15
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 232              		.loc 2 241 24 view .LVU55
 233 0062 8DED0B8A 		vstr.32	s16, [sp, #44]
 246:Core/Inc/FusionMath.h **** }
 234              		.loc 2 246 5 is_stmt 1 view .LVU56
 246:Core/Inc/FusionMath.h **** }
 235              		.loc 2 246 12 is_stmt 0 view .LVU57
 236 0066 0FAB     		add	r3, sp, #60
 237 0068 09AA     		add	r2, sp, #36
 238 006a 07CA     		ldm	r2, {r0, r1, r2}
 239 006c 83E80700 		stm	r3, {r0, r1, r2}
 240 0070 0DF1300C 		add	ip, sp, #48
 241 0074 8CE80700 		stm	ip, {r0, r1, r2}
 242              	.LVL2:
 246:Core/Inc/FusionMath.h **** }
 243              		.loc 2 246 12 view .LVU58
 244              	.LBE30:
 245              	.LBE29:
 323:Core/Inc/FusionMath.h **** }
 246              		.loc 2 323 1 view .LVU59
 247 0078 9DED0C0A 		vldr.32	s0, [sp, #48]
 248 007c DDED0D0A 		vldr.32	s1, [sp, #52]
 249 0080 9DED0E1A 		vldr.32	s2, [sp, #56]
 250 0084 13B0     		add	sp, sp, #76
 251              	.LCFI7:
 252              		.cfi_def_cfa_offset 20
 253              		@ sp needed
 254 0086 BDEC048B 		vldm	sp!, {d8-d9}
 255              	.LCFI8:
 256              		.cfi_restore 82
 257              		.cfi_restore 83
 258              		.cfi_restore 80
 259              		.cfi_restore 81
 260              		.cfi_def_cfa_offset 4
 261 008a 5DF804FB 		ldr	pc, [sp], #4
 262              	.L8:
 263 008e 00BF     		.align	2
 264              	.L7:
 265 0090 12141F5F 		.word	1595872274
 266 0094 12D3363F 		.word	1060557586
 267 0098 FF51D83F 		.word	1071141375
 268              		.cfi_endproc
 269              	.LFE14:
 271              		.section	.text.FusionCompassCalculateHeading,"ax",%progbits
 272              		.align	1
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 12


 273              		.global	FusionCompassCalculateHeading
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 278              	FusionCompassCalculateHeading:
 279              	.LVL3:
 280              	.LFB23:
   1:Core/Src/FusionCompass.c **** /**
   2:Core/Src/FusionCompass.c ****  * @file FusionCompass.c
   3:Core/Src/FusionCompass.c ****  * @author Seb Madgwick
   4:Core/Src/FusionCompass.c ****  * @brief Tilt-compensated compass to calculate the magnetic heading using
   5:Core/Src/FusionCompass.c ****  * accelerometer and magnetometer measurements.
   6:Core/Src/FusionCompass.c ****  */
   7:Core/Src/FusionCompass.c **** 
   8:Core/Src/FusionCompass.c **** //------------------------------------------------------------------------------
   9:Core/Src/FusionCompass.c **** // Includes
  10:Core/Src/FusionCompass.c **** 
  11:Core/Src/FusionCompass.c **** #include "FusionAxes.h"
  12:Core/Src/FusionCompass.c **** #include "FusionCompass.h"
  13:Core/Src/FusionCompass.c **** #include <math.h> // atan2f
  14:Core/Src/FusionCompass.c **** 
  15:Core/Src/FusionCompass.c **** //------------------------------------------------------------------------------
  16:Core/Src/FusionCompass.c **** // Functions
  17:Core/Src/FusionCompass.c **** 
  18:Core/Src/FusionCompass.c **** /**
  19:Core/Src/FusionCompass.c ****  * @brief Calculates the magnetic heading.
  20:Core/Src/FusionCompass.c ****  * @param convention Earth axes convention.
  21:Core/Src/FusionCompass.c ****  * @param accelerometer Accelerometer measurement in any calibrated units.
  22:Core/Src/FusionCompass.c ****  * @param magnetometer Magnetometer measurement in any calibrated units.
  23:Core/Src/FusionCompass.c ****  * @return Heading angle in degrees.
  24:Core/Src/FusionCompass.c ****  */
  25:Core/Src/FusionCompass.c **** float FusionCompassCalculateHeading(const FusionConvention convention, const FusionVector accelerom
 281              		.loc 1 25 139 is_stmt 1 view -0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 160
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              		.loc 1 25 139 is_stmt 0 view .LVU61
 286 0000 00B5     		push	{lr}
 287              	.LCFI9:
 288              		.cfi_def_cfa_offset 4
 289              		.cfi_offset 14, -4
 290 0002 2DED068B 		vpush.64	{d8, d9, d10}
 291              	.LCFI10:
 292              		.cfi_def_cfa_offset 28
 293              		.cfi_offset 80, -28
 294              		.cfi_offset 81, -24
 295              		.cfi_offset 82, -20
 296              		.cfi_offset 83, -16
 297              		.cfi_offset 84, -12
 298              		.cfi_offset 85, -8
 299 0006 A9B0     		sub	sp, sp, #164
 300              	.LCFI11:
 301              		.cfi_def_cfa_offset 192
 302 0008 8DED030A 		vstr.32	s0, [sp, #12]
 303 000c CDED040A 		vstr.32	s1, [sp, #16]
 304 0010 8DED051A 		vstr.32	s2, [sp, #20]
 305 0014 CDED001A 		vstr.32	s3, [sp]
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 13


 306 0018 8DED012A 		vstr.32	s4, [sp, #4]
 307 001c CDED022A 		vstr.32	s5, [sp, #8]
  26:Core/Src/FusionCompass.c ****     switch (convention) {
 308              		.loc 1 26 5 is_stmt 1 view .LVU62
 309 0020 0128     		cmp	r0, #1
 310 0022 42D0     		beq	.L10
 311 0024 0228     		cmp	r0, #2
 312 0026 00F09880 		beq	.L11
 313 002a 0028     		cmp	r0, #0
 314 002c 40F0F580 		bne	.L13
 315              	.LBB31:
  27:Core/Src/FusionCompass.c ****         case FusionConventionNwu: {
  28:Core/Src/FusionCompass.c ****             const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer,
 316              		.loc 1 28 13 view .LVU63
 317              		.loc 1 28 39 is_stmt 0 view .LVU64
 318 0030 F0EE409A 		vmov.f32	s19, s0
 319 0034 B0EE609A 		vmov.f32	s18, s1
 320 0038 F0EE418A 		vmov.f32	s17, s2
 321 003c FFF7FEFF 		bl	FusionVectorCrossProduct
 322              	.LVL4:
 323              		.loc 1 28 39 view .LVU65
 324 0040 8DED100A 		vstr.32	s0, [sp, #64]
 325 0044 CDED110A 		vstr.32	s1, [sp, #68]
 326 0048 8DED121A 		vstr.32	s2, [sp, #72]
 327              		.loc 1 28 39 discriminator 1 view .LVU66
 328 004c FFF7FEFF 		bl	FusionVectorNormalise
 329              	.LVL5:
 330 0050 B0EE408A 		vmov.f32	s16, s0
 331 0054 8DED0A0A 		vstr.32	s0, [sp, #40]
 332 0058 CDED0B0A 		vstr.32	s1, [sp, #44]
 333 005c 8DED0C1A 		vstr.32	s2, [sp, #48]
  29:Core/Src/FusionCompass.c ****             const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, acceler
 334              		.loc 1 29 13 is_stmt 1 view .LVU67
 335              		.loc 1 29 40 is_stmt 0 view .LVU68
 336 0060 F0EE691A 		vmov.f32	s3, s19
 337 0064 B0EE492A 		vmov.f32	s4, s18
 338 0068 F0EE682A 		vmov.f32	s5, s17
 339 006c FFF7FEFF 		bl	FusionVectorCrossProduct
 340              	.LVL6:
 341 0070 8DED130A 		vstr.32	s0, [sp, #76]
 342 0074 CDED140A 		vstr.32	s1, [sp, #80]
 343 0078 8DED151A 		vstr.32	s2, [sp, #84]
 344              		.loc 1 29 40 discriminator 1 view .LVU69
 345 007c FFF7FEFF 		bl	FusionVectorNormalise
 346              	.LVL7:
 347 0080 8DED0D0A 		vstr.32	s0, [sp, #52]
 348 0084 CDED0E0A 		vstr.32	s1, [sp, #56]
 349 0088 8DED0F1A 		vstr.32	s2, [sp, #60]
  30:Core/Src/FusionCompass.c ****             return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 350              		.loc 1 30 13 is_stmt 1 view .LVU70
 351              		.loc 1 30 20 is_stmt 0 view .LVU71
 352 008c F0EE400A 		vmov.f32	s1, s0
 353 0090 B0EE480A 		vmov.f32	s0, s16
 354 0094 FFF7FEFF 		bl	atan2f
 355              	.LVL8:
 356              	.LBB32:
 357              	.LBI32:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 14


 136:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 358              		.loc 2 136 21 is_stmt 1 view .LVU72
 359              	.LBB33:
 137:Core/Inc/FusionMath.h **** }
 360              		.loc 2 137 5 view .LVU73
 137:Core/Inc/FusionMath.h **** }
 361              		.loc 2 137 20 is_stmt 0 view .LVU74
 362 0098 DFED617A 		vldr.32	s15, .L15
 363 009c 20EE270A 		vmul.f32	s0, s0, s15
 364              	.LVL9:
 365              	.L9:
 137:Core/Inc/FusionMath.h **** }
 366              		.loc 2 137 20 view .LVU75
 367              	.LBE33:
 368              	.LBE32:
 369              	.LBE31:
  31:Core/Src/FusionCompass.c ****         }
  32:Core/Src/FusionCompass.c ****         case FusionConventionEnu: {
  33:Core/Src/FusionCompass.c ****             const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer,
  34:Core/Src/FusionCompass.c ****             const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, acceler
  35:Core/Src/FusionCompass.c ****             const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
  36:Core/Src/FusionCompass.c ****             return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
  37:Core/Src/FusionCompass.c ****         }
  38:Core/Src/FusionCompass.c ****         case FusionConventionNed: {
  39:Core/Src/FusionCompass.c ****             const FusionVector up = FusionVectorMultiplyScalar(accelerometer, -1.0f);
  40:Core/Src/FusionCompass.c ****             const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetomet
  41:Core/Src/FusionCompass.c ****             const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
  42:Core/Src/FusionCompass.c ****             return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
  43:Core/Src/FusionCompass.c ****         }
  44:Core/Src/FusionCompass.c ****     }
  45:Core/Src/FusionCompass.c ****     return 0; // avoid compiler warning
  46:Core/Src/FusionCompass.c **** }
 370              		.loc 1 46 1 view .LVU76
 371 00a0 29B0     		add	sp, sp, #164
 372              	.LCFI12:
 373              		.cfi_remember_state
 374              		.cfi_def_cfa_offset 28
 375              		@ sp needed
 376 00a2 BDEC068B 		vldm	sp!, {d8-d10}
 377              	.LCFI13:
 378              		.cfi_restore 84
 379              		.cfi_restore 85
 380              		.cfi_restore 82
 381              		.cfi_restore 83
 382              		.cfi_restore 80
 383              		.cfi_restore 81
 384              		.cfi_def_cfa_offset 4
 385 00a6 5DF804FB 		ldr	pc, [sp], #4
 386              	.LVL10:
 387              	.L10:
 388              	.LCFI14:
 389              		.cfi_restore_state
 390              	.LBB34:
  33:Core/Src/FusionCompass.c ****             const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, acceler
 391              		.loc 1 33 13 is_stmt 1 view .LVU77
  33:Core/Src/FusionCompass.c ****             const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, acceler
 392              		.loc 1 33 39 is_stmt 0 view .LVU78
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 15


 393 00aa DDED03AA 		vldr.32	s21, [sp, #12]
 394 00ae 9DED04AA 		vldr.32	s20, [sp, #16]
 395 00b2 DDED059A 		vldr.32	s19, [sp, #20]
 396 00b6 DDED001A 		vldr.32	s3, [sp]
 397 00ba 9DED012A 		vldr.32	s4, [sp, #4]
 398 00be DDED022A 		vldr.32	s5, [sp, #8]
 399 00c2 B0EE6A0A 		vmov.f32	s0, s21
 400 00c6 F0EE4A0A 		vmov.f32	s1, s20
 401 00ca B0EE691A 		vmov.f32	s2, s19
 402 00ce FFF7FEFF 		bl	FusionVectorCrossProduct
 403              	.LVL11:
  33:Core/Src/FusionCompass.c ****             const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, acceler
 404              		.loc 1 33 39 view .LVU79
 405 00d2 8DED160A 		vstr.32	s0, [sp, #88]
 406 00d6 CDED170A 		vstr.32	s1, [sp, #92]
 407 00da 8DED181A 		vstr.32	s2, [sp, #96]
  33:Core/Src/FusionCompass.c ****             const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, acceler
 408              		.loc 1 33 39 discriminator 1 view .LVU80
 409 00de FFF7FEFF 		bl	FusionVectorNormalise
 410              	.LVL12:
 411 00e2 B0EE408A 		vmov.f32	s16, s0
 412 00e6 B0EE609A 		vmov.f32	s18, s1
 413 00ea F0EE418A 		vmov.f32	s17, s2
 414 00ee 8DED070A 		vstr.32	s0, [sp, #28]
 415 00f2 CDED080A 		vstr.32	s1, [sp, #32]
 416 00f6 8DED091A 		vstr.32	s2, [sp, #36]
  34:Core/Src/FusionCompass.c ****             const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 417              		.loc 1 34 13 is_stmt 1 view .LVU81
  34:Core/Src/FusionCompass.c ****             const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 418              		.loc 1 34 40 is_stmt 0 view .LVU82
 419 00fa F0EE6A1A 		vmov.f32	s3, s21
 420 00fe B0EE4A2A 		vmov.f32	s4, s20
 421 0102 F0EE692A 		vmov.f32	s5, s19
 422 0106 FFF7FEFF 		bl	FusionVectorCrossProduct
 423              	.LVL13:
 424 010a 8DED190A 		vstr.32	s0, [sp, #100]
 425 010e CDED1A0A 		vstr.32	s1, [sp, #104]
 426 0112 8DED1B1A 		vstr.32	s2, [sp, #108]
  34:Core/Src/FusionCompass.c ****             const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 427              		.loc 1 34 40 discriminator 1 view .LVU83
 428 0116 FFF7FEFF 		bl	FusionVectorNormalise
 429              	.LVL14:
 430 011a 8DED0A0A 		vstr.32	s0, [sp, #40]
 431 011e CDED0B0A 		vstr.32	s1, [sp, #44]
 432 0122 8DED0C1A 		vstr.32	s2, [sp, #48]
  35:Core/Src/FusionCompass.c ****             return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
 433              		.loc 1 35 13 is_stmt 1 view .LVU84
 434              	.LVL15:
 435              	.LBB35:
 436              	.LBI35:
 240:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 437              		.loc 2 240 28 view .LVU85
 438              	.LBB36:
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 439              		.loc 2 241 5 view .LVU86
 242:Core/Inc/FusionMath.h ****             .y = vector.axis.y * scalar,
 440              		.loc 2 242 32 is_stmt 0 view .LVU87
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 16


 441 0126 F1EE480A 		vneg.f32	s1, s16
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 442              		.loc 2 241 24 view .LVU88
 443 012a CDED0D0A 		vstr.32	s1, [sp, #52]
 243:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 444              		.loc 2 243 32 view .LVU89
 445 012e B1EE499A 		vneg.f32	s18, s18
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 446              		.loc 2 241 24 view .LVU90
 447 0132 8DED0E9A 		vstr.32	s18, [sp, #56]
 244:Core/Inc/FusionMath.h ****     }};
 448              		.loc 2 244 32 view .LVU91
 449 0136 F1EE688A 		vneg.f32	s17, s17
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 450              		.loc 2 241 24 view .LVU92
 451 013a CDED0F8A 		vstr.32	s17, [sp, #60]
 246:Core/Inc/FusionMath.h **** }
 452              		.loc 2 246 5 is_stmt 1 view .LVU93
 246:Core/Inc/FusionMath.h **** }
 453              		.loc 2 246 12 is_stmt 0 view .LVU94
 454 013e 0DF1880C 		add	ip, sp, #136
 455 0142 0DAB     		add	r3, sp, #52
 456 0144 93E80700 		ldm	r3, {r0, r1, r2}
 457 0148 8CE80700 		stm	ip, {r0, r1, r2}
 458              	.LVL16:
 246:Core/Inc/FusionMath.h **** }
 459              		.loc 2 246 12 view .LVU95
 460              	.LBE36:
 461              	.LBE35:
  36:Core/Src/FusionCompass.c ****         }
 462              		.loc 1 36 13 is_stmt 1 view .LVU96
  36:Core/Src/FusionCompass.c ****         }
 463              		.loc 1 36 20 is_stmt 0 view .LVU97
 464 014c FFF7FEFF 		bl	atan2f
 465              	.LVL17:
 466              	.LBB37:
 467              	.LBI37:
 136:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 468              		.loc 2 136 21 is_stmt 1 view .LVU98
 469              	.LBB38:
 137:Core/Inc/FusionMath.h **** }
 470              		.loc 2 137 5 view .LVU99
 137:Core/Inc/FusionMath.h **** }
 471              		.loc 2 137 20 is_stmt 0 view .LVU100
 472 0150 DFED337A 		vldr.32	s15, .L15
 473 0154 20EE270A 		vmul.f32	s0, s0, s15
 474              	.LVL18:
 137:Core/Inc/FusionMath.h **** }
 475              		.loc 2 137 20 view .LVU101
 476 0158 A2E7     		b	.L9
 477              	.LVL19:
 478              	.L11:
 137:Core/Inc/FusionMath.h **** }
 479              		.loc 2 137 20 view .LVU102
 480              	.LBE38:
 481              	.LBE37:
 482              	.LBE34:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 17


 483              	.LBB39:
  39:Core/Src/FusionCompass.c ****             const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetomet
 484              		.loc 1 39 13 is_stmt 1 view .LVU103
 485              	.LBB40:
 486              	.LBI40:
 240:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 487              		.loc 2 240 28 view .LVU104
 488              	.LBB41:
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 489              		.loc 2 241 5 view .LVU105
 242:Core/Inc/FusionMath.h ****             .y = vector.axis.y * scalar,
 490              		.loc 2 242 29 is_stmt 0 view .LVU106
 491 015a DDED037A 		vldr.32	s15, [sp, #12]
 242:Core/Inc/FusionMath.h ****             .y = vector.axis.y * scalar,
 492              		.loc 2 242 32 view .LVU107
 493 015e F1EE677A 		vneg.f32	s15, s15
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 494              		.loc 2 241 24 view .LVU108
 495 0162 CDED0D7A 		vstr.32	s15, [sp, #52]
 243:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 496              		.loc 2 243 29 view .LVU109
 497 0166 DDED047A 		vldr.32	s15, [sp, #16]
 243:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 498              		.loc 2 243 32 view .LVU110
 499 016a F1EE677A 		vneg.f32	s15, s15
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 500              		.loc 2 241 24 view .LVU111
 501 016e CDED0E7A 		vstr.32	s15, [sp, #56]
 244:Core/Inc/FusionMath.h ****     }};
 502              		.loc 2 244 29 view .LVU112
 503 0172 DDED057A 		vldr.32	s15, [sp, #20]
 244:Core/Inc/FusionMath.h ****     }};
 504              		.loc 2 244 32 view .LVU113
 505 0176 F1EE677A 		vneg.f32	s15, s15
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 506              		.loc 2 241 24 view .LVU114
 507 017a CDED0F7A 		vstr.32	s15, [sp, #60]
 246:Core/Inc/FusionMath.h **** }
 508              		.loc 2 246 5 is_stmt 1 view .LVU115
 246:Core/Inc/FusionMath.h **** }
 509              		.loc 2 246 12 is_stmt 0 view .LVU116
 510 017e 25AB     		add	r3, sp, #148
 511 0180 0DAA     		add	r2, sp, #52
 512 0182 07CA     		ldm	r2, {r0, r1, r2}
 513              	.LVL20:
 246:Core/Inc/FusionMath.h **** }
 514              		.loc 2 246 12 view .LVU117
 515 0184 83E80700 		stm	r3, {r0, r1, r2}
 516 0188 0DF11C0C 		add	ip, sp, #28
 517 018c 8CE80700 		stm	ip, {r0, r1, r2}
 518              	.LVL21:
 246:Core/Inc/FusionMath.h **** }
 519              		.loc 2 246 12 view .LVU118
 520              	.LBE41:
 521              	.LBE40:
  40:Core/Src/FusionCompass.c ****             const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 522              		.loc 1 40 13 is_stmt 1 view .LVU119
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 18


  40:Core/Src/FusionCompass.c ****             const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 523              		.loc 1 40 39 is_stmt 0 view .LVU120
 524 0190 DDED079A 		vldr.32	s19, [sp, #28]
 525 0194 9DED089A 		vldr.32	s18, [sp, #32]
 526 0198 DDED098A 		vldr.32	s17, [sp, #36]
 527 019c DDED001A 		vldr.32	s3, [sp]
 528 01a0 9DED012A 		vldr.32	s4, [sp, #4]
 529 01a4 DDED022A 		vldr.32	s5, [sp, #8]
 530 01a8 B0EE690A 		vmov.f32	s0, s19
 531 01ac F0EE490A 		vmov.f32	s1, s18
 532 01b0 B0EE681A 		vmov.f32	s2, s17
 533 01b4 FFF7FEFF 		bl	FusionVectorCrossProduct
 534              	.LVL22:
 535 01b8 8DED1C0A 		vstr.32	s0, [sp, #112]
 536 01bc CDED1D0A 		vstr.32	s1, [sp, #116]
 537 01c0 8DED1E1A 		vstr.32	s2, [sp, #120]
  40:Core/Src/FusionCompass.c ****             const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 538              		.loc 1 40 39 discriminator 1 view .LVU121
 539 01c4 FFF7FEFF 		bl	FusionVectorNormalise
 540              	.LVL23:
 541 01c8 B0EE408A 		vmov.f32	s16, s0
 542 01cc 8DED0A0A 		vstr.32	s0, [sp, #40]
 543 01d0 CDED0B0A 		vstr.32	s1, [sp, #44]
 544 01d4 8DED0C1A 		vstr.32	s2, [sp, #48]
  41:Core/Src/FusionCompass.c ****             return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 545              		.loc 1 41 13 is_stmt 1 view .LVU122
  41:Core/Src/FusionCompass.c ****             return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 546              		.loc 1 41 40 is_stmt 0 view .LVU123
 547 01d8 F0EE691A 		vmov.f32	s3, s19
 548 01dc B0EE492A 		vmov.f32	s4, s18
 549 01e0 F0EE682A 		vmov.f32	s5, s17
 550 01e4 FFF7FEFF 		bl	FusionVectorCrossProduct
 551              	.LVL24:
 552 01e8 8DED1F0A 		vstr.32	s0, [sp, #124]
 553 01ec CDED200A 		vstr.32	s1, [sp, #128]
 554 01f0 8DED211A 		vstr.32	s2, [sp, #132]
  41:Core/Src/FusionCompass.c ****             return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 555              		.loc 1 41 40 discriminator 1 view .LVU124
 556 01f4 FFF7FEFF 		bl	FusionVectorNormalise
 557              	.LVL25:
 558 01f8 8DED0D0A 		vstr.32	s0, [sp, #52]
 559 01fc CDED0E0A 		vstr.32	s1, [sp, #56]
 560 0200 8DED0F1A 		vstr.32	s2, [sp, #60]
  42:Core/Src/FusionCompass.c ****         }
 561              		.loc 1 42 13 is_stmt 1 view .LVU125
  42:Core/Src/FusionCompass.c ****         }
 562              		.loc 1 42 20 is_stmt 0 view .LVU126
 563 0204 F0EE400A 		vmov.f32	s1, s0
 564 0208 B0EE480A 		vmov.f32	s0, s16
 565 020c FFF7FEFF 		bl	atan2f
 566              	.LVL26:
 567              	.LBB42:
 568              	.LBI42:
 136:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 569              		.loc 2 136 21 is_stmt 1 view .LVU127
 570              	.LBB43:
 137:Core/Inc/FusionMath.h **** }
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 19


 571              		.loc 2 137 5 view .LVU128
 137:Core/Inc/FusionMath.h **** }
 572              		.loc 2 137 20 is_stmt 0 view .LVU129
 573 0210 DFED037A 		vldr.32	s15, .L15
 574 0214 20EE270A 		vmul.f32	s0, s0, s15
 575              	.LVL27:
 137:Core/Inc/FusionMath.h **** }
 576              		.loc 2 137 20 view .LVU130
 577 0218 42E7     		b	.L9
 578              	.LVL28:
 579              	.L13:
 137:Core/Inc/FusionMath.h **** }
 580              		.loc 2 137 20 view .LVU131
 581              	.LBE43:
 582              	.LBE42:
 583              	.LBE39:
  26:Core/Src/FusionCompass.c ****         case FusionConventionNwu: {
 584              		.loc 1 26 5 view .LVU132
 585 021a 9FED020A 		vldr.32	s0, .L15+4
 586 021e 3FE7     		b	.L9
 587              	.L16:
 588              		.align	2
 589              	.L15:
 590 0220 E02E6542 		.word	1113927392
 591 0224 00000000 		.word	0
 592              		.cfi_endproc
 593              	.LFE23:
 595              		.text
 596              	.Letext0:
 597              		.file 3 "/Applications/ArmGNUToolchain/13.3.rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 598              		.file 4 "/Applications/ArmGNUToolchain/13.3.rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 599              		.file 5 "Core/Inc/FusionConvention.h"
 600              		.file 6 "/Applications/ArmGNUToolchain/13.3.rel1/arm-none-eabi/arm-none-eabi/include/math.h"
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s 			page 20


DEFINED SYMBOLS
                            *ABS*:00000000 FusionCompass.c
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s:21     .text.FusionVectorCrossProduct:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s:26     .text.FusionVectorCrossProduct:00000000 FusionVectorCrossProduct
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s:87     .text.FusionVectorMagnitudeSquared:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s:92     .text.FusionVectorMagnitudeSquared:00000000 FusionVectorMagnitudeSquared
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s:153    .text.FusionVectorNormalise:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s:158    .text.FusionVectorNormalise:00000000 FusionVectorNormalise
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s:265    .text.FusionVectorNormalise:00000090 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s:272    .text.FusionCompassCalculateHeading:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s:278    .text.FusionCompassCalculateHeading:00000000 FusionCompassCalculateHeading
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccaB1xeW.s:590    .text.FusionCompassCalculateHeading:00000220 $d

UNDEFINED SYMBOLS
atan2f
