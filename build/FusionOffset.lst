ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"FusionOffset.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/FusionOffset.c"
  20              		.section	.text.FusionOffsetInitialise,"ax",%progbits
  21              		.align	1
  22              		.global	FusionOffsetInitialise
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	FusionOffsetInitialise:
  28              	.LVL0:
  29              	.LFB22:
   1:Core/Src/FusionOffset.c **** /**
   2:Core/Src/FusionOffset.c ****  * @file FusionOffset.c
   3:Core/Src/FusionOffset.c ****  * @author Seb Madgwick
   4:Core/Src/FusionOffset.c ****  * @brief Gyroscope offset correction algorithm for run-time calibration of the
   5:Core/Src/FusionOffset.c ****  * gyroscope offset.
   6:Core/Src/FusionOffset.c ****  */
   7:Core/Src/FusionOffset.c **** 
   8:Core/Src/FusionOffset.c **** //------------------------------------------------------------------------------
   9:Core/Src/FusionOffset.c **** // Includes
  10:Core/Src/FusionOffset.c **** 
  11:Core/Src/FusionOffset.c **** #include "FusionOffset.h"
  12:Core/Src/FusionOffset.c **** #include <math.h> // fabs
  13:Core/Src/FusionOffset.c **** 
  14:Core/Src/FusionOffset.c **** //------------------------------------------------------------------------------
  15:Core/Src/FusionOffset.c **** // Definitions
  16:Core/Src/FusionOffset.c **** 
  17:Core/Src/FusionOffset.c **** /**
  18:Core/Src/FusionOffset.c ****  * @brief Cutoff frequency in Hz.
  19:Core/Src/FusionOffset.c ****  */
  20:Core/Src/FusionOffset.c **** #define CUTOFF_FREQUENCY (0.02f)
  21:Core/Src/FusionOffset.c **** 
  22:Core/Src/FusionOffset.c **** /**
  23:Core/Src/FusionOffset.c ****  * @brief Timeout in seconds.
  24:Core/Src/FusionOffset.c ****  */
  25:Core/Src/FusionOffset.c **** #define TIMEOUT (5)
  26:Core/Src/FusionOffset.c **** 
  27:Core/Src/FusionOffset.c **** /**
  28:Core/Src/FusionOffset.c ****  * @brief Threshold in degrees per second.
  29:Core/Src/FusionOffset.c ****  */
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s 			page 2


  30:Core/Src/FusionOffset.c **** #define THRESHOLD (3.0f)
  31:Core/Src/FusionOffset.c **** 
  32:Core/Src/FusionOffset.c **** //------------------------------------------------------------------------------
  33:Core/Src/FusionOffset.c **** // Functions
  34:Core/Src/FusionOffset.c **** 
  35:Core/Src/FusionOffset.c **** /**
  36:Core/Src/FusionOffset.c ****  * @brief Initialises the gyroscope offset algorithm.
  37:Core/Src/FusionOffset.c ****  * @param offset Gyroscope offset algorithm structure.
  38:Core/Src/FusionOffset.c ****  * @param sampleRate Sample rate in Hz.
  39:Core/Src/FusionOffset.c ****  */
  40:Core/Src/FusionOffset.c **** void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
  30              		.loc 1 40 88 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  41:Core/Src/FusionOffset.c ****     offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate
  35              		.loc 1 41 5 view .LVU1
  36              		.loc 1 41 82 is_stmt 0 view .LVU2
  37 0000 07EE901A 		vmov	s15, r1	@ int
  38 0004 B8EE677A 		vcvt.f32.u32	s14, s15
  39              		.loc 1 41 80 view .LVU3
  40 0008 F7EE006A 		vmov.f32	s13, #1.0e+0
  41 000c C6EE877A 		vdiv.f32	s15, s13, s14
  42              		.loc 1 41 72 view .LVU4
  43 0010 9FED077A 		vldr.32	s14, .L2
  44 0014 67EE877A 		vmul.f32	s15, s15, s14
  45              		.loc 1 41 31 view .LVU5
  46 0018 C0ED007A 		vstr.32	s15, [r0]
  42:Core/Src/FusionOffset.c ****     offset->timeout = TIMEOUT * sampleRate;
  47              		.loc 1 42 5 is_stmt 1 view .LVU6
  48              		.loc 1 42 31 is_stmt 0 view .LVU7
  49 001c 01EB8101 		add	r1, r1, r1, lsl #2
  50              	.LVL1:
  51              		.loc 1 42 21 view .LVU8
  52 0020 4160     		str	r1, [r0, #4]
  43:Core/Src/FusionOffset.c ****     offset->timer = 0;
  53              		.loc 1 43 5 is_stmt 1 view .LVU9
  54              		.loc 1 43 19 is_stmt 0 view .LVU10
  55 0022 0023     		movs	r3, #0
  56 0024 8360     		str	r3, [r0, #8]
  44:Core/Src/FusionOffset.c ****     offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
  57              		.loc 1 44 5 is_stmt 1 view .LVU11
  58              		.loc 1 44 29 is_stmt 0 view .LVU12
  59 0026 0023     		movs	r3, #0
  60 0028 C360     		str	r3, [r0, #12]	@ float
  61 002a 0361     		str	r3, [r0, #16]	@ float
  62 002c 4361     		str	r3, [r0, #20]	@ float
  45:Core/Src/FusionOffset.c **** }
  63              		.loc 1 45 1 view .LVU13
  64 002e 7047     		bx	lr
  65              	.L3:
  66              		.align	2
  67              	.L2:
  68 0030 FDAD003E 		.word	1040231933
  69              		.cfi_endproc
  70              	.LFE22:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s 			page 3


  72              		.section	.text.FusionOffsetUpdate,"ax",%progbits
  73              		.align	1
  74              		.global	FusionOffsetUpdate
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  79              	FusionOffsetUpdate:
  80              	.LVL2:
  81              	.LFB23:
  46:Core/Src/FusionOffset.c **** 
  47:Core/Src/FusionOffset.c **** /**
  48:Core/Src/FusionOffset.c ****  * @brief Updates the gyroscope offset algorithm and returns the corrected
  49:Core/Src/FusionOffset.c ****  * gyroscope measurement.
  50:Core/Src/FusionOffset.c ****  * @param offset Gyroscope offset algorithm structure.
  51:Core/Src/FusionOffset.c ****  * @param gyroscope Gyroscope measurement in degrees per second.
  52:Core/Src/FusionOffset.c ****  * @return Corrected gyroscope measurement in degrees per second.
  53:Core/Src/FusionOffset.c ****  */
  54:Core/Src/FusionOffset.c **** FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
  82              		.loc 1 54 85 is_stmt 1 view -0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 128
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              		.loc 1 54 85 is_stmt 0 view .LVU15
  87 0000 10B5     		push	{r4, lr}
  88              	.LCFI0:
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 4, -8
  91              		.cfi_offset 14, -4
  92 0002 A0B0     		sub	sp, sp, #128
  93              	.LCFI1:
  94              		.cfi_def_cfa_offset 136
  95 0004 0346     		mov	r3, r0
  96 0006 8DED050A 		vstr.32	s0, [sp, #20]
  97 000a CDED060A 		vstr.32	s1, [sp, #24]
  98 000e 8DED071A 		vstr.32	s2, [sp, #28]
  55:Core/Src/FusionOffset.c **** 
  56:Core/Src/FusionOffset.c ****     // Subtract offset from gyroscope measurement
  57:Core/Src/FusionOffset.c ****     gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
  99              		.loc 1 57 5 is_stmt 1 view .LVU16
 100 0012 0DF1200C 		add	ip, sp, #32
 101 0016 00F10C02 		add	r2, r0, #12
 102 001a 07CA     		ldm	r2, {r0, r1, r2}
 103              	.LVL3:
 104              		.loc 1 57 5 is_stmt 0 view .LVU17
 105 001c 8CE80700 		stm	ip, {r0, r1, r2}
 106              	.LBB8:
 107              	.LBI8:
 108              		.file 2 "Core/Inc/FusionMath.h"
   1:Core/Inc/FusionMath.h **** /**
   2:Core/Inc/FusionMath.h ****  * @file FusionMath.h
   3:Core/Inc/FusionMath.h ****  * @author Seb Madgwick
   4:Core/Inc/FusionMath.h ****  * @brief Math library.
   5:Core/Inc/FusionMath.h ****  */
   6:Core/Inc/FusionMath.h **** 
   7:Core/Inc/FusionMath.h **** #ifndef FUSION_MATH_H
   8:Core/Inc/FusionMath.h **** #define FUSION_MATH_H
   9:Core/Inc/FusionMath.h **** 
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s 			page 4


  10:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
  11:Core/Inc/FusionMath.h **** // Includes
  12:Core/Inc/FusionMath.h **** 
  13:Core/Inc/FusionMath.h **** #include <math.h> // M_PI, sqrtf, atan2f, asinf
  14:Core/Inc/FusionMath.h **** #include <stdbool.h>
  15:Core/Inc/FusionMath.h **** #include <stdint.h>
  16:Core/Inc/FusionMath.h **** 
  17:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
  18:Core/Inc/FusionMath.h **** // Definitions
  19:Core/Inc/FusionMath.h **** 
  20:Core/Inc/FusionMath.h **** /**
  21:Core/Inc/FusionMath.h ****  * @brief 3D vector.
  22:Core/Inc/FusionMath.h ****  */
  23:Core/Inc/FusionMath.h **** typedef union {
  24:Core/Inc/FusionMath.h ****     float array[3];
  25:Core/Inc/FusionMath.h **** 
  26:Core/Inc/FusionMath.h ****     struct {
  27:Core/Inc/FusionMath.h ****         float x;
  28:Core/Inc/FusionMath.h ****         float y;
  29:Core/Inc/FusionMath.h ****         float z;
  30:Core/Inc/FusionMath.h ****     } axis;
  31:Core/Inc/FusionMath.h **** } FusionVector;
  32:Core/Inc/FusionMath.h **** 
  33:Core/Inc/FusionMath.h **** /**
  34:Core/Inc/FusionMath.h ****  * @brief Quaternion.
  35:Core/Inc/FusionMath.h ****  */
  36:Core/Inc/FusionMath.h **** typedef union {
  37:Core/Inc/FusionMath.h ****     float array[4];
  38:Core/Inc/FusionMath.h **** 
  39:Core/Inc/FusionMath.h ****     struct {
  40:Core/Inc/FusionMath.h ****         float w;
  41:Core/Inc/FusionMath.h ****         float x;
  42:Core/Inc/FusionMath.h ****         float y;
  43:Core/Inc/FusionMath.h ****         float z;
  44:Core/Inc/FusionMath.h ****     } element;
  45:Core/Inc/FusionMath.h **** } FusionQuaternion;
  46:Core/Inc/FusionMath.h **** 
  47:Core/Inc/FusionMath.h **** /**
  48:Core/Inc/FusionMath.h ****  * @brief 3x3 matrix in row-major order.
  49:Core/Inc/FusionMath.h ****  * See http://en.wikipedia.org/wiki/Row-major_order
  50:Core/Inc/FusionMath.h ****  */
  51:Core/Inc/FusionMath.h **** typedef union {
  52:Core/Inc/FusionMath.h ****     float array[3][3];
  53:Core/Inc/FusionMath.h **** 
  54:Core/Inc/FusionMath.h ****     struct {
  55:Core/Inc/FusionMath.h ****         float xx;
  56:Core/Inc/FusionMath.h ****         float xy;
  57:Core/Inc/FusionMath.h ****         float xz;
  58:Core/Inc/FusionMath.h ****         float yx;
  59:Core/Inc/FusionMath.h ****         float yy;
  60:Core/Inc/FusionMath.h ****         float yz;
  61:Core/Inc/FusionMath.h ****         float zx;
  62:Core/Inc/FusionMath.h ****         float zy;
  63:Core/Inc/FusionMath.h ****         float zz;
  64:Core/Inc/FusionMath.h ****     } element;
  65:Core/Inc/FusionMath.h **** } FusionMatrix;
  66:Core/Inc/FusionMath.h **** 
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s 			page 5


  67:Core/Inc/FusionMath.h **** /**
  68:Core/Inc/FusionMath.h ****  * @brief Euler angles.  Roll, pitch, and yaw correspond to rotations around
  69:Core/Inc/FusionMath.h ****  * X, Y, and Z respectively.
  70:Core/Inc/FusionMath.h ****  */
  71:Core/Inc/FusionMath.h **** typedef union {
  72:Core/Inc/FusionMath.h ****     float array[3];
  73:Core/Inc/FusionMath.h **** 
  74:Core/Inc/FusionMath.h ****     struct {
  75:Core/Inc/FusionMath.h ****         float roll;
  76:Core/Inc/FusionMath.h ****         float pitch;
  77:Core/Inc/FusionMath.h ****         float yaw;
  78:Core/Inc/FusionMath.h ****     } angle;
  79:Core/Inc/FusionMath.h **** } FusionEuler;
  80:Core/Inc/FusionMath.h **** 
  81:Core/Inc/FusionMath.h **** /**
  82:Core/Inc/FusionMath.h ****  * @brief Vector of zeros.
  83:Core/Inc/FusionMath.h ****  */
  84:Core/Inc/FusionMath.h **** #define FUSION_VECTOR_ZERO ((FusionVector){ .array = {0.0f, 0.0f, 0.0f} })
  85:Core/Inc/FusionMath.h **** 
  86:Core/Inc/FusionMath.h **** /**
  87:Core/Inc/FusionMath.h ****  * @brief Vector of ones.
  88:Core/Inc/FusionMath.h ****  */
  89:Core/Inc/FusionMath.h **** #define FUSION_VECTOR_ONES ((FusionVector){ .array = {1.0f, 1.0f, 1.0f} })
  90:Core/Inc/FusionMath.h **** 
  91:Core/Inc/FusionMath.h **** /**
  92:Core/Inc/FusionMath.h ****  * @brief Identity quaternion.
  93:Core/Inc/FusionMath.h ****  */
  94:Core/Inc/FusionMath.h **** #define FUSION_IDENTITY_QUATERNION ((FusionQuaternion){ .array = {1.0f, 0.0f, 0.0f, 0.0f} })
  95:Core/Inc/FusionMath.h **** 
  96:Core/Inc/FusionMath.h **** /**
  97:Core/Inc/FusionMath.h ****  * @brief Identity matrix.
  98:Core/Inc/FusionMath.h ****  */
  99:Core/Inc/FusionMath.h **** #define FUSION_IDENTITY_MATRIX ((FusionMatrix){ .array = {{1.0f, 0.0f, 0.0f}, {0.0f, 1.0f, 0.0f}, {
 100:Core/Inc/FusionMath.h **** 
 101:Core/Inc/FusionMath.h **** /**
 102:Core/Inc/FusionMath.h ****  * @brief Euler angles of zero.
 103:Core/Inc/FusionMath.h ****  */
 104:Core/Inc/FusionMath.h **** #define FUSION_EULER_ZERO ((FusionEuler){ .array = {0.0f, 0.0f, 0.0f} })
 105:Core/Inc/FusionMath.h **** 
 106:Core/Inc/FusionMath.h **** /**
 107:Core/Inc/FusionMath.h ****  * @brief Pi. May not be defined in math.h.
 108:Core/Inc/FusionMath.h ****  */
 109:Core/Inc/FusionMath.h **** #ifndef M_PI
 110:Core/Inc/FusionMath.h **** #define M_PI (3.14159265358979323846)
 111:Core/Inc/FusionMath.h **** #endif
 112:Core/Inc/FusionMath.h **** 
 113:Core/Inc/FusionMath.h **** /**
 114:Core/Inc/FusionMath.h ****  * @brief Include this definition or add as a preprocessor definition to use
 115:Core/Inc/FusionMath.h ****  * normal square root operations.
 116:Core/Inc/FusionMath.h ****  */
 117:Core/Inc/FusionMath.h **** //#define FUSION_USE_NORMAL_SQRT
 118:Core/Inc/FusionMath.h **** 
 119:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 120:Core/Inc/FusionMath.h **** // Inline functions - Degrees and radians conversion
 121:Core/Inc/FusionMath.h **** 
 122:Core/Inc/FusionMath.h **** /**
 123:Core/Inc/FusionMath.h ****  * @brief Converts degrees to radians.
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s 			page 6


 124:Core/Inc/FusionMath.h ****  * @param degrees Degrees.
 125:Core/Inc/FusionMath.h ****  * @return Radians.
 126:Core/Inc/FusionMath.h ****  */
 127:Core/Inc/FusionMath.h **** static inline float FusionDegreesToRadians(const float degrees) {
 128:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 129:Core/Inc/FusionMath.h **** }
 130:Core/Inc/FusionMath.h **** 
 131:Core/Inc/FusionMath.h **** /**
 132:Core/Inc/FusionMath.h ****  * @brief Converts radians to degrees.
 133:Core/Inc/FusionMath.h ****  * @param radians Radians.
 134:Core/Inc/FusionMath.h ****  * @return Degrees.
 135:Core/Inc/FusionMath.h ****  */
 136:Core/Inc/FusionMath.h **** static inline float FusionRadiansToDegrees(const float radians) {
 137:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 138:Core/Inc/FusionMath.h **** }
 139:Core/Inc/FusionMath.h **** 
 140:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 141:Core/Inc/FusionMath.h **** // Inline functions - Arc sine
 142:Core/Inc/FusionMath.h **** 
 143:Core/Inc/FusionMath.h **** /**
 144:Core/Inc/FusionMath.h ****  * @brief Returns the arc sine of the value.
 145:Core/Inc/FusionMath.h ****  * @param value Value.
 146:Core/Inc/FusionMath.h ****  * @return Arc sine of the value.
 147:Core/Inc/FusionMath.h ****  */
 148:Core/Inc/FusionMath.h **** static inline float FusionAsin(const float value) {
 149:Core/Inc/FusionMath.h ****     if (value <= -1.0f) {
 150:Core/Inc/FusionMath.h ****         return (float) M_PI / -2.0f;
 151:Core/Inc/FusionMath.h ****     }
 152:Core/Inc/FusionMath.h ****     if (value >= 1.0f) {
 153:Core/Inc/FusionMath.h ****         return (float) M_PI / 2.0f;
 154:Core/Inc/FusionMath.h ****     }
 155:Core/Inc/FusionMath.h ****     return asinf(value);
 156:Core/Inc/FusionMath.h **** }
 157:Core/Inc/FusionMath.h **** 
 158:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 159:Core/Inc/FusionMath.h **** // Inline functions - Fast inverse square root
 160:Core/Inc/FusionMath.h **** 
 161:Core/Inc/FusionMath.h **** #ifndef FUSION_USE_NORMAL_SQRT
 162:Core/Inc/FusionMath.h **** 
 163:Core/Inc/FusionMath.h **** /**
 164:Core/Inc/FusionMath.h ****  * @brief Calculates the reciprocal of the square root.
 165:Core/Inc/FusionMath.h ****  * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 166:Core/Inc/FusionMath.h ****  * @param x Operand.
 167:Core/Inc/FusionMath.h ****  * @return Reciprocal of the square root of x.
 168:Core/Inc/FusionMath.h ****  */
 169:Core/Inc/FusionMath.h **** static inline float FusionFastInverseSqrt(const float x) {
 170:Core/Inc/FusionMath.h **** 
 171:Core/Inc/FusionMath.h ****     typedef union {
 172:Core/Inc/FusionMath.h ****         float f;
 173:Core/Inc/FusionMath.h ****         int32_t i;
 174:Core/Inc/FusionMath.h ****     } Union32;
 175:Core/Inc/FusionMath.h **** 
 176:Core/Inc/FusionMath.h ****     Union32 union32 = {.f = x};
 177:Core/Inc/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 178:Core/Inc/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 179:Core/Inc/FusionMath.h **** }
 180:Core/Inc/FusionMath.h **** 
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s 			page 7


 181:Core/Inc/FusionMath.h **** #endif
 182:Core/Inc/FusionMath.h **** 
 183:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 184:Core/Inc/FusionMath.h **** // Inline functions - Vector operations
 185:Core/Inc/FusionMath.h **** 
 186:Core/Inc/FusionMath.h **** /**
 187:Core/Inc/FusionMath.h ****  * @brief Returns true if the vector is zero.
 188:Core/Inc/FusionMath.h ****  * @param vector Vector.
 189:Core/Inc/FusionMath.h ****  * @return True if the vector is zero.
 190:Core/Inc/FusionMath.h ****  */
 191:Core/Inc/FusionMath.h **** static inline bool FusionVectorIsZero(const FusionVector vector) {
 192:Core/Inc/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 193:Core/Inc/FusionMath.h **** }
 194:Core/Inc/FusionMath.h **** 
 195:Core/Inc/FusionMath.h **** /**
 196:Core/Inc/FusionMath.h ****  * @brief Returns the sum of two vectors.
 197:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 198:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 199:Core/Inc/FusionMath.h ****  * @return Sum of two vectors.
 200:Core/Inc/FusionMath.h ****  */
 201:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) 
 202:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 203:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 204:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y + vectorB.axis.y,
 205:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z + vectorB.axis.z,
 206:Core/Inc/FusionMath.h ****     }};
 207:Core/Inc/FusionMath.h ****     return result;
 208:Core/Inc/FusionMath.h **** }
 209:Core/Inc/FusionMath.h **** 
 210:Core/Inc/FusionMath.h **** /**
 211:Core/Inc/FusionMath.h ****  * @brief Returns vector B subtracted from vector A.
 212:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 213:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 214:Core/Inc/FusionMath.h ****  * @return Vector B subtracted from vector A.
 215:Core/Inc/FusionMath.h ****  */
 216:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vect
 109              		.loc 2 216 28 is_stmt 1 view .LVU18
 110              	.LBB9:
 217:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 111              		.loc 2 217 5 view .LVU19
 218:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 112              		.loc 2 218 47 is_stmt 0 view .LVU20
 113 0020 DDED087A 		vldr.32	s15, [sp, #32]
 114              		.loc 2 218 33 view .LVU21
 115 0024 30EE670A 		vsub.f32	s0, s0, s15
 217:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 116              		.loc 2 217 24 view .LVU22
 117 0028 8DED0B0A 		vstr.32	s0, [sp, #44]
 219:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y - vectorB.axis.y,
 118              		.loc 2 219 47 view .LVU23
 119 002c DDED097A 		vldr.32	s15, [sp, #36]
 120              		.loc 2 219 33 view .LVU24
 121 0030 70EEE70A 		vsub.f32	s1, s1, s15
 217:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 122              		.loc 2 217 24 view .LVU25
 123 0034 CDED0C0A 		vstr.32	s1, [sp, #48]
 220:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z - vectorB.axis.z,
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s 			page 8


 124              		.loc 2 220 47 view .LVU26
 125 0038 DDED0A7A 		vldr.32	s15, [sp, #40]
 126              		.loc 2 220 33 view .LVU27
 127 003c 31EE671A 		vsub.f32	s2, s2, s15
 217:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 128              		.loc 2 217 24 view .LVU28
 129 0040 8DED0D1A 		vstr.32	s2, [sp, #52]
 221:Core/Inc/FusionMath.h ****     }};
 222:Core/Inc/FusionMath.h ****     return result;
 130              		.loc 2 222 5 is_stmt 1 view .LVU29
 131              		.loc 2 222 12 is_stmt 0 view .LVU30
 132 0044 0DF1500C 		add	ip, sp, #80
 133 0048 0BAA     		add	r2, sp, #44
 134 004a 07CA     		ldm	r2, {r0, r1, r2}
 135 004c 8CE80700 		stm	ip, {r0, r1, r2}
 136 0050 0DF1140E 		add	lr, sp, #20
 137 0054 8EE80700 		stm	lr, {r0, r1, r2}
 138              	.LBE9:
 139              	.LBE8:
  58:Core/Src/FusionOffset.c **** 
  59:Core/Src/FusionOffset.c ****     // Reset timer if gyroscope not stationary
  60:Core/Src/FusionOffset.c ****     if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyros
 140              		.loc 1 60 5 is_stmt 1 view .LVU31
 141              		.loc 1 60 10 is_stmt 0 view .LVU32
 142 0058 B0EEC07A 		vabs.f32	s14, s0
 143              		.loc 1 60 8 view .LVU33
 144 005c F0EE087A 		vmov.f32	s15, #3.0e+0
 145 0060 B4EEE77A 		vcmpe.f32	s14, s15
 146 0064 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 147 0068 58DC     		bgt	.L5
 148              		.loc 1 60 50 discriminator 1 view .LVU34
 149 006a F0EEE07A 		vabs.f32	s15, s1
 150              		.loc 1 60 46 discriminator 1 view .LVU35
 151 006e B0EE087A 		vmov.f32	s14, #3.0e+0
 152 0072 F4EEC77A 		vcmpe.f32	s15, s14
 153 0076 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 154 007a 4FDC     		bgt	.L5
 155              		.loc 1 60 90 discriminator 2 view .LVU36
 156 007c F0EEC17A 		vabs.f32	s15, s2
 157              		.loc 1 60 86 discriminator 2 view .LVU37
 158 0080 F4EEC77A 		vcmpe.f32	s15, s14
 159 0084 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 160 0088 48DC     		bgt	.L5
  61:Core/Src/FusionOffset.c ****         offset->timer = 0;
  62:Core/Src/FusionOffset.c ****         return gyroscope;
  63:Core/Src/FusionOffset.c ****     }
  64:Core/Src/FusionOffset.c **** 
  65:Core/Src/FusionOffset.c ****     // Increment timer while gyroscope stationary
  66:Core/Src/FusionOffset.c ****     if (offset->timer < offset->timeout) {
 161              		.loc 1 66 5 is_stmt 1 view .LVU38
 162              		.loc 1 66 15 is_stmt 0 view .LVU39
 163 008a 9A68     		ldr	r2, [r3, #8]
 164              		.loc 1 66 31 view .LVU40
 165 008c 5968     		ldr	r1, [r3, #4]
 166              		.loc 1 66 8 view .LVU41
 167 008e 8A42     		cmp	r2, r1
 168 0090 53D3     		bcc	.L12
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s 			page 9


  67:Core/Src/FusionOffset.c ****         offset->timer++;
  68:Core/Src/FusionOffset.c ****         return gyroscope;
  69:Core/Src/FusionOffset.c ****     }
  70:Core/Src/FusionOffset.c **** 
  71:Core/Src/FusionOffset.c ****     // Adjust offset if timer has elapsed
  72:Core/Src/FusionOffset.c ****     offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(g
 169              		.loc 1 72 5 is_stmt 1 view .LVU42
 170              		.loc 1 72 31 is_stmt 0 view .LVU43
 171 0092 1A46     		mov	r2, r3
 172 0094 0C33     		adds	r3, r3, #12
 173              	.LVL4:
 174              		.loc 1 72 31 view .LVU44
 175 0096 D2ED007A 		vldr.32	s15, [r2]
 176              	.LVL5:
 177              	.LBB10:
 178              	.LBI10:
 223:Core/Inc/FusionMath.h **** }
 224:Core/Inc/FusionMath.h **** 
 225:Core/Inc/FusionMath.h **** /**
 226:Core/Inc/FusionMath.h ****  * @brief Returns the sum of the elements.
 227:Core/Inc/FusionMath.h ****  * @param vector Vector.
 228:Core/Inc/FusionMath.h ****  * @return Sum of the elements.
 229:Core/Inc/FusionMath.h ****  */
 230:Core/Inc/FusionMath.h **** static inline float FusionVectorSum(const FusionVector vector) {
 231:Core/Inc/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 232:Core/Inc/FusionMath.h **** }
 233:Core/Inc/FusionMath.h **** 
 234:Core/Inc/FusionMath.h **** /**
 235:Core/Inc/FusionMath.h ****  * @brief Returns the multiplication of a vector by a scalar.
 236:Core/Inc/FusionMath.h ****  * @param vector Vector.
 237:Core/Inc/FusionMath.h ****  * @param scalar Scalar.
 238:Core/Inc/FusionMath.h ****  * @return Multiplication of a vector by a scalar.
 239:Core/Inc/FusionMath.h ****  */
 240:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar
 179              		.loc 2 240 28 is_stmt 1 view .LVU45
 180              	.LBB11:
 241:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 181              		.loc 2 241 5 view .LVU46
 242:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 182              		.loc 2 242 32 is_stmt 0 view .LVU47
 183 009a 27EE800A 		vmul.f32	s0, s15, s0
 241:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 184              		.loc 2 241 24 view .LVU48
 185 009e 8DED0B0A 		vstr.32	s0, [sp, #44]
 243:Core/Inc/FusionMath.h ****             .y = vector.axis.y * scalar,
 186              		.loc 2 243 32 view .LVU49
 187 00a2 67EEA00A 		vmul.f32	s1, s15, s1
 241:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 188              		.loc 2 241 24 view .LVU50
 189 00a6 CDED0C0A 		vstr.32	s1, [sp, #48]
 244:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 190              		.loc 2 244 32 view .LVU51
 191 00aa 67EE817A 		vmul.f32	s15, s15, s2
 192              	.LVL6:
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 193              		.loc 2 241 24 view .LVU52
 194 00ae CDED0D7A 		vstr.32	s15, [sp, #52]
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s 			page 10


 245:Core/Inc/FusionMath.h ****     }};
 246:Core/Inc/FusionMath.h ****     return result;
 195              		.loc 2 246 5 is_stmt 1 view .LVU53
 196              		.loc 2 246 12 is_stmt 0 view .LVU54
 197 00b2 0DF1740E 		add	lr, sp, #116
 198 00b6 0DF12C0C 		add	ip, sp, #44
 199 00ba 9CE80700 		ldm	ip, {r0, r1, r2}
 200              	.LVL7:
 201              		.loc 2 246 12 view .LVU55
 202 00be 8EE80700 		stm	lr, {r0, r1, r2}
 203 00c2 11AC     		add	r4, sp, #68
 204 00c4 84E80700 		stm	r4, {r0, r1, r2}
 205              	.LVL8:
 206              		.loc 2 246 12 view .LVU56
 207 00c8 0DF1200E 		add	lr, sp, #32
 208 00cc 93E80700 		ldm	r3, {r0, r1, r2}
 209 00d0 8EE80700 		stm	lr, {r0, r1, r2}
 210              	.LBE11:
 211              	.LBE10:
 212              	.LBB12:
 213              	.LBI12:
 201:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 214              		.loc 2 201 28 is_stmt 1 view .LVU57
 215              	.LBB13:
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 216              		.loc 2 202 5 view .LVU58
 203:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y + vectorB.axis.y,
 217              		.loc 2 203 30 is_stmt 0 view .LVU59
 218 00d4 9DED087A 		vldr.32	s14, [sp, #32]
 203:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y + vectorB.axis.y,
 219              		.loc 2 203 33 view .LVU60
 220 00d8 37EE007A 		vadd.f32	s14, s14, s0
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 221              		.loc 2 202 24 view .LVU61
 222 00dc 8DED0B7A 		vstr.32	s14, [sp, #44]
 204:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z + vectorB.axis.z,
 223              		.loc 2 204 30 view .LVU62
 224 00e0 9DED097A 		vldr.32	s14, [sp, #36]
 204:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z + vectorB.axis.z,
 225              		.loc 2 204 33 view .LVU63
 226 00e4 37EE207A 		vadd.f32	s14, s14, s1
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 227              		.loc 2 202 24 view .LVU64
 228 00e8 8DED0C7A 		vstr.32	s14, [sp, #48]
 205:Core/Inc/FusionMath.h ****     }};
 229              		.loc 2 205 30 view .LVU65
 230 00ec 9DED0A7A 		vldr.32	s14, [sp, #40]
 205:Core/Inc/FusionMath.h ****     }};
 231              		.loc 2 205 33 view .LVU66
 232 00f0 77EE277A 		vadd.f32	s15, s14, s15
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 233              		.loc 2 202 24 view .LVU67
 234 00f4 CDED0D7A 		vstr.32	s15, [sp, #52]
 207:Core/Inc/FusionMath.h **** }
 235              		.loc 2 207 5 is_stmt 1 view .LVU68
 207:Core/Inc/FusionMath.h **** }
 236              		.loc 2 207 12 is_stmt 0 view .LVU69
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s 			page 11


 237 00f8 0DF1680E 		add	lr, sp, #104
 238 00fc 9CE80700 		ldm	ip, {r0, r1, r2}
 239 0100 8EE80700 		stm	lr, {r0, r1, r2}
 240 0104 0DF15C0C 		add	ip, sp, #92
 241 0108 8CE80700 		stm	ip, {r0, r1, r2}
 242              	.LBE13:
 243              	.LBE12:
 244              		.loc 1 72 31 discriminator 1 view .LVU70
 245 010c 83E80700 		stm	r3, {r0, r1, r2}
  73:Core/Src/FusionOffset.c ****     return gyroscope;
 246              		.loc 1 73 5 is_stmt 1 view .LVU71
 247              		.loc 1 73 12 is_stmt 0 view .LVU72
 248 0110 0EAB     		add	r3, sp, #56
 249              	.LVL9:
 250              		.loc 1 73 12 view .LVU73
 251 0112 05AA     		add	r2, sp, #20
 252 0114 07CA     		ldm	r2, {r0, r1, r2}
 253 0116 83E80700 		stm	r3, {r0, r1, r2}
 254 011a 06E0     		b	.L8
 255              	.LVL10:
 256              	.L5:
  61:Core/Src/FusionOffset.c ****         return gyroscope;
 257              		.loc 1 61 9 is_stmt 1 view .LVU74
  61:Core/Src/FusionOffset.c ****         return gyroscope;
 258              		.loc 1 61 23 is_stmt 0 view .LVU75
 259 011c 0022     		movs	r2, #0
 260 011e 9A60     		str	r2, [r3, #8]
  62:Core/Src/FusionOffset.c ****     }
 261              		.loc 1 62 9 is_stmt 1 view .LVU76
  62:Core/Src/FusionOffset.c ****     }
 262              		.loc 1 62 16 is_stmt 0 view .LVU77
 263 0120 0EAB     		add	r3, sp, #56
 264              	.LVL11:
  62:Core/Src/FusionOffset.c ****     }
 265              		.loc 1 62 16 view .LVU78
 266 0122 05AA     		add	r2, sp, #20
 267 0124 07CA     		ldm	r2, {r0, r1, r2}
 268 0126 83E80700 		stm	r3, {r0, r1, r2}
 269              	.L8:
  74:Core/Src/FusionOffset.c **** }
 270              		.loc 1 74 1 view .LVU79
 271 012a 9DED0E0A 		vldr.32	s0, [sp, #56]
 272 012e DDED0F0A 		vldr.32	s1, [sp, #60]
 273 0132 9DED101A 		vldr.32	s2, [sp, #64]
 274 0136 20B0     		add	sp, sp, #128
 275              	.LCFI2:
 276              		.cfi_remember_state
 277              		.cfi_def_cfa_offset 8
 278              		@ sp needed
 279 0138 10BD     		pop	{r4, pc}
 280              	.LVL12:
 281              	.L12:
 282              	.LCFI3:
 283              		.cfi_restore_state
  67:Core/Src/FusionOffset.c ****         return gyroscope;
 284              		.loc 1 67 9 is_stmt 1 view .LVU80
  67:Core/Src/FusionOffset.c ****         return gyroscope;
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s 			page 12


 285              		.loc 1 67 22 is_stmt 0 view .LVU81
 286 013a 0132     		adds	r2, r2, #1
 287 013c 9A60     		str	r2, [r3, #8]
  68:Core/Src/FusionOffset.c ****     }
 288              		.loc 1 68 9 is_stmt 1 view .LVU82
  68:Core/Src/FusionOffset.c ****     }
 289              		.loc 1 68 16 is_stmt 0 view .LVU83
 290 013e 0EAB     		add	r3, sp, #56
 291              	.LVL13:
  68:Core/Src/FusionOffset.c ****     }
 292              		.loc 1 68 16 view .LVU84
 293 0140 05AA     		add	r2, sp, #20
 294 0142 07CA     		ldm	r2, {r0, r1, r2}
 295 0144 83E80700 		stm	r3, {r0, r1, r2}
 296 0148 EFE7     		b	.L8
 297              		.cfi_endproc
 298              	.LFE23:
 300              		.text
 301              	.Letext0:
 302              		.file 3 "Core/Inc/FusionOffset.h"
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s 			page 13


DEFINED SYMBOLS
                            *ABS*:00000000 FusionOffset.c
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s:21     .text.FusionOffsetInitialise:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s:27     .text.FusionOffsetInitialise:00000000 FusionOffsetInitialise
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s:68     .text.FusionOffsetInitialise:00000030 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s:73     .text.FusionOffsetUpdate:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccgYLudh.s:79     .text.FusionOffsetUpdate:00000000 FusionOffsetUpdate

NO UNDEFINED SYMBOLS
