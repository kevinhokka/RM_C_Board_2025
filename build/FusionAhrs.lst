ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"FusionAhrs.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/FusionAhrs.c"
  20              		.section	.text.FusionVectorCrossProduct,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	FusionVectorCrossProduct:
  27              	.LFB10:
  28              		.file 2 "Core/Inc/FusionMath.h"
   1:Core/Inc/FusionMath.h **** /**
   2:Core/Inc/FusionMath.h ****  * @file FusionMath.h
   3:Core/Inc/FusionMath.h ****  * @author Seb Madgwick
   4:Core/Inc/FusionMath.h ****  * @brief Math library.
   5:Core/Inc/FusionMath.h ****  */
   6:Core/Inc/FusionMath.h **** 
   7:Core/Inc/FusionMath.h **** #ifndef FUSION_MATH_H
   8:Core/Inc/FusionMath.h **** #define FUSION_MATH_H
   9:Core/Inc/FusionMath.h **** 
  10:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
  11:Core/Inc/FusionMath.h **** // Includes
  12:Core/Inc/FusionMath.h **** 
  13:Core/Inc/FusionMath.h **** #include <math.h> // M_PI, sqrtf, atan2f, asinf
  14:Core/Inc/FusionMath.h **** #include <stdbool.h>
  15:Core/Inc/FusionMath.h **** #include <stdint.h>
  16:Core/Inc/FusionMath.h **** 
  17:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
  18:Core/Inc/FusionMath.h **** // Definitions
  19:Core/Inc/FusionMath.h **** 
  20:Core/Inc/FusionMath.h **** /**
  21:Core/Inc/FusionMath.h ****  * @brief 3D vector.
  22:Core/Inc/FusionMath.h ****  */
  23:Core/Inc/FusionMath.h **** typedef union {
  24:Core/Inc/FusionMath.h ****     float array[3];
  25:Core/Inc/FusionMath.h **** 
  26:Core/Inc/FusionMath.h ****     struct {
  27:Core/Inc/FusionMath.h ****         float x;
  28:Core/Inc/FusionMath.h ****         float y;
  29:Core/Inc/FusionMath.h ****         float z;
  30:Core/Inc/FusionMath.h ****     } axis;
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 2


  31:Core/Inc/FusionMath.h **** } FusionVector;
  32:Core/Inc/FusionMath.h **** 
  33:Core/Inc/FusionMath.h **** /**
  34:Core/Inc/FusionMath.h ****  * @brief Quaternion.
  35:Core/Inc/FusionMath.h ****  */
  36:Core/Inc/FusionMath.h **** typedef union {
  37:Core/Inc/FusionMath.h ****     float array[4];
  38:Core/Inc/FusionMath.h **** 
  39:Core/Inc/FusionMath.h ****     struct {
  40:Core/Inc/FusionMath.h ****         float w;
  41:Core/Inc/FusionMath.h ****         float x;
  42:Core/Inc/FusionMath.h ****         float y;
  43:Core/Inc/FusionMath.h ****         float z;
  44:Core/Inc/FusionMath.h ****     } element;
  45:Core/Inc/FusionMath.h **** } FusionQuaternion;
  46:Core/Inc/FusionMath.h **** 
  47:Core/Inc/FusionMath.h **** /**
  48:Core/Inc/FusionMath.h ****  * @brief 3x3 matrix in row-major order.
  49:Core/Inc/FusionMath.h ****  * See http://en.wikipedia.org/wiki/Row-major_order
  50:Core/Inc/FusionMath.h ****  */
  51:Core/Inc/FusionMath.h **** typedef union {
  52:Core/Inc/FusionMath.h ****     float array[3][3];
  53:Core/Inc/FusionMath.h **** 
  54:Core/Inc/FusionMath.h ****     struct {
  55:Core/Inc/FusionMath.h ****         float xx;
  56:Core/Inc/FusionMath.h ****         float xy;
  57:Core/Inc/FusionMath.h ****         float xz;
  58:Core/Inc/FusionMath.h ****         float yx;
  59:Core/Inc/FusionMath.h ****         float yy;
  60:Core/Inc/FusionMath.h ****         float yz;
  61:Core/Inc/FusionMath.h ****         float zx;
  62:Core/Inc/FusionMath.h ****         float zy;
  63:Core/Inc/FusionMath.h ****         float zz;
  64:Core/Inc/FusionMath.h ****     } element;
  65:Core/Inc/FusionMath.h **** } FusionMatrix;
  66:Core/Inc/FusionMath.h **** 
  67:Core/Inc/FusionMath.h **** /**
  68:Core/Inc/FusionMath.h ****  * @brief Euler angles.  Roll, pitch, and yaw correspond to rotations around
  69:Core/Inc/FusionMath.h ****  * X, Y, and Z respectively.
  70:Core/Inc/FusionMath.h ****  */
  71:Core/Inc/FusionMath.h **** typedef union {
  72:Core/Inc/FusionMath.h ****     float array[3];
  73:Core/Inc/FusionMath.h **** 
  74:Core/Inc/FusionMath.h ****     struct {
  75:Core/Inc/FusionMath.h ****         float roll;
  76:Core/Inc/FusionMath.h ****         float pitch;
  77:Core/Inc/FusionMath.h ****         float yaw;
  78:Core/Inc/FusionMath.h ****     } angle;
  79:Core/Inc/FusionMath.h **** } FusionEuler;
  80:Core/Inc/FusionMath.h **** 
  81:Core/Inc/FusionMath.h **** /**
  82:Core/Inc/FusionMath.h ****  * @brief Vector of zeros.
  83:Core/Inc/FusionMath.h ****  */
  84:Core/Inc/FusionMath.h **** #define FUSION_VECTOR_ZERO ((FusionVector){ .array = {0.0f, 0.0f, 0.0f} })
  85:Core/Inc/FusionMath.h **** 
  86:Core/Inc/FusionMath.h **** /**
  87:Core/Inc/FusionMath.h ****  * @brief Vector of ones.
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 3


  88:Core/Inc/FusionMath.h ****  */
  89:Core/Inc/FusionMath.h **** #define FUSION_VECTOR_ONES ((FusionVector){ .array = {1.0f, 1.0f, 1.0f} })
  90:Core/Inc/FusionMath.h **** 
  91:Core/Inc/FusionMath.h **** /**
  92:Core/Inc/FusionMath.h ****  * @brief Identity quaternion.
  93:Core/Inc/FusionMath.h ****  */
  94:Core/Inc/FusionMath.h **** #define FUSION_IDENTITY_QUATERNION ((FusionQuaternion){ .array = {1.0f, 0.0f, 0.0f, 0.0f} })
  95:Core/Inc/FusionMath.h **** 
  96:Core/Inc/FusionMath.h **** /**
  97:Core/Inc/FusionMath.h ****  * @brief Identity matrix.
  98:Core/Inc/FusionMath.h ****  */
  99:Core/Inc/FusionMath.h **** #define FUSION_IDENTITY_MATRIX ((FusionMatrix){ .array = {{1.0f, 0.0f, 0.0f}, {0.0f, 1.0f, 0.0f}, {
 100:Core/Inc/FusionMath.h **** 
 101:Core/Inc/FusionMath.h **** /**
 102:Core/Inc/FusionMath.h ****  * @brief Euler angles of zero.
 103:Core/Inc/FusionMath.h ****  */
 104:Core/Inc/FusionMath.h **** #define FUSION_EULER_ZERO ((FusionEuler){ .array = {0.0f, 0.0f, 0.0f} })
 105:Core/Inc/FusionMath.h **** 
 106:Core/Inc/FusionMath.h **** /**
 107:Core/Inc/FusionMath.h ****  * @brief Pi. May not be defined in math.h.
 108:Core/Inc/FusionMath.h ****  */
 109:Core/Inc/FusionMath.h **** #ifndef M_PI
 110:Core/Inc/FusionMath.h **** #define M_PI (3.14159265358979323846)
 111:Core/Inc/FusionMath.h **** #endif
 112:Core/Inc/FusionMath.h **** 
 113:Core/Inc/FusionMath.h **** /**
 114:Core/Inc/FusionMath.h ****  * @brief Include this definition or add as a preprocessor definition to use
 115:Core/Inc/FusionMath.h ****  * normal square root operations.
 116:Core/Inc/FusionMath.h ****  */
 117:Core/Inc/FusionMath.h **** //#define FUSION_USE_NORMAL_SQRT
 118:Core/Inc/FusionMath.h **** 
 119:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 120:Core/Inc/FusionMath.h **** // Inline functions - Degrees and radians conversion
 121:Core/Inc/FusionMath.h **** 
 122:Core/Inc/FusionMath.h **** /**
 123:Core/Inc/FusionMath.h ****  * @brief Converts degrees to radians.
 124:Core/Inc/FusionMath.h ****  * @param degrees Degrees.
 125:Core/Inc/FusionMath.h ****  * @return Radians.
 126:Core/Inc/FusionMath.h ****  */
 127:Core/Inc/FusionMath.h **** static inline float FusionDegreesToRadians(const float degrees) {
 128:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 129:Core/Inc/FusionMath.h **** }
 130:Core/Inc/FusionMath.h **** 
 131:Core/Inc/FusionMath.h **** /**
 132:Core/Inc/FusionMath.h ****  * @brief Converts radians to degrees.
 133:Core/Inc/FusionMath.h ****  * @param radians Radians.
 134:Core/Inc/FusionMath.h ****  * @return Degrees.
 135:Core/Inc/FusionMath.h ****  */
 136:Core/Inc/FusionMath.h **** static inline float FusionRadiansToDegrees(const float radians) {
 137:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 138:Core/Inc/FusionMath.h **** }
 139:Core/Inc/FusionMath.h **** 
 140:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 141:Core/Inc/FusionMath.h **** // Inline functions - Arc sine
 142:Core/Inc/FusionMath.h **** 
 143:Core/Inc/FusionMath.h **** /**
 144:Core/Inc/FusionMath.h ****  * @brief Returns the arc sine of the value.
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 4


 145:Core/Inc/FusionMath.h ****  * @param value Value.
 146:Core/Inc/FusionMath.h ****  * @return Arc sine of the value.
 147:Core/Inc/FusionMath.h ****  */
 148:Core/Inc/FusionMath.h **** static inline float FusionAsin(const float value) {
 149:Core/Inc/FusionMath.h ****     if (value <= -1.0f) {
 150:Core/Inc/FusionMath.h ****         return (float) M_PI / -2.0f;
 151:Core/Inc/FusionMath.h ****     }
 152:Core/Inc/FusionMath.h ****     if (value >= 1.0f) {
 153:Core/Inc/FusionMath.h ****         return (float) M_PI / 2.0f;
 154:Core/Inc/FusionMath.h ****     }
 155:Core/Inc/FusionMath.h ****     return asinf(value);
 156:Core/Inc/FusionMath.h **** }
 157:Core/Inc/FusionMath.h **** 
 158:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 159:Core/Inc/FusionMath.h **** // Inline functions - Fast inverse square root
 160:Core/Inc/FusionMath.h **** 
 161:Core/Inc/FusionMath.h **** #ifndef FUSION_USE_NORMAL_SQRT
 162:Core/Inc/FusionMath.h **** 
 163:Core/Inc/FusionMath.h **** /**
 164:Core/Inc/FusionMath.h ****  * @brief Calculates the reciprocal of the square root.
 165:Core/Inc/FusionMath.h ****  * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 166:Core/Inc/FusionMath.h ****  * @param x Operand.
 167:Core/Inc/FusionMath.h ****  * @return Reciprocal of the square root of x.
 168:Core/Inc/FusionMath.h ****  */
 169:Core/Inc/FusionMath.h **** static inline float FusionFastInverseSqrt(const float x) {
 170:Core/Inc/FusionMath.h **** 
 171:Core/Inc/FusionMath.h ****     typedef union {
 172:Core/Inc/FusionMath.h ****         float f;
 173:Core/Inc/FusionMath.h ****         int32_t i;
 174:Core/Inc/FusionMath.h ****     } Union32;
 175:Core/Inc/FusionMath.h **** 
 176:Core/Inc/FusionMath.h ****     Union32 union32 = {.f = x};
 177:Core/Inc/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 178:Core/Inc/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 179:Core/Inc/FusionMath.h **** }
 180:Core/Inc/FusionMath.h **** 
 181:Core/Inc/FusionMath.h **** #endif
 182:Core/Inc/FusionMath.h **** 
 183:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 184:Core/Inc/FusionMath.h **** // Inline functions - Vector operations
 185:Core/Inc/FusionMath.h **** 
 186:Core/Inc/FusionMath.h **** /**
 187:Core/Inc/FusionMath.h ****  * @brief Returns true if the vector is zero.
 188:Core/Inc/FusionMath.h ****  * @param vector Vector.
 189:Core/Inc/FusionMath.h ****  * @return True if the vector is zero.
 190:Core/Inc/FusionMath.h ****  */
 191:Core/Inc/FusionMath.h **** static inline bool FusionVectorIsZero(const FusionVector vector) {
 192:Core/Inc/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 193:Core/Inc/FusionMath.h **** }
 194:Core/Inc/FusionMath.h **** 
 195:Core/Inc/FusionMath.h **** /**
 196:Core/Inc/FusionMath.h ****  * @brief Returns the sum of two vectors.
 197:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 198:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 199:Core/Inc/FusionMath.h ****  * @return Sum of two vectors.
 200:Core/Inc/FusionMath.h ****  */
 201:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) 
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 5


 202:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 203:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 204:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y + vectorB.axis.y,
 205:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z + vectorB.axis.z,
 206:Core/Inc/FusionMath.h ****     }};
 207:Core/Inc/FusionMath.h ****     return result;
 208:Core/Inc/FusionMath.h **** }
 209:Core/Inc/FusionMath.h **** 
 210:Core/Inc/FusionMath.h **** /**
 211:Core/Inc/FusionMath.h ****  * @brief Returns vector B subtracted from vector A.
 212:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 213:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 214:Core/Inc/FusionMath.h ****  * @return Vector B subtracted from vector A.
 215:Core/Inc/FusionMath.h ****  */
 216:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vect
 217:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 218:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 219:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y - vectorB.axis.y,
 220:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z - vectorB.axis.z,
 221:Core/Inc/FusionMath.h ****     }};
 222:Core/Inc/FusionMath.h ****     return result;
 223:Core/Inc/FusionMath.h **** }
 224:Core/Inc/FusionMath.h **** 
 225:Core/Inc/FusionMath.h **** /**
 226:Core/Inc/FusionMath.h ****  * @brief Returns the sum of the elements.
 227:Core/Inc/FusionMath.h ****  * @param vector Vector.
 228:Core/Inc/FusionMath.h ****  * @return Sum of the elements.
 229:Core/Inc/FusionMath.h ****  */
 230:Core/Inc/FusionMath.h **** static inline float FusionVectorSum(const FusionVector vector) {
 231:Core/Inc/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 232:Core/Inc/FusionMath.h **** }
 233:Core/Inc/FusionMath.h **** 
 234:Core/Inc/FusionMath.h **** /**
 235:Core/Inc/FusionMath.h ****  * @brief Returns the multiplication of a vector by a scalar.
 236:Core/Inc/FusionMath.h ****  * @param vector Vector.
 237:Core/Inc/FusionMath.h ****  * @param scalar Scalar.
 238:Core/Inc/FusionMath.h ****  * @return Multiplication of a vector by a scalar.
 239:Core/Inc/FusionMath.h ****  */
 240:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar
 241:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 242:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 243:Core/Inc/FusionMath.h ****             .y = vector.axis.y * scalar,
 244:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 245:Core/Inc/FusionMath.h ****     }};
 246:Core/Inc/FusionMath.h ****     return result;
 247:Core/Inc/FusionMath.h **** }
 248:Core/Inc/FusionMath.h **** 
 249:Core/Inc/FusionMath.h **** /**
 250:Core/Inc/FusionMath.h ****  * @brief Calculates the Hadamard product (element-wise multiplication).
 251:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 252:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 253:Core/Inc/FusionMath.h ****  * @return Hadamard product.
 254:Core/Inc/FusionMath.h ****  */
 255:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVect
 256:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 257:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 258:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y * vectorB.axis.y,
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 6


 259:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z * vectorB.axis.z,
 260:Core/Inc/FusionMath.h ****     }};
 261:Core/Inc/FusionMath.h ****     return result;
 262:Core/Inc/FusionMath.h **** }
 263:Core/Inc/FusionMath.h **** 
 264:Core/Inc/FusionMath.h **** /**
 265:Core/Inc/FusionMath.h ****  * @brief Returns the cross product.
 266:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 267:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 268:Core/Inc/FusionMath.h ****  * @return Cross product.
 269:Core/Inc/FusionMath.h ****  */
 270:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector 
  29              		.loc 2 270 109 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 64
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 90B0     		sub	sp, sp, #64
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 64
  37 0002 8DED070A 		vstr.32	s0, [sp, #28]
  38 0006 CDED080A 		vstr.32	s1, [sp, #32]
  39 000a 8DED091A 		vstr.32	s2, [sp, #36]
  40 000e CDED041A 		vstr.32	s3, [sp, #16]
  41 0012 8DED052A 		vstr.32	s4, [sp, #20]
  42 0016 CDED062A 		vstr.32	s5, [sp, #24]
 271:Core/Inc/FusionMath.h **** #define A vectorA.axis
 272:Core/Inc/FusionMath.h **** #define B vectorB.axis
 273:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
  43              		.loc 2 273 5 view .LVU1
 274:Core/Inc/FusionMath.h ****             .x = A.y * B.z - A.z * B.y,
  44              		.loc 2 274 22 is_stmt 0 view .LVU2
  45 001a 60EEA27A 		vmul.f32	s15, s1, s5
  46              		.loc 2 274 34 view .LVU3
  47 001e 21EE027A 		vmul.f32	s14, s2, s4
  48              		.loc 2 274 28 view .LVU4
  49 0022 77EEC77A 		vsub.f32	s15, s15, s14
 273:Core/Inc/FusionMath.h ****             .x = A.y * B.z - A.z * B.y,
  50              		.loc 2 273 24 view .LVU5
  51 0026 CDED0A7A 		vstr.32	s15, [sp, #40]
 275:Core/Inc/FusionMath.h ****             .y = A.z * B.x - A.x * B.z,
  52              		.loc 2 275 22 view .LVU6
  53 002a 21EE211A 		vmul.f32	s2, s2, s3
  54              		.loc 2 275 34 view .LVU7
  55 002e 62EE802A 		vmul.f32	s5, s5, s0
  56              		.loc 2 275 28 view .LVU8
  57 0032 31EE621A 		vsub.f32	s2, s2, s5
 273:Core/Inc/FusionMath.h ****             .x = A.y * B.z - A.z * B.y,
  58              		.loc 2 273 24 view .LVU9
  59 0036 8DED0B1A 		vstr.32	s2, [sp, #44]
 276:Core/Inc/FusionMath.h ****             .z = A.x * B.y - A.y * B.x,
  60              		.loc 2 276 22 view .LVU10
  61 003a 22EE002A 		vmul.f32	s4, s4, s0
  62              		.loc 2 276 34 view .LVU11
  63 003e 60EEA10A 		vmul.f32	s1, s1, s3
  64              		.loc 2 276 28 view .LVU12
  65 0042 32EE602A 		vsub.f32	s4, s4, s1
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 7


 273:Core/Inc/FusionMath.h ****             .x = A.y * B.z - A.z * B.y,
  66              		.loc 2 273 24 view .LVU13
  67 0046 8DED0C2A 		vstr.32	s4, [sp, #48]
 277:Core/Inc/FusionMath.h ****     }};
 278:Core/Inc/FusionMath.h ****     return result;
  68              		.loc 2 278 5 is_stmt 1 view .LVU14
  69              		.loc 2 278 12 is_stmt 0 view .LVU15
  70 004a 0AAB     		add	r3, sp, #40
  71 004c 93E80700 		ldm	r3, {r0, r1, r2}
  72 0050 10AB     		add	r3, sp, #64
  73 0052 03E90700 		stmdb	r3, {r0, r1, r2}
 279:Core/Inc/FusionMath.h **** #undef A
 280:Core/Inc/FusionMath.h **** #undef B
 281:Core/Inc/FusionMath.h **** }
  74              		.loc 2 281 1 view .LVU16
  75 0056 9DED0D0A 		vldr.32	s0, [sp, #52]
  76 005a DDED0E0A 		vldr.32	s1, [sp, #56]
  77 005e 9DED0F1A 		vldr.32	s2, [sp, #60]
  78 0062 10B0     		add	sp, sp, #64
  79              	.LCFI1:
  80              		.cfi_def_cfa_offset 0
  81              		@ sp needed
  82 0064 7047     		bx	lr
  83              		.cfi_endproc
  84              	.LFE10:
  86              		.section	.text.FusionVectorDotProduct,"ax",%progbits
  87              		.align	1
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  92              	FusionVectorDotProduct:
  93              	.LFB11:
 282:Core/Inc/FusionMath.h **** 
 283:Core/Inc/FusionMath.h **** /**
 284:Core/Inc/FusionMath.h ****  * @brief Returns the dot product.
 285:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 286:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 287:Core/Inc/FusionMath.h ****  * @return Dot product.
 288:Core/Inc/FusionMath.h ****  */
 289:Core/Inc/FusionMath.h **** static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) 
  94              		.loc 2 289 100 is_stmt 1 view -0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 64
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99 0000 90B0     		sub	sp, sp, #64
 100              	.LCFI2:
 101              		.cfi_def_cfa_offset 64
 102 0002 8DED030A 		vstr.32	s0, [sp, #12]
 103 0006 CDED040A 		vstr.32	s1, [sp, #16]
 104 000a 8DED051A 		vstr.32	s2, [sp, #20]
 105 000e CDED001A 		vstr.32	s3, [sp]
 106 0012 8DED012A 		vstr.32	s4, [sp, #4]
 107 0016 CDED022A 		vstr.32	s5, [sp, #8]
 290:Core/Inc/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 108              		.loc 2 290 5 view .LVU18
 109              	.LBB56:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 8


 110              	.LBI56:
 255:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 111              		.loc 2 255 28 view .LVU19
 112              	.LBB57:
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 113              		.loc 2 256 5 view .LVU20
 257:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y * vectorB.axis.y,
 114              		.loc 2 257 33 is_stmt 0 view .LVU21
 115 001a 60EE211A 		vmul.f32	s3, s0, s3
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 116              		.loc 2 256 24 view .LVU22
 117 001e CDED071A 		vstr.32	s3, [sp, #28]
 258:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z * vectorB.axis.z,
 118              		.loc 2 258 33 view .LVU23
 119 0022 60EE820A 		vmul.f32	s1, s1, s4
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 120              		.loc 2 256 24 view .LVU24
 121 0026 CDED080A 		vstr.32	s1, [sp, #32]
 259:Core/Inc/FusionMath.h ****     }};
 122              		.loc 2 259 33 view .LVU25
 123 002a 21EE221A 		vmul.f32	s2, s2, s5
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 124              		.loc 2 256 24 view .LVU26
 125 002e 8DED091A 		vstr.32	s2, [sp, #36]
 261:Core/Inc/FusionMath.h **** }
 126              		.loc 2 261 5 is_stmt 1 view .LVU27
 261:Core/Inc/FusionMath.h **** }
 127              		.loc 2 261 12 is_stmt 0 view .LVU28
 128 0032 0DAB     		add	r3, sp, #52
 129 0034 07AA     		add	r2, sp, #28
 130 0036 07CA     		ldm	r2, {r0, r1, r2}
 131 0038 83E80700 		stm	r3, {r0, r1, r2}
 132 003c 0DF1280C 		add	ip, sp, #40
 133 0040 8CE80700 		stm	ip, {r0, r1, r2}
 134              	.LBE57:
 135              	.LBE56:
 136              	.LBB58:
 137              	.LBI58:
 230:Core/Inc/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 138              		.loc 2 230 21 is_stmt 1 view .LVU29
 139              	.LBB59:
 231:Core/Inc/FusionMath.h **** }
 140              		.loc 2 231 5 view .LVU30
 231:Core/Inc/FusionMath.h **** }
 141              		.loc 2 231 26 is_stmt 0 view .LVU31
 142 0044 31EEA00A 		vadd.f32	s0, s3, s1
 143              	.LBE59:
 144              	.LBE58:
 291:Core/Inc/FusionMath.h **** }
 145              		.loc 2 291 1 view .LVU32
 146 0048 30EE010A 		vadd.f32	s0, s0, s2
 147 004c 10B0     		add	sp, sp, #64
 148              	.LCFI3:
 149              		.cfi_def_cfa_offset 0
 150              		@ sp needed
 151 004e 7047     		bx	lr
 152              		.cfi_endproc
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 9


 153              	.LFE11:
 155              		.section	.text.FusionVectorMagnitudeSquared,"ax",%progbits
 156              		.align	1
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 161              	FusionVectorMagnitudeSquared:
 162              	.LFB12:
 292:Core/Inc/FusionMath.h **** 
 293:Core/Inc/FusionMath.h **** /**
 294:Core/Inc/FusionMath.h ****  * @brief Returns the vector magnitude squared.
 295:Core/Inc/FusionMath.h ****  * @param vector Vector.
 296:Core/Inc/FusionMath.h ****  * @return Vector magnitude squared.
 297:Core/Inc/FusionMath.h ****  */
 298:Core/Inc/FusionMath.h **** static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 163              		.loc 2 298 77 is_stmt 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 56
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 168 0000 8EB0     		sub	sp, sp, #56
 169              	.LCFI4:
 170              		.cfi_def_cfa_offset 56
 171 0002 8DED010A 		vstr.32	s0, [sp, #4]
 172 0006 CDED020A 		vstr.32	s1, [sp, #8]
 173 000a 8DED031A 		vstr.32	s2, [sp, #12]
 299:Core/Inc/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 174              		.loc 2 299 5 view .LVU34
 175              	.LBB60:
 176              	.LBI60:
 255:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 177              		.loc 2 255 28 view .LVU35
 178              	.LBB61:
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 179              		.loc 2 256 5 view .LVU36
 257:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y * vectorB.axis.y,
 180              		.loc 2 257 33 is_stmt 0 view .LVU37
 181 000e 20EE000A 		vmul.f32	s0, s0, s0
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 182              		.loc 2 256 24 view .LVU38
 183 0012 8DED050A 		vstr.32	s0, [sp, #20]
 258:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z * vectorB.axis.z,
 184              		.loc 2 258 33 view .LVU39
 185 0016 60EEA00A 		vmul.f32	s1, s1, s1
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 186              		.loc 2 256 24 view .LVU40
 187 001a CDED060A 		vstr.32	s1, [sp, #24]
 259:Core/Inc/FusionMath.h ****     }};
 188              		.loc 2 259 33 view .LVU41
 189 001e 21EE011A 		vmul.f32	s2, s2, s2
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 190              		.loc 2 256 24 view .LVU42
 191 0022 8DED071A 		vstr.32	s2, [sp, #28]
 261:Core/Inc/FusionMath.h **** }
 192              		.loc 2 261 5 is_stmt 1 view .LVU43
 261:Core/Inc/FusionMath.h **** }
 193              		.loc 2 261 12 is_stmt 0 view .LVU44
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 10


 194 0026 0BAB     		add	r3, sp, #44
 195 0028 05AA     		add	r2, sp, #20
 196 002a 07CA     		ldm	r2, {r0, r1, r2}
 197 002c 83E80700 		stm	r3, {r0, r1, r2}
 198 0030 0DF1200C 		add	ip, sp, #32
 199 0034 8CE80700 		stm	ip, {r0, r1, r2}
 200              	.LBE61:
 201              	.LBE60:
 202              	.LBB62:
 203              	.LBI62:
 230:Core/Inc/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 204              		.loc 2 230 21 is_stmt 1 view .LVU45
 205              	.LBB63:
 231:Core/Inc/FusionMath.h **** }
 206              		.loc 2 231 5 view .LVU46
 231:Core/Inc/FusionMath.h **** }
 207              		.loc 2 231 26 is_stmt 0 view .LVU47
 208 0038 30EE200A 		vadd.f32	s0, s0, s1
 209              	.LBE63:
 210              	.LBE62:
 300:Core/Inc/FusionMath.h **** }
 211              		.loc 2 300 1 view .LVU48
 212 003c 30EE010A 		vadd.f32	s0, s0, s2
 213 0040 0EB0     		add	sp, sp, #56
 214              	.LCFI5:
 215              		.cfi_def_cfa_offset 0
 216              		@ sp needed
 217 0042 7047     		bx	lr
 218              		.cfi_endproc
 219              	.LFE12:
 221              		.section	.text.FusionVectorNormalise,"ax",%progbits
 222              		.align	1
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 227              	FusionVectorNormalise:
 228              	.LFB14:
 301:Core/Inc/FusionMath.h **** 
 302:Core/Inc/FusionMath.h **** /**
 303:Core/Inc/FusionMath.h ****  * @brief Returns the vector magnitude.
 304:Core/Inc/FusionMath.h ****  * @param vector Vector.
 305:Core/Inc/FusionMath.h ****  * @return Vector magnitude.
 306:Core/Inc/FusionMath.h ****  */
 307:Core/Inc/FusionMath.h **** static inline float FusionVectorMagnitude(const FusionVector vector) {
 308:Core/Inc/FusionMath.h ****     return sqrtf(FusionVectorMagnitudeSquared(vector));
 309:Core/Inc/FusionMath.h **** }
 310:Core/Inc/FusionMath.h **** 
 311:Core/Inc/FusionMath.h **** /**
 312:Core/Inc/FusionMath.h ****  * @brief Returns the normalised vector.
 313:Core/Inc/FusionMath.h ****  * @param vector Vector.
 314:Core/Inc/FusionMath.h ****  * @return Normalised vector.
 315:Core/Inc/FusionMath.h ****  */
 316:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 229              		.loc 2 316 77 is_stmt 1 view -0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 72
 232              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 11


 233 0000 00B5     		push	{lr}
 234              	.LCFI6:
 235              		.cfi_def_cfa_offset 4
 236              		.cfi_offset 14, -4
 237 0002 2DED048B 		vpush.64	{d8, d9}
 238              	.LCFI7:
 239              		.cfi_def_cfa_offset 20
 240              		.cfi_offset 80, -20
 241              		.cfi_offset 81, -16
 242              		.cfi_offset 82, -12
 243              		.cfi_offset 83, -8
 244 0006 93B0     		sub	sp, sp, #76
 245              	.LCFI8:
 246              		.cfi_def_cfa_offset 96
 247 0008 B0EE409A 		vmov.f32	s18, s0
 248 000c F0EE608A 		vmov.f32	s17, s1
 249 0010 B0EE418A 		vmov.f32	s16, s2
 250 0014 8DED050A 		vstr.32	s0, [sp, #20]
 251 0018 CDED060A 		vstr.32	s1, [sp, #24]
 252 001c 8DED071A 		vstr.32	s2, [sp, #28]
 317:Core/Inc/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 318:Core/Inc/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
 319:Core/Inc/FusionMath.h **** #else
 320:Core/Inc/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 253              		.loc 2 320 5 view .LVU50
 254              		.loc 2 320 39 is_stmt 0 view .LVU51
 255 0020 FFF7FEFF 		bl	FusionVectorMagnitudeSquared
 256              	.LVL0:
 257              	.LBB64:
 258              	.LBI64:
 169:Core/Inc/FusionMath.h **** 
 259              		.loc 2 169 21 is_stmt 1 view .LVU52
 260              	.LBB65:
 171:Core/Inc/FusionMath.h ****         float f;
 261              		.loc 2 171 5 view .LVU53
 176:Core/Inc/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 262              		.loc 2 176 5 view .LVU54
 177:Core/Inc/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 263              		.loc 2 177 5 view .LVU55
 178:Core/Inc/FusionMath.h **** }
 264              		.loc 2 178 5 view .LVU56
 265 0024 1A4B     		ldr	r3, .L9
 266 0026 10EE102A 		vmov	r2, s0	@ int
 267 002a A3EB6203 		sub	r3, r3, r2, asr #1
 268 002e 07EE103A 		vmov	s14, r3	@ int
 178:Core/Inc/FusionMath.h **** }
 269              		.loc 2 178 52 is_stmt 0 view .LVU57
 270 0032 DFED187A 		vldr.32	s15, .L9+4
 271 0036 60EE277A 		vmul.f32	s15, s0, s15
 178:Core/Inc/FusionMath.h **** }
 272              		.loc 2 178 56 view .LVU58
 273 003a 67EE277A 		vmul.f32	s15, s14, s15
 178:Core/Inc/FusionMath.h **** }
 274              		.loc 2 178 68 view .LVU59
 275 003e 67EE277A 		vmul.f32	s15, s14, s15
 178:Core/Inc/FusionMath.h **** }
 276              		.loc 2 178 37 view .LVU60
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 12


 277 0042 DFED156A 		vldr.32	s13, .L9+8
 278 0046 76EEE77A 		vsub.f32	s15, s13, s15
 178:Core/Inc/FusionMath.h **** }
 279              		.loc 2 178 22 view .LVU61
 280 004a 67EE277A 		vmul.f32	s15, s14, s15
 281              	.LVL1:
 178:Core/Inc/FusionMath.h **** }
 282              		.loc 2 178 22 view .LVU62
 283              	.LBE65:
 284              	.LBE64:
 321:Core/Inc/FusionMath.h **** #endif
 322:Core/Inc/FusionMath.h ****     return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 285              		.loc 2 322 5 is_stmt 1 view .LVU63
 286              	.LBB66:
 287              	.LBI66:
 240:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 288              		.loc 2 240 28 view .LVU64
 289              	.LBB67:
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 290              		.loc 2 241 5 view .LVU65
 242:Core/Inc/FusionMath.h ****             .y = vector.axis.y * scalar,
 291              		.loc 2 242 32 is_stmt 0 view .LVU66
 292 004e 29EE279A 		vmul.f32	s18, s18, s15
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 293              		.loc 2 241 24 view .LVU67
 294 0052 8DED099A 		vstr.32	s18, [sp, #36]
 243:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 295              		.loc 2 243 32 view .LVU68
 296 0056 68EEA78A 		vmul.f32	s17, s17, s15
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 297              		.loc 2 241 24 view .LVU69
 298 005a CDED0A8A 		vstr.32	s17, [sp, #40]
 244:Core/Inc/FusionMath.h ****     }};
 299              		.loc 2 244 32 view .LVU70
 300 005e 28EE278A 		vmul.f32	s16, s16, s15
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 301              		.loc 2 241 24 view .LVU71
 302 0062 8DED0B8A 		vstr.32	s16, [sp, #44]
 246:Core/Inc/FusionMath.h **** }
 303              		.loc 2 246 5 is_stmt 1 view .LVU72
 246:Core/Inc/FusionMath.h **** }
 304              		.loc 2 246 12 is_stmt 0 view .LVU73
 305 0066 0FAB     		add	r3, sp, #60
 306 0068 09AA     		add	r2, sp, #36
 307 006a 07CA     		ldm	r2, {r0, r1, r2}
 308 006c 83E80700 		stm	r3, {r0, r1, r2}
 309 0070 0DF1300C 		add	ip, sp, #48
 310 0074 8CE80700 		stm	ip, {r0, r1, r2}
 311              	.LVL2:
 246:Core/Inc/FusionMath.h **** }
 312              		.loc 2 246 12 view .LVU74
 313              	.LBE67:
 314              	.LBE66:
 323:Core/Inc/FusionMath.h **** }
 315              		.loc 2 323 1 view .LVU75
 316 0078 9DED0C0A 		vldr.32	s0, [sp, #48]
 317 007c DDED0D0A 		vldr.32	s1, [sp, #52]
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 13


 318 0080 9DED0E1A 		vldr.32	s2, [sp, #56]
 319 0084 13B0     		add	sp, sp, #76
 320              	.LCFI9:
 321              		.cfi_def_cfa_offset 20
 322              		@ sp needed
 323 0086 BDEC048B 		vldm	sp!, {d8-d9}
 324              	.LCFI10:
 325              		.cfi_restore 82
 326              		.cfi_restore 83
 327              		.cfi_restore 80
 328              		.cfi_restore 81
 329              		.cfi_def_cfa_offset 4
 330 008a 5DF804FB 		ldr	pc, [sp], #4
 331              	.L10:
 332 008e 00BF     		.align	2
 333              	.L9:
 334 0090 12141F5F 		.word	1595872274
 335 0094 12D3363F 		.word	1060557586
 336 0098 FF51D83F 		.word	1071141375
 337              		.cfi_endproc
 338              	.LFE14:
 340              		.section	.text.FusionQuaternionMultiply,"ax",%progbits
 341              		.align	1
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 346              	FusionQuaternionMultiply:
 347              	.LFB16:
 324:Core/Inc/FusionMath.h **** 
 325:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 326:Core/Inc/FusionMath.h **** // Inline functions - Quaternion operations
 327:Core/Inc/FusionMath.h **** 
 328:Core/Inc/FusionMath.h **** /**
 329:Core/Inc/FusionMath.h ****  * @brief Returns the sum of two quaternions.
 330:Core/Inc/FusionMath.h ****  * @param quaternionA Quaternion A.
 331:Core/Inc/FusionMath.h ****  * @param quaternionB Quaternion B.
 332:Core/Inc/FusionMath.h ****  * @return Sum of two quaternions.
 333:Core/Inc/FusionMath.h ****  */
 334:Core/Inc/FusionMath.h **** static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const Fusion
 335:Core/Inc/FusionMath.h ****     const FusionQuaternion result = {.element = {
 336:Core/Inc/FusionMath.h ****             .w = quaternionA.element.w + quaternionB.element.w,
 337:Core/Inc/FusionMath.h ****             .x = quaternionA.element.x + quaternionB.element.x,
 338:Core/Inc/FusionMath.h ****             .y = quaternionA.element.y + quaternionB.element.y,
 339:Core/Inc/FusionMath.h ****             .z = quaternionA.element.z + quaternionB.element.z,
 340:Core/Inc/FusionMath.h ****     }};
 341:Core/Inc/FusionMath.h ****     return result;
 342:Core/Inc/FusionMath.h **** }
 343:Core/Inc/FusionMath.h **** 
 344:Core/Inc/FusionMath.h **** /**
 345:Core/Inc/FusionMath.h ****  * @brief Returns the multiplication of two quaternions.
 346:Core/Inc/FusionMath.h ****  * @param quaternionA Quaternion A (to be post-multiplied).
 347:Core/Inc/FusionMath.h ****  * @param quaternionB Quaternion B (to be pre-multiplied).
 348:Core/Inc/FusionMath.h ****  * @return Multiplication of two quaternions.
 349:Core/Inc/FusionMath.h ****  */
 350:Core/Inc/FusionMath.h **** static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const F
 348              		.loc 2 350 129 is_stmt 1 view -0
 349              		.cfi_startproc
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 14


 350              		@ args = 0, pretend = 0, frame = 80
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0000 94B0     		sub	sp, sp, #80
 354              	.LCFI11:
 355              		.cfi_def_cfa_offset 80
 356 0002 8DED080A 		vstr.32	s0, [sp, #32]
 357 0006 CDED090A 		vstr.32	s1, [sp, #36]
 358 000a 8DED0A1A 		vstr.32	s2, [sp, #40]
 359 000e CDED0B1A 		vstr.32	s3, [sp, #44]
 360 0012 8DED042A 		vstr.32	s4, [sp, #16]
 361 0016 CDED052A 		vstr.32	s5, [sp, #20]
 362 001a 8DED063A 		vstr.32	s6, [sp, #24]
 363 001e CDED073A 		vstr.32	s7, [sp, #28]
 351:Core/Inc/FusionMath.h **** #define A quaternionA.element
 352:Core/Inc/FusionMath.h **** #define B quaternionB.element
 353:Core/Inc/FusionMath.h ****     const FusionQuaternion result = {.element = {
 364              		.loc 2 353 5 view .LVU77
 354:Core/Inc/FusionMath.h ****             .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 365              		.loc 2 354 22 is_stmt 0 view .LVU78
 366 0022 60EE027A 		vmul.f32	s15, s0, s4
 367              		.loc 2 354 34 view .LVU79
 368 0026 20EEA27A 		vmul.f32	s14, s1, s5
 369              		.loc 2 354 28 view .LVU80
 370 002a 77EEC77A 		vsub.f32	s15, s15, s14
 371              		.loc 2 354 46 view .LVU81
 372 002e 21EE037A 		vmul.f32	s14, s2, s6
 373              		.loc 2 354 40 view .LVU82
 374 0032 77EEC77A 		vsub.f32	s15, s15, s14
 375              		.loc 2 354 58 view .LVU83
 376 0036 21EEA37A 		vmul.f32	s14, s3, s7
 377              		.loc 2 354 52 view .LVU84
 378 003a 77EEC77A 		vsub.f32	s15, s15, s14
 353:Core/Inc/FusionMath.h ****             .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 379              		.loc 2 353 28 view .LVU85
 380 003e CDED0C7A 		vstr.32	s15, [sp, #48]
 355:Core/Inc/FusionMath.h ****             .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 381              		.loc 2 355 22 view .LVU86
 382 0042 60EE227A 		vmul.f32	s15, s0, s5
 383              		.loc 2 355 34 view .LVU87
 384 0046 22EE207A 		vmul.f32	s14, s4, s1
 385              		.loc 2 355 28 view .LVU88
 386 004a 77EE877A 		vadd.f32	s15, s15, s14
 387              		.loc 2 355 46 view .LVU89
 388 004e 21EE237A 		vmul.f32	s14, s2, s7
 389              		.loc 2 355 40 view .LVU90
 390 0052 77EE877A 		vadd.f32	s15, s15, s14
 391              		.loc 2 355 58 view .LVU91
 392 0056 23EE217A 		vmul.f32	s14, s6, s3
 393              		.loc 2 355 52 view .LVU92
 394 005a 77EEC77A 		vsub.f32	s15, s15, s14
 353:Core/Inc/FusionMath.h ****             .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 395              		.loc 2 353 28 view .LVU93
 396 005e CDED0D7A 		vstr.32	s15, [sp, #52]
 356:Core/Inc/FusionMath.h ****             .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 397              		.loc 2 356 22 view .LVU94
 398 0062 60EE037A 		vmul.f32	s15, s0, s6
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 15


 399              		.loc 2 356 34 view .LVU95
 400 0066 20EEA37A 		vmul.f32	s14, s1, s7
 401              		.loc 2 356 28 view .LVU96
 402 006a 77EEC77A 		vsub.f32	s15, s15, s14
 403              		.loc 2 356 46 view .LVU97
 404 006e 22EE017A 		vmul.f32	s14, s4, s2
 405              		.loc 2 356 40 view .LVU98
 406 0072 77EE877A 		vadd.f32	s15, s15, s14
 407              		.loc 2 356 58 view .LVU99
 408 0076 22EEA17A 		vmul.f32	s14, s5, s3
 409              		.loc 2 356 52 view .LVU100
 410 007a 77EE877A 		vadd.f32	s15, s15, s14
 353:Core/Inc/FusionMath.h ****             .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 411              		.loc 2 353 28 view .LVU101
 412 007e CDED0E7A 		vstr.32	s15, [sp, #56]
 357:Core/Inc/FusionMath.h ****             .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 413              		.loc 2 357 22 view .LVU102
 414 0082 20EE230A 		vmul.f32	s0, s0, s7
 415              		.loc 2 357 34 view .LVU103
 416 0086 60EE830A 		vmul.f32	s1, s1, s6
 417              		.loc 2 357 28 view .LVU104
 418 008a 30EE200A 		vadd.f32	s0, s0, s1
 419              		.loc 2 357 46 view .LVU105
 420 008e 62EE812A 		vmul.f32	s5, s5, s2
 421              		.loc 2 357 40 view .LVU106
 422 0092 70EE622A 		vsub.f32	s5, s0, s5
 423              		.loc 2 357 58 view .LVU107
 424 0096 22EE212A 		vmul.f32	s4, s4, s3
 425              		.loc 2 357 52 view .LVU108
 426 009a 32EE822A 		vadd.f32	s4, s5, s4
 353:Core/Inc/FusionMath.h ****             .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 427              		.loc 2 353 28 view .LVU109
 428 009e 8DED0F2A 		vstr.32	s4, [sp, #60]
 358:Core/Inc/FusionMath.h ****     }};
 359:Core/Inc/FusionMath.h ****     return result;
 429              		.loc 2 359 5 is_stmt 1 view .LVU110
 430              		.loc 2 359 12 is_stmt 0 view .LVU111
 431 00a2 0CAB     		add	r3, sp, #48
 432 00a4 0FCB     		ldm	r3, {r0, r1, r2, r3}
 433 00a6 0DF1500C 		add	ip, sp, #80
 434 00aa 0CE90F00 		stmdb	ip, {r0, r1, r2, r3}
 360:Core/Inc/FusionMath.h **** #undef A
 361:Core/Inc/FusionMath.h **** #undef B
 362:Core/Inc/FusionMath.h **** }
 435              		.loc 2 362 1 view .LVU112
 436 00ae 9DED100A 		vldr.32	s0, [sp, #64]
 437 00b2 DDED110A 		vldr.32	s1, [sp, #68]
 438 00b6 9DED121A 		vldr.32	s2, [sp, #72]
 439 00ba DDED131A 		vldr.32	s3, [sp, #76]
 440 00be 14B0     		add	sp, sp, #80
 441              	.LCFI12:
 442              		.cfi_def_cfa_offset 0
 443              		@ sp needed
 444 00c0 7047     		bx	lr
 445              		.cfi_endproc
 446              	.LFE16:
 448              		.section	.text.FusionQuaternionMultiplyVector,"ax",%progbits
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 16


 449              		.align	1
 450              		.syntax unified
 451              		.thumb
 452              		.thumb_func
 454              	FusionQuaternionMultiplyVector:
 455              	.LFB17:
 363:Core/Inc/FusionMath.h **** 
 364:Core/Inc/FusionMath.h **** /**
 365:Core/Inc/FusionMath.h ****  * @brief Returns the multiplication of a quaternion with a vector.  This is a
 366:Core/Inc/FusionMath.h ****  * normal quaternion multiplication where the vector is treated a
 367:Core/Inc/FusionMath.h ****  * quaternion with a W element value of zero.  The quaternion is post-
 368:Core/Inc/FusionMath.h ****  * multiplied by the vector.
 369:Core/Inc/FusionMath.h ****  * @param quaternion Quaternion.
 370:Core/Inc/FusionMath.h ****  * @param vector Vector.
 371:Core/Inc/FusionMath.h ****  * @return Multiplication of a quaternion with a vector.
 372:Core/Inc/FusionMath.h ****  */
 373:Core/Inc/FusionMath.h **** static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, co
 456              		.loc 2 373 125 is_stmt 1 view -0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 80
 459              		@ frame_needed = 0, uses_anonymous_args = 0
 460              		@ link register save eliminated.
 461 0000 94B0     		sub	sp, sp, #80
 462              	.LCFI13:
 463              		.cfi_def_cfa_offset 80
 464 0002 8DED080A 		vstr.32	s0, [sp, #32]
 465 0006 CDED090A 		vstr.32	s1, [sp, #36]
 466 000a 8DED0A1A 		vstr.32	s2, [sp, #40]
 467 000e CDED0B1A 		vstr.32	s3, [sp, #44]
 468 0012 8DED052A 		vstr.32	s4, [sp, #20]
 469 0016 CDED062A 		vstr.32	s5, [sp, #24]
 470 001a 8DED073A 		vstr.32	s6, [sp, #28]
 374:Core/Inc/FusionMath.h **** #define Q quaternion.element
 375:Core/Inc/FusionMath.h **** #define V vector.axis
 376:Core/Inc/FusionMath.h ****     const FusionQuaternion result = {.element = {
 471              		.loc 2 376 5 view .LVU114
 377:Core/Inc/FusionMath.h ****             .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 472              		.loc 2 377 23 is_stmt 0 view .LVU115
 473 001e 60EEC27A 		vnmul.f32	s15, s1, s4
 474              		.loc 2 377 35 view .LVU116
 475 0022 21EE227A 		vmul.f32	s14, s2, s5
 476              		.loc 2 377 29 view .LVU117
 477 0026 77EEC77A 		vsub.f32	s15, s15, s14
 478              		.loc 2 377 47 view .LVU118
 479 002a 21EE837A 		vmul.f32	s14, s3, s6
 480              		.loc 2 377 41 view .LVU119
 481 002e 77EEC77A 		vsub.f32	s15, s15, s14
 376:Core/Inc/FusionMath.h ****             .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 482              		.loc 2 376 28 view .LVU120
 483 0032 CDED0C7A 		vstr.32	s15, [sp, #48]
 378:Core/Inc/FusionMath.h ****             .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 484              		.loc 2 378 22 view .LVU121
 485 0036 62EE007A 		vmul.f32	s15, s4, s0
 486              		.loc 2 378 34 view .LVU122
 487 003a 21EE037A 		vmul.f32	s14, s2, s6
 488              		.loc 2 378 28 view .LVU123
 489 003e 77EE877A 		vadd.f32	s15, s15, s14
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 17


 490              		.loc 2 378 46 view .LVU124
 491 0042 22EEA17A 		vmul.f32	s14, s5, s3
 492              		.loc 2 378 40 view .LVU125
 493 0046 77EEC77A 		vsub.f32	s15, s15, s14
 376:Core/Inc/FusionMath.h ****             .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 494              		.loc 2 376 28 view .LVU126
 495 004a CDED0D7A 		vstr.32	s15, [sp, #52]
 379:Core/Inc/FusionMath.h ****             .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 496              		.loc 2 379 22 view .LVU127
 497 004e 62EE807A 		vmul.f32	s15, s5, s0
 498              		.loc 2 379 34 view .LVU128
 499 0052 20EE837A 		vmul.f32	s14, s1, s6
 500              		.loc 2 379 28 view .LVU129
 501 0056 77EEC77A 		vsub.f32	s15, s15, s14
 502              		.loc 2 379 46 view .LVU130
 503 005a 62EE211A 		vmul.f32	s3, s4, s3
 504              		.loc 2 379 40 view .LVU131
 505 005e 77EEA17A 		vadd.f32	s15, s15, s3
 376:Core/Inc/FusionMath.h ****             .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 506              		.loc 2 376 28 view .LVU132
 507 0062 CDED0E7A 		vstr.32	s15, [sp, #56]
 380:Core/Inc/FusionMath.h ****             .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 508              		.loc 2 380 22 view .LVU133
 509 0066 23EE003A 		vmul.f32	s6, s6, s0
 510              		.loc 2 380 34 view .LVU134
 511 006a 60EEA20A 		vmul.f32	s1, s1, s5
 512              		.loc 2 380 28 view .LVU135
 513 006e 33EE203A 		vadd.f32	s6, s6, s1
 514              		.loc 2 380 46 view .LVU136
 515 0072 22EE012A 		vmul.f32	s4, s4, s2
 516              		.loc 2 380 40 view .LVU137
 517 0076 33EE423A 		vsub.f32	s6, s6, s4
 376:Core/Inc/FusionMath.h ****             .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 518              		.loc 2 376 28 view .LVU138
 519 007a 8DED0F3A 		vstr.32	s6, [sp, #60]
 381:Core/Inc/FusionMath.h ****     }};
 382:Core/Inc/FusionMath.h ****     return result;
 520              		.loc 2 382 5 is_stmt 1 view .LVU139
 521              		.loc 2 382 12 is_stmt 0 view .LVU140
 522 007e 0CAB     		add	r3, sp, #48
 523 0080 0FCB     		ldm	r3, {r0, r1, r2, r3}
 524 0082 0DF1500C 		add	ip, sp, #80
 525 0086 0CE90F00 		stmdb	ip, {r0, r1, r2, r3}
 383:Core/Inc/FusionMath.h **** #undef Q
 384:Core/Inc/FusionMath.h **** #undef V
 385:Core/Inc/FusionMath.h **** }
 526              		.loc 2 385 1 view .LVU141
 527 008a 9DED100A 		vldr.32	s0, [sp, #64]
 528 008e DDED110A 		vldr.32	s1, [sp, #68]
 529 0092 9DED121A 		vldr.32	s2, [sp, #72]
 530 0096 DDED131A 		vldr.32	s3, [sp, #76]
 531 009a 14B0     		add	sp, sp, #80
 532              	.LCFI14:
 533              		.cfi_def_cfa_offset 0
 534              		@ sp needed
 535 009c 7047     		bx	lr
 536              		.cfi_endproc
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 18


 537              	.LFE17:
 539              		.section	.text.FusionQuaternionNormalise,"ax",%progbits
 540              		.align	1
 541              		.syntax unified
 542              		.thumb
 543              		.thumb_func
 545              	FusionQuaternionNormalise:
 546              	.LFB18:
 386:Core/Inc/FusionMath.h **** 
 387:Core/Inc/FusionMath.h **** /**
 388:Core/Inc/FusionMath.h ****  * @brief Returns the normalised quaternion.
 389:Core/Inc/FusionMath.h ****  * @param quaternion Quaternion.
 390:Core/Inc/FusionMath.h ****  * @return Normalised quaternion.
 391:Core/Inc/FusionMath.h ****  */
 392:Core/Inc/FusionMath.h **** static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 547              		.loc 2 392 93 is_stmt 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 64
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551              		@ link register save eliminated.
 552 0000 90B0     		sub	sp, sp, #64
 553              	.LCFI15:
 554              		.cfi_def_cfa_offset 64
 555 0002 8DED040A 		vstr.32	s0, [sp, #16]
 556 0006 CDED050A 		vstr.32	s1, [sp, #20]
 557 000a 8DED061A 		vstr.32	s2, [sp, #24]
 558 000e CDED071A 		vstr.32	s3, [sp, #28]
 393:Core/Inc/FusionMath.h **** #define Q quaternion.element
 394:Core/Inc/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 395:Core/Inc/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 396:Core/Inc/FusionMath.h **** #else
 397:Core/Inc/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z
 559              		.loc 2 397 5 view .LVU143
 560              		.loc 2 397 65 is_stmt 0 view .LVU144
 561 0012 60EE007A 		vmul.f32	s15, s0, s0
 562              		.loc 2 397 77 view .LVU145
 563 0016 20EEA07A 		vmul.f32	s14, s1, s1
 564              		.loc 2 397 71 view .LVU146
 565 001a 77EE877A 		vadd.f32	s15, s15, s14
 566              		.loc 2 397 89 view .LVU147
 567 001e 21EE017A 		vmul.f32	s14, s2, s2
 568              		.loc 2 397 83 view .LVU148
 569 0022 77EE877A 		vadd.f32	s15, s15, s14
 570              		.loc 2 397 101 view .LVU149
 571 0026 21EEA17A 		vmul.f32	s14, s3, s3
 572              		.loc 2 397 39 view .LVU150
 573 002a 77EE877A 		vadd.f32	s15, s15, s14
 574              	.LVL3:
 575              	.LBB68:
 576              	.LBI68:
 169:Core/Inc/FusionMath.h **** 
 577              		.loc 2 169 21 is_stmt 1 view .LVU151
 578              	.LBB69:
 171:Core/Inc/FusionMath.h ****         float f;
 579              		.loc 2 171 5 view .LVU152
 176:Core/Inc/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 580              		.loc 2 176 5 view .LVU153
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 19


 177:Core/Inc/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 581              		.loc 2 177 5 view .LVU154
 178:Core/Inc/FusionMath.h **** }
 582              		.loc 2 178 5 view .LVU155
 583 002e 1A4B     		ldr	r3, .L17
 584 0030 17EE902A 		vmov	r2, s15	@ int
 585 0034 A3EB6203 		sub	r3, r3, r2, asr #1
 586 0038 07EE103A 		vmov	s14, r3	@ int
 178:Core/Inc/FusionMath.h **** }
 587              		.loc 2 178 52 is_stmt 0 view .LVU156
 588 003c DFED176A 		vldr.32	s13, .L17+4
 589 0040 67EEA67A 		vmul.f32	s15, s15, s13
 590              	.LVL4:
 178:Core/Inc/FusionMath.h **** }
 591              		.loc 2 178 56 view .LVU157
 592 0044 67EE277A 		vmul.f32	s15, s14, s15
 178:Core/Inc/FusionMath.h **** }
 593              		.loc 2 178 68 view .LVU158
 594 0048 67EE277A 		vmul.f32	s15, s14, s15
 178:Core/Inc/FusionMath.h **** }
 595              		.loc 2 178 37 view .LVU159
 596 004c DFED146A 		vldr.32	s13, .L17+8
 597 0050 76EEE77A 		vsub.f32	s15, s13, s15
 178:Core/Inc/FusionMath.h **** }
 598              		.loc 2 178 22 view .LVU160
 599 0054 67EE277A 		vmul.f32	s15, s14, s15
 600              	.LVL5:
 178:Core/Inc/FusionMath.h **** }
 601              		.loc 2 178 22 view .LVU161
 602              	.LBE69:
 603              	.LBE68:
 398:Core/Inc/FusionMath.h **** #endif
 399:Core/Inc/FusionMath.h ****     const FusionQuaternion result = {.element = {
 604              		.loc 2 399 5 is_stmt 1 view .LVU162
 400:Core/Inc/FusionMath.h ****             .w = Q.w * magnitudeReciprocal,
 605              		.loc 2 400 22 is_stmt 0 view .LVU163
 606 0058 20EE270A 		vmul.f32	s0, s0, s15
 399:Core/Inc/FusionMath.h ****             .w = Q.w * magnitudeReciprocal,
 607              		.loc 2 399 28 view .LVU164
 608 005c 8DED080A 		vstr.32	s0, [sp, #32]
 401:Core/Inc/FusionMath.h ****             .x = Q.x * magnitudeReciprocal,
 609              		.loc 2 401 22 view .LVU165
 610 0060 60EEA70A 		vmul.f32	s1, s1, s15
 399:Core/Inc/FusionMath.h ****             .w = Q.w * magnitudeReciprocal,
 611              		.loc 2 399 28 view .LVU166
 612 0064 CDED090A 		vstr.32	s1, [sp, #36]
 402:Core/Inc/FusionMath.h ****             .y = Q.y * magnitudeReciprocal,
 613              		.loc 2 402 22 view .LVU167
 614 0068 21EE271A 		vmul.f32	s2, s2, s15
 399:Core/Inc/FusionMath.h ****             .w = Q.w * magnitudeReciprocal,
 615              		.loc 2 399 28 view .LVU168
 616 006c 8DED0A1A 		vstr.32	s2, [sp, #40]
 403:Core/Inc/FusionMath.h ****             .z = Q.z * magnitudeReciprocal,
 617              		.loc 2 403 22 view .LVU169
 618 0070 61EEA71A 		vmul.f32	s3, s3, s15
 399:Core/Inc/FusionMath.h ****             .w = Q.w * magnitudeReciprocal,
 619              		.loc 2 399 28 view .LVU170
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 20


 620 0074 CDED0B1A 		vstr.32	s3, [sp, #44]
 404:Core/Inc/FusionMath.h ****     }};
 405:Core/Inc/FusionMath.h ****     return result;
 621              		.loc 2 405 5 is_stmt 1 view .LVU171
 622              		.loc 2 405 12 is_stmt 0 view .LVU172
 623 0078 08AB     		add	r3, sp, #32
 624 007a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 625 007c 0DF1400C 		add	ip, sp, #64
 626 0080 0CE90F00 		stmdb	ip, {r0, r1, r2, r3}
 406:Core/Inc/FusionMath.h **** #undef Q
 407:Core/Inc/FusionMath.h **** }
 627              		.loc 2 407 1 view .LVU173
 628 0084 9DED0C0A 		vldr.32	s0, [sp, #48]
 629 0088 DDED0D0A 		vldr.32	s1, [sp, #52]
 630 008c 9DED0E1A 		vldr.32	s2, [sp, #56]
 631 0090 DDED0F1A 		vldr.32	s3, [sp, #60]
 632 0094 10B0     		add	sp, sp, #64
 633              	.LCFI16:
 634              		.cfi_def_cfa_offset 0
 635              		@ sp needed
 636 0096 7047     		bx	lr
 637              	.L18:
 638              		.align	2
 639              	.L17:
 640 0098 12141F5F 		.word	1595872274
 641 009c 12D3363F 		.word	1060557586
 642 00a0 FF51D83F 		.word	1071141375
 643              		.cfi_endproc
 644              	.LFE18:
 646              		.section	.text.HalfGravity,"ax",%progbits
 647              		.align	1
 648              		.syntax unified
 649              		.thumb
 650              		.thumb_func
 652              	HalfGravity:
 653              	.LVL6:
 654              	.LFB26:
   1:Core/Src/FusionAhrs.c **** /**
   2:Core/Src/FusionAhrs.c ****  * @file FusionAhrs.c
   3:Core/Src/FusionAhrs.c ****  * @author Seb Madgwick
   4:Core/Src/FusionAhrs.c ****  * @brief AHRS algorithm to combine gyroscope, accelerometer, and magnetometer
   5:Core/Src/FusionAhrs.c ****  * measurements into a single measurement of orientation relative to the Earth.
   6:Core/Src/FusionAhrs.c ****  */
   7:Core/Src/FusionAhrs.c **** 
   8:Core/Src/FusionAhrs.c **** //------------------------------------------------------------------------------
   9:Core/Src/FusionAhrs.c **** // Includes
  10:Core/Src/FusionAhrs.c **** 
  11:Core/Src/FusionAhrs.c **** #include <float.h> // FLT_MAX
  12:Core/Src/FusionAhrs.c **** #include "FusionAhrs.h"
  13:Core/Src/FusionAhrs.c **** #include <math.h> // atan2f, cosf, powf, sinf
  14:Core/Src/FusionAhrs.c **** 
  15:Core/Src/FusionAhrs.c **** //------------------------------------------------------------------------------
  16:Core/Src/FusionAhrs.c **** // Definitions
  17:Core/Src/FusionAhrs.c **** 
  18:Core/Src/FusionAhrs.c **** /**
  19:Core/Src/FusionAhrs.c ****  * @brief Initial gain used during the initialisation.
  20:Core/Src/FusionAhrs.c ****  */
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 21


  21:Core/Src/FusionAhrs.c **** #define INITIAL_GAIN (10.0f)
  22:Core/Src/FusionAhrs.c **** 
  23:Core/Src/FusionAhrs.c **** /**
  24:Core/Src/FusionAhrs.c ****  * @brief Initialisation period in seconds.
  25:Core/Src/FusionAhrs.c ****  */
  26:Core/Src/FusionAhrs.c **** #define INITIALISATION_PERIOD (3.0f)
  27:Core/Src/FusionAhrs.c **** 
  28:Core/Src/FusionAhrs.c **** //------------------------------------------------------------------------------
  29:Core/Src/FusionAhrs.c **** // Function declarations
  30:Core/Src/FusionAhrs.c **** 
  31:Core/Src/FusionAhrs.c **** static inline FusionVector HalfGravity(const FusionAhrs *const ahrs);
  32:Core/Src/FusionAhrs.c **** 
  33:Core/Src/FusionAhrs.c **** static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs);
  34:Core/Src/FusionAhrs.c **** 
  35:Core/Src/FusionAhrs.c **** static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference);
  36:Core/Src/FusionAhrs.c **** 
  37:Core/Src/FusionAhrs.c **** static inline int Clamp(const int value, const int min, const int max);
  38:Core/Src/FusionAhrs.c **** 
  39:Core/Src/FusionAhrs.c **** //------------------------------------------------------------------------------
  40:Core/Src/FusionAhrs.c **** // Functions
  41:Core/Src/FusionAhrs.c **** 
  42:Core/Src/FusionAhrs.c **** /**
  43:Core/Src/FusionAhrs.c ****  * @brief Initialises the AHRS algorithm structure.
  44:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
  45:Core/Src/FusionAhrs.c ****  */
  46:Core/Src/FusionAhrs.c **** void FusionAhrsInitialise(FusionAhrs *const ahrs) {
  47:Core/Src/FusionAhrs.c ****     const FusionAhrsSettings settings = {
  48:Core/Src/FusionAhrs.c ****             .convention = FusionConventionNwu,
  49:Core/Src/FusionAhrs.c ****             .gain = 0.5f,
  50:Core/Src/FusionAhrs.c ****             .gyroscopeRange = 0.0f,
  51:Core/Src/FusionAhrs.c ****             .accelerationRejection = 90.0f,
  52:Core/Src/FusionAhrs.c ****             .magneticRejection = 90.0f,
  53:Core/Src/FusionAhrs.c ****             .recoveryTriggerPeriod = 0,
  54:Core/Src/FusionAhrs.c ****     };
  55:Core/Src/FusionAhrs.c ****     FusionAhrsSetSettings(ahrs, &settings);
  56:Core/Src/FusionAhrs.c ****     FusionAhrsReset(ahrs);
  57:Core/Src/FusionAhrs.c **** }
  58:Core/Src/FusionAhrs.c **** 
  59:Core/Src/FusionAhrs.c **** /**
  60:Core/Src/FusionAhrs.c ****  * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
  61:Core/Src/FusionAhrs.c ****  * algorithm while maintaining the current settings.
  62:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
  63:Core/Src/FusionAhrs.c ****  */
  64:Core/Src/FusionAhrs.c **** void FusionAhrsReset(FusionAhrs *const ahrs) {
  65:Core/Src/FusionAhrs.c ****     ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
  66:Core/Src/FusionAhrs.c ****     ahrs->accelerometer = FUSION_VECTOR_ZERO;
  67:Core/Src/FusionAhrs.c ****     ahrs->initialising = true;
  68:Core/Src/FusionAhrs.c ****     ahrs->rampedGain = INITIAL_GAIN;
  69:Core/Src/FusionAhrs.c ****     ahrs->angularRateRecovery = false;
  70:Core/Src/FusionAhrs.c ****     ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  71:Core/Src/FusionAhrs.c ****     ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  72:Core/Src/FusionAhrs.c ****     ahrs->accelerometerIgnored = false;
  73:Core/Src/FusionAhrs.c ****     ahrs->accelerationRecoveryTrigger = 0;
  74:Core/Src/FusionAhrs.c ****     ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
  75:Core/Src/FusionAhrs.c ****     ahrs->magnetometerIgnored = false;
  76:Core/Src/FusionAhrs.c ****     ahrs->magneticRecoveryTrigger = 0;
  77:Core/Src/FusionAhrs.c ****     ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 22


  78:Core/Src/FusionAhrs.c **** }
  79:Core/Src/FusionAhrs.c **** 
  80:Core/Src/FusionAhrs.c **** /**
  81:Core/Src/FusionAhrs.c ****  * @brief Sets the AHRS algorithm settings.
  82:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
  83:Core/Src/FusionAhrs.c ****  * @param settings Settings.
  84:Core/Src/FusionAhrs.c ****  */
  85:Core/Src/FusionAhrs.c **** void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
  86:Core/Src/FusionAhrs.c ****     ahrs->settings.convention = settings->convention;
  87:Core/Src/FusionAhrs.c ****     ahrs->settings.gain = settings->gain;
  88:Core/Src/FusionAhrs.c ****     ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->
  89:Core/Src/FusionAhrs.c ****     ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf
  90:Core/Src/FusionAhrs.c ****     ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * 
  91:Core/Src/FusionAhrs.c ****     ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
  92:Core/Src/FusionAhrs.c ****     ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
  93:Core/Src/FusionAhrs.c ****     ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
  94:Core/Src/FusionAhrs.c ****     if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable accelerati
  95:Core/Src/FusionAhrs.c ****         ahrs->settings.accelerationRejection = FLT_MAX;
  96:Core/Src/FusionAhrs.c ****         ahrs->settings.magneticRejection = FLT_MAX;
  97:Core/Src/FusionAhrs.c ****     }
  98:Core/Src/FusionAhrs.c ****     if (ahrs->initialising == false) {
  99:Core/Src/FusionAhrs.c ****         ahrs->rampedGain = ahrs->settings.gain;
 100:Core/Src/FusionAhrs.c ****     }
 101:Core/Src/FusionAhrs.c ****     ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 102:Core/Src/FusionAhrs.c **** }
 103:Core/Src/FusionAhrs.c **** 
 104:Core/Src/FusionAhrs.c **** /**
 105:Core/Src/FusionAhrs.c ****  * @brief Updates the AHRS algorithm using the gyroscope, accelerometer, and
 106:Core/Src/FusionAhrs.c ****  * magnetometer measurements.
 107:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 108:Core/Src/FusionAhrs.c ****  * @param gyroscope Gyroscope measurement in degrees per second.
 109:Core/Src/FusionAhrs.c ****  * @param accelerometer Accelerometer measurement in g.
 110:Core/Src/FusionAhrs.c ****  * @param magnetometer Magnetometer measurement in arbitrary units.
 111:Core/Src/FusionAhrs.c ****  * @param deltaTime Delta time in seconds.
 112:Core/Src/FusionAhrs.c ****  */
 113:Core/Src/FusionAhrs.c **** void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector acce
 114:Core/Src/FusionAhrs.c **** #define Q ahrs->quaternion.element
 115:Core/Src/FusionAhrs.c **** 
 116:Core/Src/FusionAhrs.c ****     // Store accelerometer
 117:Core/Src/FusionAhrs.c ****     ahrs->accelerometer = accelerometer;
 118:Core/Src/FusionAhrs.c **** 
 119:Core/Src/FusionAhrs.c ****     // Reinitialise if gyroscope range exceeded
 120:Core/Src/FusionAhrs.c ****     if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs-
 121:Core/Src/FusionAhrs.c ****         const FusionQuaternion quaternion = ahrs->quaternion;
 122:Core/Src/FusionAhrs.c ****         FusionAhrsReset(ahrs);
 123:Core/Src/FusionAhrs.c ****         ahrs->quaternion = quaternion;
 124:Core/Src/FusionAhrs.c ****         ahrs->angularRateRecovery = true;
 125:Core/Src/FusionAhrs.c ****     }
 126:Core/Src/FusionAhrs.c **** 
 127:Core/Src/FusionAhrs.c ****     // Ramp down gain during initialisation
 128:Core/Src/FusionAhrs.c ****     if (ahrs->initialising == true) {
 129:Core/Src/FusionAhrs.c ****         ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 130:Core/Src/FusionAhrs.c ****         if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 131:Core/Src/FusionAhrs.c ****             ahrs->rampedGain = ahrs->settings.gain;
 132:Core/Src/FusionAhrs.c ****             ahrs->initialising = false;
 133:Core/Src/FusionAhrs.c ****             ahrs->angularRateRecovery = false;
 134:Core/Src/FusionAhrs.c ****         }
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 23


 135:Core/Src/FusionAhrs.c ****     }
 136:Core/Src/FusionAhrs.c **** 
 137:Core/Src/FusionAhrs.c ****     // Calculate direction of gravity indicated by algorithm
 138:Core/Src/FusionAhrs.c ****     const FusionVector halfGravity = HalfGravity(ahrs);
 139:Core/Src/FusionAhrs.c **** 		
 140:Core/Src/FusionAhrs.c ****     // Calculate accelerometer feedback
 141:Core/Src/FusionAhrs.c ****     FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 142:Core/Src/FusionAhrs.c ****     ahrs->accelerometerIgnored = true;
 143:Core/Src/FusionAhrs.c ****     if (FusionVectorIsZero(accelerometer) == false) {
 144:Core/Src/FusionAhrs.c **** 
 145:Core/Src/FusionAhrs.c ****         // Calculate accelerometer feedback scaled by 0.5
 146:Core/Src/FusionAhrs.c ****         ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravit
 147:Core/Src/FusionAhrs.c **** 
 148:Core/Src/FusionAhrs.c ****         // Don't ignore accelerometer if acceleration error below threshold
 149:Core/Src/FusionAhrs.c ****         if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerF
 150:Core/Src/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 151:Core/Src/FusionAhrs.c ****             ahrs->accelerationRecoveryTrigger -= 9;
 152:Core/Src/FusionAhrs.c ****         } else {
 153:Core/Src/FusionAhrs.c ****             ahrs->accelerationRecoveryTrigger += 1;
 154:Core/Src/FusionAhrs.c ****         }
 155:Core/Src/FusionAhrs.c **** 
 156:Core/Src/FusionAhrs.c ****         // Don't ignore accelerometer during acceleration recovery
 157:Core/Src/FusionAhrs.c ****         if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 158:Core/Src/FusionAhrs.c ****             ahrs->accelerationRecoveryTimeout = 0;
 159:Core/Src/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 160:Core/Src/FusionAhrs.c ****         } else {
 161:Core/Src/FusionAhrs.c ****             ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 162:Core/Src/FusionAhrs.c ****         }
 163:Core/Src/FusionAhrs.c ****         ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->setti
 164:Core/Src/FusionAhrs.c **** 
 165:Core/Src/FusionAhrs.c ****         // Apply accelerometer feedback
 166:Core/Src/FusionAhrs.c ****         if (ahrs->accelerometerIgnored == false) {
 167:Core/Src/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 168:Core/Src/FusionAhrs.c ****         }
 169:Core/Src/FusionAhrs.c ****     }
 170:Core/Src/FusionAhrs.c **** 
 171:Core/Src/FusionAhrs.c ****     // Calculate magnetometer feedback
 172:Core/Src/FusionAhrs.c ****     FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 173:Core/Src/FusionAhrs.c ****     ahrs->magnetometerIgnored = true;
 174:Core/Src/FusionAhrs.c **** 		
 175:Core/Src/FusionAhrs.c ****     if (FusionVectorIsZero(magnetometer) == false) {
 176:Core/Src/FusionAhrs.c **** 
 177:Core/Src/FusionAhrs.c ****         // Calculate direction of magnetic field indicated by algorithm
 178:Core/Src/FusionAhrs.c ****         const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 179:Core/Src/FusionAhrs.c **** 			
 180:Core/Src/FusionAhrs.c ****         // Calculate magnetometer feedback scaled by 0.5
 181:Core/Src/FusionAhrs.c ****         ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(ha
 182:Core/Src/FusionAhrs.c **** 			
 183:Core/Src/FusionAhrs.c ****         // Don't ignore magnetometer if magnetic error below threshold
 184:Core/Src/FusionAhrs.c ****         if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFe
 185:Core/Src/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 186:Core/Src/FusionAhrs.c ****             ahrs->magneticRecoveryTrigger -= 9;
 187:Core/Src/FusionAhrs.c ****         } else {
 188:Core/Src/FusionAhrs.c ****             ahrs->magneticRecoveryTrigger += 1;
 189:Core/Src/FusionAhrs.c ****         }
 190:Core/Src/FusionAhrs.c **** 
 191:Core/Src/FusionAhrs.c ****         // Don't ignore magnetometer during magnetic recovery
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 24


 192:Core/Src/FusionAhrs.c ****         if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 193:Core/Src/FusionAhrs.c ****             ahrs->magneticRecoveryTimeout = 0;
 194:Core/Src/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 195:Core/Src/FusionAhrs.c ****         } else {
 196:Core/Src/FusionAhrs.c ****             ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 197:Core/Src/FusionAhrs.c ****         }
 198:Core/Src/FusionAhrs.c ****         ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.reco
 199:Core/Src/FusionAhrs.c **** 
 200:Core/Src/FusionAhrs.c ****         // Apply magnetometer feedback
 201:Core/Src/FusionAhrs.c ****         if (ahrs->magnetometerIgnored == false) {
 202:Core/Src/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 203:Core/Src/FusionAhrs.c ****         }
 204:Core/Src/FusionAhrs.c ****     }
 205:Core/Src/FusionAhrs.c **** 
 206:Core/Src/FusionAhrs.c ****     // Convert gyroscope to radians per second scaled by 0.5
 207:Core/Src/FusionAhrs.c ****     const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians
 208:Core/Src/FusionAhrs.c **** 
 209:Core/Src/FusionAhrs.c ****     // Apply feedback to gyroscope
 210:Core/Src/FusionAhrs.c ****     const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyS
 211:Core/Src/FusionAhrs.c **** 
 212:Core/Src/FusionAhrs.c ****     // Integrate rate of change of quaternion
 213:Core/Src/FusionAhrs.c ****     ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->q
 214:Core/Src/FusionAhrs.c **** 
 215:Core/Src/FusionAhrs.c ****     // Normalise quaternion
 216:Core/Src/FusionAhrs.c ****     ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 217:Core/Src/FusionAhrs.c **** #undef Q
 218:Core/Src/FusionAhrs.c **** }
 219:Core/Src/FusionAhrs.c **** 
 220:Core/Src/FusionAhrs.c **** /**
 221:Core/Src/FusionAhrs.c ****  * @brief Returns the direction of gravity scaled by 0.5.
 222:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 223:Core/Src/FusionAhrs.c ****  * @return Direction of gravity scaled by 0.5.
 224:Core/Src/FusionAhrs.c ****  */
 225:Core/Src/FusionAhrs.c **** static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 655              		.loc 1 225 70 is_stmt 1 view -0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 40
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659              		@ link register save eliminated.
 660              		.loc 1 225 70 is_stmt 0 view .LVU175
 661 0000 8AB0     		sub	sp, sp, #40
 662              	.LCFI17:
 663              		.cfi_def_cfa_offset 40
 226:Core/Src/FusionAhrs.c **** #define Q ahrs->quaternion.element
 227:Core/Src/FusionAhrs.c ****     switch (ahrs->settings.convention) {
 664              		.loc 1 227 5 is_stmt 1 view .LVU176
 665              		.loc 1 227 27 is_stmt 0 view .LVU177
 666 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 667              		.loc 1 227 5 view .LVU178
 668 0004 012B     		cmp	r3, #1
 669 0006 2ED9     		bls	.L20
 670 0008 022B     		cmp	r3, #2
 671 000a 5ED1     		bne	.L26
 672              	.LBB70:
 228:Core/Src/FusionAhrs.c ****         case FusionConventionNwu:
 229:Core/Src/FusionAhrs.c ****         case FusionConventionEnu: {
 230:Core/Src/FusionAhrs.c ****             const FusionVector halfGravity = {.axis = {
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 25


 231:Core/Src/FusionAhrs.c ****                     .x = Q.x * Q.z - Q.w * Q.y,
 232:Core/Src/FusionAhrs.c ****                     .y = Q.y * Q.z + Q.w * Q.x,
 233:Core/Src/FusionAhrs.c ****                     .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 234:Core/Src/FusionAhrs.c ****             }}; // third column of transposed rotation matrix scaled by 0.5
 235:Core/Src/FusionAhrs.c ****             return halfGravity;
 236:Core/Src/FusionAhrs.c ****         }
 237:Core/Src/FusionAhrs.c ****         case FusionConventionNed: {
 238:Core/Src/FusionAhrs.c ****             const FusionVector halfGravity = {.axis = {
 673              		.loc 1 238 13 is_stmt 1 view .LVU179
 239:Core/Src/FusionAhrs.c ****                     .x = Q.w * Q.y - Q.x * Q.z,
 674              		.loc 1 239 27 is_stmt 0 view .LVU180
 675 000c D0ED066A 		vldr.32	s13, [r0, #24]
 676              		.loc 1 239 33 view .LVU181
 677 0010 D0ED087A 		vldr.32	s15, [r0, #32]
 678              		.loc 1 239 30 view .LVU182
 679 0014 66EEA75A 		vmul.f32	s11, s13, s15
 680              		.loc 1 239 39 view .LVU183
 681 0018 90ED076A 		vldr.32	s12, [r0, #28]
 682              		.loc 1 239 45 view .LVU184
 683 001c 90ED097A 		vldr.32	s14, [r0, #36]
 684              		.loc 1 239 42 view .LVU185
 685 0020 26EE075A 		vmul.f32	s10, s12, s14
 686              		.loc 1 239 36 view .LVU186
 687 0024 75EEC55A 		vsub.f32	s11, s11, s10
 238:Core/Src/FusionAhrs.c ****                     .x = Q.w * Q.y - Q.x * Q.z,
 688              		.loc 1 238 32 view .LVU187
 689 0028 CDED045A 		vstr.32	s11, [sp, #16]
 240:Core/Src/FusionAhrs.c ****                     .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 690              		.loc 1 240 39 view .LVU188
 691 002c 67EE877A 		vmul.f32	s15, s15, s14
 692              		.loc 1 240 51 view .LVU189
 693 0030 26EE866A 		vmul.f32	s12, s13, s12
 694              		.loc 1 240 45 view .LVU190
 695 0034 77EE867A 		vadd.f32	s15, s15, s12
 696              		.loc 1 240 32 view .LVU191
 697 0038 F1EE677A 		vneg.f32	s15, s15
 238:Core/Src/FusionAhrs.c ****                     .x = Q.w * Q.y - Q.x * Q.z,
 698              		.loc 1 238 32 view .LVU192
 699 003c CDED057A 		vstr.32	s15, [sp, #20]
 241:Core/Src/FusionAhrs.c ****                     .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 700              		.loc 1 241 37 view .LVU193
 701 0040 66EEA66A 		vmul.f32	s13, s13, s13
 702              		.loc 1 241 31 view .LVU194
 703 0044 F6EE007A 		vmov.f32	s15, #5.0e-1
 704 0048 77EEE67A 		vsub.f32	s15, s15, s13
 705              		.loc 1 241 49 view .LVU195
 706 004c 27EE077A 		vmul.f32	s14, s14, s14
 707              		.loc 1 241 43 view .LVU196
 708 0050 77EEC77A 		vsub.f32	s15, s15, s14
 238:Core/Src/FusionAhrs.c ****                     .x = Q.w * Q.y - Q.x * Q.z,
 709              		.loc 1 238 32 view .LVU197
 710 0054 CDED067A 		vstr.32	s15, [sp, #24]
 242:Core/Src/FusionAhrs.c ****             }}; // third column of transposed rotation matrix scaled by -0.5
 243:Core/Src/FusionAhrs.c ****             return halfGravity;
 711              		.loc 1 243 13 is_stmt 1 view .LVU198
 712              		.loc 1 243 20 is_stmt 0 view .LVU199
 713 0058 04AB     		add	r3, sp, #16
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 26


 714 005a 93E80700 		ldm	r3, {r0, r1, r2}
 715              	.LVL7:
 716              		.loc 1 243 20 view .LVU200
 717 005e 0AAB     		add	r3, sp, #40
 718 0060 03E90700 		stmdb	r3, {r0, r1, r2}
 719 0064 29E0     		b	.L23
 720              	.LVL8:
 721              	.L20:
 722              		.loc 1 243 20 view .LVU201
 723              	.LBE70:
 724              	.LBB71:
 230:Core/Src/FusionAhrs.c ****                     .x = Q.x * Q.z - Q.w * Q.y,
 725              		.loc 1 230 13 is_stmt 1 view .LVU202
 231:Core/Src/FusionAhrs.c ****                     .y = Q.y * Q.z + Q.w * Q.x,
 726              		.loc 1 231 27 is_stmt 0 view .LVU203
 727 0066 90ED076A 		vldr.32	s12, [r0, #28]
 231:Core/Src/FusionAhrs.c ****                     .y = Q.y * Q.z + Q.w * Q.x,
 728              		.loc 1 231 33 view .LVU204
 729 006a 90ED097A 		vldr.32	s14, [r0, #36]
 231:Core/Src/FusionAhrs.c ****                     .y = Q.y * Q.z + Q.w * Q.x,
 730              		.loc 1 231 30 view .LVU205
 731 006e 66EE075A 		vmul.f32	s11, s12, s14
 231:Core/Src/FusionAhrs.c ****                     .y = Q.y * Q.z + Q.w * Q.x,
 732              		.loc 1 231 39 view .LVU206
 733 0072 D0ED067A 		vldr.32	s15, [r0, #24]
 231:Core/Src/FusionAhrs.c ****                     .y = Q.y * Q.z + Q.w * Q.x,
 734              		.loc 1 231 45 view .LVU207
 735 0076 D0ED086A 		vldr.32	s13, [r0, #32]
 231:Core/Src/FusionAhrs.c ****                     .y = Q.y * Q.z + Q.w * Q.x,
 736              		.loc 1 231 42 view .LVU208
 737 007a 27EEA65A 		vmul.f32	s10, s15, s13
 231:Core/Src/FusionAhrs.c ****                     .y = Q.y * Q.z + Q.w * Q.x,
 738              		.loc 1 231 36 view .LVU209
 739 007e 75EEC55A 		vsub.f32	s11, s11, s10
 230:Core/Src/FusionAhrs.c ****                     .x = Q.x * Q.z - Q.w * Q.y,
 740              		.loc 1 230 32 view .LVU210
 741 0082 CDED045A 		vstr.32	s11, [sp, #16]
 232:Core/Src/FusionAhrs.c ****                     .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 742              		.loc 1 232 30 view .LVU211
 743 0086 67EE266A 		vmul.f32	s13, s14, s13
 232:Core/Src/FusionAhrs.c ****                     .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 744              		.loc 1 232 42 view .LVU212
 745 008a 26EE276A 		vmul.f32	s12, s12, s15
 232:Core/Src/FusionAhrs.c ****                     .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 746              		.loc 1 232 36 view .LVU213
 747 008e 76EE866A 		vadd.f32	s13, s13, s12
 230:Core/Src/FusionAhrs.c ****                     .x = Q.x * Q.z - Q.w * Q.y,
 748              		.loc 1 230 32 view .LVU214
 749 0092 CDED056A 		vstr.32	s13, [sp, #20]
 233:Core/Src/FusionAhrs.c ****             }}; // third column of transposed rotation matrix scaled by 0.5
 750              		.loc 1 233 30 view .LVU215
 751 0096 67EEA77A 		vmul.f32	s15, s15, s15
 233:Core/Src/FusionAhrs.c ****             }}; // third column of transposed rotation matrix scaled by 0.5
 752              		.loc 1 233 36 view .LVU216
 753 009a F6EE006A 		vmov.f32	s13, #5.0e-1
 754 009e 77EEE67A 		vsub.f32	s15, s15, s13
 233:Core/Src/FusionAhrs.c ****             }}; // third column of transposed rotation matrix scaled by 0.5
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 27


 755              		.loc 1 233 49 view .LVU217
 756 00a2 27EE077A 		vmul.f32	s14, s14, s14
 233:Core/Src/FusionAhrs.c ****             }}; // third column of transposed rotation matrix scaled by 0.5
 757              		.loc 1 233 43 view .LVU218
 758 00a6 77EE877A 		vadd.f32	s15, s15, s14
 230:Core/Src/FusionAhrs.c ****                     .x = Q.x * Q.z - Q.w * Q.y,
 759              		.loc 1 230 32 view .LVU219
 760 00aa CDED067A 		vstr.32	s15, [sp, #24]
 235:Core/Src/FusionAhrs.c ****         }
 761              		.loc 1 235 13 is_stmt 1 view .LVU220
 235:Core/Src/FusionAhrs.c ****         }
 762              		.loc 1 235 20 is_stmt 0 view .LVU221
 763 00ae 04AB     		add	r3, sp, #16
 764 00b0 93E80700 		ldm	r3, {r0, r1, r2}
 765              	.LVL9:
 235:Core/Src/FusionAhrs.c ****         }
 766              		.loc 1 235 20 view .LVU222
 767 00b4 0AAB     		add	r3, sp, #40
 768 00b6 03E90700 		stmdb	r3, {r0, r1, r2}
 769              	.L23:
 235:Core/Src/FusionAhrs.c ****         }
 770              		.loc 1 235 20 view .LVU223
 771              	.LBE71:
 244:Core/Src/FusionAhrs.c ****         }
 245:Core/Src/FusionAhrs.c ****     }
 246:Core/Src/FusionAhrs.c ****     return FUSION_VECTOR_ZERO; // avoid compiler warning
 247:Core/Src/FusionAhrs.c **** #undef Q
 248:Core/Src/FusionAhrs.c **** }
 772              		.loc 1 248 1 view .LVU224
 773 00ba 9DED070A 		vldr.32	s0, [sp, #28]
 774 00be DDED080A 		vldr.32	s1, [sp, #32]
 775 00c2 9DED091A 		vldr.32	s2, [sp, #36]
 776 00c6 0AB0     		add	sp, sp, #40
 777              	.LCFI18:
 778              		.cfi_remember_state
 779              		.cfi_def_cfa_offset 0
 780              		@ sp needed
 781 00c8 7047     		bx	lr
 782              	.LVL10:
 783              	.L26:
 784              	.LCFI19:
 785              		.cfi_restore_state
 246:Core/Src/FusionAhrs.c **** #undef Q
 786              		.loc 1 246 5 is_stmt 1 view .LVU225
 246:Core/Src/FusionAhrs.c **** #undef Q
 787              		.loc 1 246 12 is_stmt 0 view .LVU226
 788 00ca 0023     		movs	r3, #0
 789 00cc 0793     		str	r3, [sp, #28]	@ float
 790 00ce 0893     		str	r3, [sp, #32]	@ float
 791 00d0 0993     		str	r3, [sp, #36]	@ float
 792 00d2 F2E7     		b	.L23
 793              		.cfi_endproc
 794              	.LFE26:
 796              		.section	.text.HalfMagnetic,"ax",%progbits
 797              		.align	1
 798              		.syntax unified
 799              		.thumb
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 28


 800              		.thumb_func
 802              	HalfMagnetic:
 803              	.LVL11:
 804              	.LFB27:
 249:Core/Src/FusionAhrs.c **** 
 250:Core/Src/FusionAhrs.c **** /**
 251:Core/Src/FusionAhrs.c ****  * @brief Returns the direction of the magnetic field scaled by 0.5.
 252:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 253:Core/Src/FusionAhrs.c ****  * @return Direction of the magnetic field scaled by 0.5.
 254:Core/Src/FusionAhrs.c ****  */
 255:Core/Src/FusionAhrs.c **** static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 805              		.loc 1 255 71 is_stmt 1 view -0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 40
 808              		@ frame_needed = 0, uses_anonymous_args = 0
 809              		@ link register save eliminated.
 810              		.loc 1 255 71 is_stmt 0 view .LVU228
 811 0000 8AB0     		sub	sp, sp, #40
 812              	.LCFI20:
 813              		.cfi_def_cfa_offset 40
 256:Core/Src/FusionAhrs.c **** #define Q ahrs->quaternion.element
 257:Core/Src/FusionAhrs.c ****     switch (ahrs->settings.convention) {
 814              		.loc 1 257 5 is_stmt 1 view .LVU229
 815              		.loc 1 257 27 is_stmt 0 view .LVU230
 816 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 817              		.loc 1 257 5 view .LVU231
 818 0004 012B     		cmp	r3, #1
 819 0006 36D0     		beq	.L28
 820 0008 022B     		cmp	r3, #2
 821 000a 61D0     		beq	.L29
 822 000c 002B     		cmp	r3, #0
 823 000e 40F08C80 		bne	.L30
 824              	.LBB72:
 258:Core/Src/FusionAhrs.c ****         case FusionConventionNwu: {
 259:Core/Src/FusionAhrs.c ****             const FusionVector halfMagnetic = {.axis = {
 825              		.loc 1 259 13 is_stmt 1 view .LVU232
 260:Core/Src/FusionAhrs.c ****                     .x = Q.x * Q.y + Q.w * Q.z,
 826              		.loc 1 260 27 is_stmt 0 view .LVU233
 827 0012 D0ED076A 		vldr.32	s13, [r0, #28]
 828              		.loc 1 260 33 view .LVU234
 829 0016 D0ED087A 		vldr.32	s15, [r0, #32]
 830              		.loc 1 260 30 view .LVU235
 831 001a 26EEA77A 		vmul.f32	s14, s13, s15
 832              		.loc 1 260 39 view .LVU236
 833 001e 90ED066A 		vldr.32	s12, [r0, #24]
 834              		.loc 1 260 45 view .LVU237
 835 0022 D0ED095A 		vldr.32	s11, [r0, #36]
 836              		.loc 1 260 42 view .LVU238
 837 0026 26EE255A 		vmul.f32	s10, s12, s11
 838              		.loc 1 260 36 view .LVU239
 839 002a 37EE057A 		vadd.f32	s14, s14, s10
 259:Core/Src/FusionAhrs.c ****                     .x = Q.x * Q.y + Q.w * Q.z,
 840              		.loc 1 259 32 view .LVU240
 841 002e 8DED047A 		vstr.32	s14, [sp, #16]
 261:Core/Src/FusionAhrs.c ****                     .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 842              		.loc 1 261 30 view .LVU241
 843 0032 26EE067A 		vmul.f32	s14, s12, s12
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 29


 844              		.loc 1 261 36 view .LVU242
 845 0036 B6EE005A 		vmov.f32	s10, #5.0e-1
 846 003a 37EE457A 		vsub.f32	s14, s14, s10
 847              		.loc 1 261 49 view .LVU243
 848 003e 27EEA75A 		vmul.f32	s10, s15, s15
 849              		.loc 1 261 43 view .LVU244
 850 0042 37EE057A 		vadd.f32	s14, s14, s10
 259:Core/Src/FusionAhrs.c ****                     .x = Q.x * Q.y + Q.w * Q.z,
 851              		.loc 1 259 32 view .LVU245
 852 0046 8DED057A 		vstr.32	s14, [sp, #20]
 262:Core/Src/FusionAhrs.c ****                     .z = Q.y * Q.z - Q.w * Q.x,
 853              		.loc 1 262 30 view .LVU246
 854 004a 67EEA57A 		vmul.f32	s15, s15, s11
 855              		.loc 1 262 42 view .LVU247
 856 004e 66EE866A 		vmul.f32	s13, s13, s12
 857              		.loc 1 262 36 view .LVU248
 858 0052 77EEE67A 		vsub.f32	s15, s15, s13
 259:Core/Src/FusionAhrs.c ****                     .x = Q.x * Q.y + Q.w * Q.z,
 859              		.loc 1 259 32 view .LVU249
 860 0056 CDED067A 		vstr.32	s15, [sp, #24]
 263:Core/Src/FusionAhrs.c ****             }}; // second column of transposed rotation matrix scaled by 0.5
 264:Core/Src/FusionAhrs.c ****             return halfMagnetic;
 861              		.loc 1 264 13 is_stmt 1 view .LVU250
 862              		.loc 1 264 20 is_stmt 0 view .LVU251
 863 005a 04AB     		add	r3, sp, #16
 864 005c 93E80700 		ldm	r3, {r0, r1, r2}
 865              	.LVL12:
 866              		.loc 1 264 20 view .LVU252
 867 0060 0AAB     		add	r3, sp, #40
 868 0062 03E90700 		stmdb	r3, {r0, r1, r2}
 869              	.L31:
 870              	.LBE72:
 265:Core/Src/FusionAhrs.c ****         }
 266:Core/Src/FusionAhrs.c ****         case FusionConventionEnu: {
 267:Core/Src/FusionAhrs.c ****             const FusionVector halfMagnetic = {.axis = {
 268:Core/Src/FusionAhrs.c ****                     .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 269:Core/Src/FusionAhrs.c ****                     .y = Q.w * Q.z - Q.x * Q.y,
 270:Core/Src/FusionAhrs.c ****                     .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 271:Core/Src/FusionAhrs.c ****             }}; // first column of transposed rotation matrix scaled by -0.5
 272:Core/Src/FusionAhrs.c ****             return halfMagnetic;
 273:Core/Src/FusionAhrs.c ****         }
 274:Core/Src/FusionAhrs.c ****         case FusionConventionNed: {
 275:Core/Src/FusionAhrs.c ****             const FusionVector halfMagnetic = {.axis = {
 276:Core/Src/FusionAhrs.c ****                     .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 277:Core/Src/FusionAhrs.c ****                     .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 278:Core/Src/FusionAhrs.c ****                     .z = Q.w * Q.x - Q.y * Q.z,
 279:Core/Src/FusionAhrs.c ****             }}; // second column of transposed rotation matrix scaled by -0.5
 280:Core/Src/FusionAhrs.c ****             return halfMagnetic;
 281:Core/Src/FusionAhrs.c ****         }
 282:Core/Src/FusionAhrs.c ****     }
 283:Core/Src/FusionAhrs.c ****     return FUSION_VECTOR_ZERO; // avoid compiler warning
 284:Core/Src/FusionAhrs.c **** #undef Q
 285:Core/Src/FusionAhrs.c **** }
 871              		.loc 1 285 1 view .LVU253
 872 0066 9DED070A 		vldr.32	s0, [sp, #28]
 873 006a DDED080A 		vldr.32	s1, [sp, #32]
 874 006e 9DED091A 		vldr.32	s2, [sp, #36]
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 30


 875 0072 0AB0     		add	sp, sp, #40
 876              	.LCFI21:
 877              		.cfi_remember_state
 878              		.cfi_def_cfa_offset 0
 879              		@ sp needed
 880 0074 7047     		bx	lr
 881              	.LVL13:
 882              	.L28:
 883              	.LCFI22:
 884              		.cfi_restore_state
 885              	.LBB73:
 267:Core/Src/FusionAhrs.c ****                     .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 886              		.loc 1 267 13 is_stmt 1 view .LVU254
 268:Core/Src/FusionAhrs.c ****                     .y = Q.w * Q.z - Q.x * Q.y,
 887              		.loc 1 268 34 is_stmt 0 view .LVU255
 888 0076 90ED067A 		vldr.32	s14, [r0, #24]
 268:Core/Src/FusionAhrs.c ****                     .y = Q.w * Q.z - Q.x * Q.y,
 889              		.loc 1 268 37 view .LVU256
 890 007a 67EE077A 		vmul.f32	s15, s14, s14
 268:Core/Src/FusionAhrs.c ****                     .y = Q.w * Q.z - Q.x * Q.y,
 891              		.loc 1 268 31 view .LVU257
 892 007e F6EE006A 		vmov.f32	s13, #5.0e-1
 893 0082 76EEE76A 		vsub.f32	s13, s13, s15
 268:Core/Src/FusionAhrs.c ****                     .y = Q.w * Q.z - Q.x * Q.y,
 894              		.loc 1 268 46 view .LVU258
 895 0086 D0ED077A 		vldr.32	s15, [r0, #28]
 268:Core/Src/FusionAhrs.c ****                     .y = Q.w * Q.z - Q.x * Q.y,
 896              		.loc 1 268 49 view .LVU259
 897 008a 27EEA76A 		vmul.f32	s12, s15, s15
 268:Core/Src/FusionAhrs.c ****                     .y = Q.w * Q.z - Q.x * Q.y,
 898              		.loc 1 268 43 view .LVU260
 899 008e 76EEC66A 		vsub.f32	s13, s13, s12
 267:Core/Src/FusionAhrs.c ****                     .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 900              		.loc 1 267 32 view .LVU261
 901 0092 CDED046A 		vstr.32	s13, [sp, #16]
 269:Core/Src/FusionAhrs.c ****                     .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 902              		.loc 1 269 33 view .LVU262
 903 0096 D0ED095A 		vldr.32	s11, [r0, #36]
 269:Core/Src/FusionAhrs.c ****                     .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 904              		.loc 1 269 30 view .LVU263
 905 009a 67EE256A 		vmul.f32	s13, s14, s11
 269:Core/Src/FusionAhrs.c ****                     .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 906              		.loc 1 269 45 view .LVU264
 907 009e 90ED086A 		vldr.32	s12, [r0, #32]
 269:Core/Src/FusionAhrs.c ****                     .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 908              		.loc 1 269 42 view .LVU265
 909 00a2 27EE865A 		vmul.f32	s10, s15, s12
 269:Core/Src/FusionAhrs.c ****                     .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 910              		.loc 1 269 36 view .LVU266
 911 00a6 76EEC56A 		vsub.f32	s13, s13, s10
 267:Core/Src/FusionAhrs.c ****                     .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 912              		.loc 1 267 32 view .LVU267
 913 00aa CDED056A 		vstr.32	s13, [sp, #20]
 270:Core/Src/FusionAhrs.c ****             }}; // first column of transposed rotation matrix scaled by -0.5
 914              		.loc 1 270 39 view .LVU268
 915 00ae 67EEA57A 		vmul.f32	s15, s15, s11
 270:Core/Src/FusionAhrs.c ****             }}; // first column of transposed rotation matrix scaled by -0.5
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 31


 916              		.loc 1 270 51 view .LVU269
 917 00b2 27EE067A 		vmul.f32	s14, s14, s12
 270:Core/Src/FusionAhrs.c ****             }}; // first column of transposed rotation matrix scaled by -0.5
 918              		.loc 1 270 45 view .LVU270
 919 00b6 77EE877A 		vadd.f32	s15, s15, s14
 270:Core/Src/FusionAhrs.c ****             }}; // first column of transposed rotation matrix scaled by -0.5
 920              		.loc 1 270 32 view .LVU271
 921 00ba F1EE677A 		vneg.f32	s15, s15
 267:Core/Src/FusionAhrs.c ****                     .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 922              		.loc 1 267 32 view .LVU272
 923 00be CDED067A 		vstr.32	s15, [sp, #24]
 272:Core/Src/FusionAhrs.c ****         }
 924              		.loc 1 272 13 is_stmt 1 view .LVU273
 272:Core/Src/FusionAhrs.c ****         }
 925              		.loc 1 272 20 is_stmt 0 view .LVU274
 926 00c2 04AB     		add	r3, sp, #16
 927 00c4 93E80700 		ldm	r3, {r0, r1, r2}
 928              	.LVL14:
 272:Core/Src/FusionAhrs.c ****         }
 929              		.loc 1 272 20 view .LVU275
 930 00c8 0AAB     		add	r3, sp, #40
 931 00ca 03E90700 		stmdb	r3, {r0, r1, r2}
 932 00ce CAE7     		b	.L31
 933              	.LVL15:
 934              	.L29:
 272:Core/Src/FusionAhrs.c ****         }
 935              		.loc 1 272 20 view .LVU276
 936              	.LBE73:
 937              	.LBB74:
 275:Core/Src/FusionAhrs.c ****                     .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 938              		.loc 1 275 13 is_stmt 1 view .LVU277
 276:Core/Src/FusionAhrs.c ****                     .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 939              		.loc 1 276 36 is_stmt 0 view .LVU278
 940 00d0 D0ED077A 		vldr.32	s15, [r0, #28]
 276:Core/Src/FusionAhrs.c ****                     .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 941              		.loc 1 276 42 view .LVU279
 942 00d4 90ED087A 		vldr.32	s14, [r0, #32]
 276:Core/Src/FusionAhrs.c ****                     .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 943              		.loc 1 276 39 view .LVU280
 944 00d8 67EE876A 		vmul.f32	s13, s15, s14
 276:Core/Src/FusionAhrs.c ****                     .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 945              		.loc 1 276 48 view .LVU281
 946 00dc 90ED066A 		vldr.32	s12, [r0, #24]
 276:Core/Src/FusionAhrs.c ****                     .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 947              		.loc 1 276 54 view .LVU282
 948 00e0 D0ED095A 		vldr.32	s11, [r0, #36]
 276:Core/Src/FusionAhrs.c ****                     .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 949              		.loc 1 276 51 view .LVU283
 950 00e4 26EE255A 		vmul.f32	s10, s12, s11
 276:Core/Src/FusionAhrs.c ****                     .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 951              		.loc 1 276 45 view .LVU284
 952 00e8 76EE856A 		vadd.f32	s13, s13, s10
 276:Core/Src/FusionAhrs.c ****                     .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 953              		.loc 1 276 32 view .LVU285
 954 00ec F1EE666A 		vneg.f32	s13, s13
 275:Core/Src/FusionAhrs.c ****                     .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 955              		.loc 1 275 32 view .LVU286
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 32


 956 00f0 CDED046A 		vstr.32	s13, [sp, #16]
 277:Core/Src/FusionAhrs.c ****                     .z = Q.w * Q.x - Q.y * Q.z,
 957              		.loc 1 277 37 view .LVU287
 958 00f4 26EE065A 		vmul.f32	s10, s12, s12
 277:Core/Src/FusionAhrs.c ****                     .z = Q.w * Q.x - Q.y * Q.z,
 959              		.loc 1 277 31 view .LVU288
 960 00f8 F6EE006A 		vmov.f32	s13, #5.0e-1
 961 00fc 76EEC56A 		vsub.f32	s13, s13, s10
 277:Core/Src/FusionAhrs.c ****                     .z = Q.w * Q.x - Q.y * Q.z,
 962              		.loc 1 277 49 view .LVU289
 963 0100 27EE075A 		vmul.f32	s10, s14, s14
 277:Core/Src/FusionAhrs.c ****                     .z = Q.w * Q.x - Q.y * Q.z,
 964              		.loc 1 277 43 view .LVU290
 965 0104 76EEC56A 		vsub.f32	s13, s13, s10
 275:Core/Src/FusionAhrs.c ****                     .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 966              		.loc 1 275 32 view .LVU291
 967 0108 CDED056A 		vstr.32	s13, [sp, #20]
 278:Core/Src/FusionAhrs.c ****             }}; // second column of transposed rotation matrix scaled by -0.5
 968              		.loc 1 278 30 view .LVU292
 969 010c 67EE867A 		vmul.f32	s15, s15, s12
 278:Core/Src/FusionAhrs.c ****             }}; // second column of transposed rotation matrix scaled by -0.5
 970              		.loc 1 278 42 view .LVU293
 971 0110 27EE257A 		vmul.f32	s14, s14, s11
 278:Core/Src/FusionAhrs.c ****             }}; // second column of transposed rotation matrix scaled by -0.5
 972              		.loc 1 278 36 view .LVU294
 973 0114 77EEC77A 		vsub.f32	s15, s15, s14
 275:Core/Src/FusionAhrs.c ****                     .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 974              		.loc 1 275 32 view .LVU295
 975 0118 CDED067A 		vstr.32	s15, [sp, #24]
 280:Core/Src/FusionAhrs.c ****         }
 976              		.loc 1 280 13 is_stmt 1 view .LVU296
 280:Core/Src/FusionAhrs.c ****         }
 977              		.loc 1 280 20 is_stmt 0 view .LVU297
 978 011c 04AB     		add	r3, sp, #16
 979 011e 93E80700 		ldm	r3, {r0, r1, r2}
 980              	.LVL16:
 280:Core/Src/FusionAhrs.c ****         }
 981              		.loc 1 280 20 view .LVU298
 982 0122 0AAB     		add	r3, sp, #40
 983 0124 03E90700 		stmdb	r3, {r0, r1, r2}
 984 0128 9DE7     		b	.L31
 985              	.LVL17:
 986              	.L30:
 280:Core/Src/FusionAhrs.c ****         }
 987              		.loc 1 280 20 view .LVU299
 988              	.LBE74:
 283:Core/Src/FusionAhrs.c **** #undef Q
 989              		.loc 1 283 5 is_stmt 1 view .LVU300
 283:Core/Src/FusionAhrs.c **** #undef Q
 990              		.loc 1 283 12 is_stmt 0 view .LVU301
 991 012a 0023     		movs	r3, #0
 992 012c 0793     		str	r3, [sp, #28]	@ float
 993 012e 0893     		str	r3, [sp, #32]	@ float
 994 0130 0993     		str	r3, [sp, #36]	@ float
 995 0132 98E7     		b	.L31
 996              		.cfi_endproc
 997              	.LFE27:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 33


 999              		.section	.text.Feedback,"ax",%progbits
 1000              		.align	1
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
 1005              	Feedback:
 1006              	.LFB28:
 286:Core/Src/FusionAhrs.c **** 
 287:Core/Src/FusionAhrs.c **** /**
 288:Core/Src/FusionAhrs.c ****  * @brief Returns the feedback.
 289:Core/Src/FusionAhrs.c ****  * @param sensor Sensor.
 290:Core/Src/FusionAhrs.c ****  * @param reference Reference.
 291:Core/Src/FusionAhrs.c ****  * @return Feedback.
 292:Core/Src/FusionAhrs.c ****  */
 293:Core/Src/FusionAhrs.c **** static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 1007              		.loc 1 293 94 is_stmt 1 view -0
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 64
 1010              		@ frame_needed = 0, uses_anonymous_args = 0
 1011 0000 00B5     		push	{lr}
 1012              	.LCFI23:
 1013              		.cfi_def_cfa_offset 4
 1014              		.cfi_offset 14, -4
 1015 0002 91B0     		sub	sp, sp, #68
 1016              	.LCFI24:
 1017              		.cfi_def_cfa_offset 72
 1018 0004 8DED070A 		vstr.32	s0, [sp, #28]
 1019 0008 CDED080A 		vstr.32	s1, [sp, #32]
 1020 000c 8DED091A 		vstr.32	s2, [sp, #36]
 1021 0010 CDED041A 		vstr.32	s3, [sp, #16]
 1022 0014 8DED052A 		vstr.32	s4, [sp, #20]
 1023 0018 CDED062A 		vstr.32	s5, [sp, #24]
 294:Core/Src/FusionAhrs.c ****     if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 1024              		.loc 1 294 5 view .LVU303
 1025              		.loc 1 294 9 is_stmt 0 view .LVU304
 1026 001c FFF7FEFF 		bl	FusionVectorDotProduct
 1027              	.LVL18:
 1028              		.loc 1 294 8 discriminator 1 view .LVU305
 1029 0020 B5EEC00A 		vcmpe.f32	s0, #0
 1030 0024 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1031 0028 1CD4     		bmi	.L40
 295:Core/Src/FusionAhrs.c ****         return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 296:Core/Src/FusionAhrs.c ****     }
 297:Core/Src/FusionAhrs.c ****     return FusionVectorCrossProduct(sensor, reference);
 1032              		.loc 1 297 5 is_stmt 1 view .LVU306
 1033              		.loc 1 297 12 is_stmt 0 view .LVU307
 1034 002a DDED041A 		vldr.32	s3, [sp, #16]
 1035 002e 9DED052A 		vldr.32	s4, [sp, #20]
 1036 0032 DDED062A 		vldr.32	s5, [sp, #24]
 1037 0036 9DED070A 		vldr.32	s0, [sp, #28]
 1038 003a DDED080A 		vldr.32	s1, [sp, #32]
 1039 003e 9DED091A 		vldr.32	s2, [sp, #36]
 1040 0042 FFF7FEFF 		bl	FusionVectorCrossProduct
 1041              	.LVL19:
 1042 0046 8DED0A0A 		vstr.32	s0, [sp, #40]
 1043 004a CDED0B0A 		vstr.32	s1, [sp, #44]
 1044 004e 8DED0C1A 		vstr.32	s2, [sp, #48]
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 34


 1045              	.L36:
 298:Core/Src/FusionAhrs.c **** }
 1046              		.loc 1 298 1 view .LVU308
 1047 0052 9DED0A0A 		vldr.32	s0, [sp, #40]
 1048 0056 DDED0B0A 		vldr.32	s1, [sp, #44]
 1049 005a 9DED0C1A 		vldr.32	s2, [sp, #48]
 1050 005e 11B0     		add	sp, sp, #68
 1051              	.LCFI25:
 1052              		.cfi_remember_state
 1053              		.cfi_def_cfa_offset 4
 1054              		@ sp needed
 1055 0060 5DF804FB 		ldr	pc, [sp], #4
 1056              	.L40:
 1057              	.LCFI26:
 1058              		.cfi_restore_state
 295:Core/Src/FusionAhrs.c ****         return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 1059              		.loc 1 295 9 is_stmt 1 view .LVU309
 295:Core/Src/FusionAhrs.c ****         return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 1060              		.loc 1 295 16 is_stmt 0 view .LVU310
 1061 0064 DDED041A 		vldr.32	s3, [sp, #16]
 1062 0068 9DED052A 		vldr.32	s4, [sp, #20]
 1063 006c DDED062A 		vldr.32	s5, [sp, #24]
 1064 0070 9DED070A 		vldr.32	s0, [sp, #28]
 1065 0074 DDED080A 		vldr.32	s1, [sp, #32]
 1066 0078 9DED091A 		vldr.32	s2, [sp, #36]
 1067 007c FFF7FEFF 		bl	FusionVectorCrossProduct
 1068              	.LVL20:
 1069 0080 8DED0D0A 		vstr.32	s0, [sp, #52]
 1070 0084 CDED0E0A 		vstr.32	s1, [sp, #56]
 1071 0088 8DED0F1A 		vstr.32	s2, [sp, #60]
 295:Core/Src/FusionAhrs.c ****         return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 1072              		.loc 1 295 16 discriminator 1 view .LVU311
 1073 008c FFF7FEFF 		bl	FusionVectorNormalise
 1074              	.LVL21:
 1075 0090 8DED0A0A 		vstr.32	s0, [sp, #40]
 1076 0094 CDED0B0A 		vstr.32	s1, [sp, #44]
 1077 0098 8DED0C1A 		vstr.32	s2, [sp, #48]
 295:Core/Src/FusionAhrs.c ****         return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 1078              		.loc 1 295 16 view .LVU312
 1079 009c D9E7     		b	.L36
 1080              		.cfi_endproc
 1081              	.LFE28:
 1083              		.section	.text.FusionVectorMagnitude,"ax",%progbits
 1084              		.align	1
 1085              		.syntax unified
 1086              		.thumb
 1087              		.thumb_func
 1089              	FusionVectorMagnitude:
 1090              	.LFB13:
 307:Core/Inc/FusionMath.h ****     return sqrtf(FusionVectorMagnitudeSquared(vector));
 1091              		.loc 2 307 70 is_stmt 1 view -0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 16
 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 1095 0000 00B5     		push	{lr}
 1096              	.LCFI27:
 1097              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 35


 1098              		.cfi_offset 14, -4
 1099 0002 85B0     		sub	sp, sp, #20
 1100              	.LCFI28:
 1101              		.cfi_def_cfa_offset 24
 1102 0004 8DED010A 		vstr.32	s0, [sp, #4]
 1103 0008 CDED020A 		vstr.32	s1, [sp, #8]
 1104 000c 8DED031A 		vstr.32	s2, [sp, #12]
 308:Core/Inc/FusionMath.h **** }
 1105              		.loc 2 308 5 view .LVU314
 308:Core/Inc/FusionMath.h **** }
 1106              		.loc 2 308 12 is_stmt 0 view .LVU315
 1107 0010 FFF7FEFF 		bl	FusionVectorMagnitudeSquared
 1108              	.LVL22:
 308:Core/Inc/FusionMath.h **** }
 1109              		.loc 2 308 12 discriminator 1 view .LVU316
 1110 0014 FFF7FEFF 		bl	sqrtf
 1111              	.LVL23:
 309:Core/Inc/FusionMath.h **** 
 1112              		.loc 2 309 1 view .LVU317
 1113 0018 05B0     		add	sp, sp, #20
 1114              	.LCFI29:
 1115              		.cfi_def_cfa_offset 4
 1116              		@ sp needed
 1117 001a 5DF804FB 		ldr	pc, [sp], #4
 1118              		.cfi_endproc
 1119              	.LFE13:
 1121              		.section	.text.FusionAsin,"ax",%progbits
 1122              		.align	1
 1123              		.syntax unified
 1124              		.thumb
 1125              		.thumb_func
 1127              	FusionAsin:
 1128              	.LVL24:
 1129              	.LFB2:
 148:Core/Inc/FusionMath.h ****     if (value <= -1.0f) {
 1130              		.loc 2 148 51 is_stmt 1 view -0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 149:Core/Inc/FusionMath.h ****         return (float) M_PI / -2.0f;
 1134              		.loc 2 149 5 view .LVU319
 149:Core/Inc/FusionMath.h ****         return (float) M_PI / -2.0f;
 1135              		.loc 2 149 8 is_stmt 0 view .LVU320
 1136 0000 FFEE007A 		vmov.f32	s15, #-1.0e+0
 1137 0004 B4EEE70A 		vcmpe.f32	s0, s15
 1138 0008 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1139 000c 0DD9     		bls	.L45
 152:Core/Inc/FusionMath.h ****         return (float) M_PI / 2.0f;
 1140              		.loc 2 152 5 is_stmt 1 view .LVU321
 152:Core/Inc/FusionMath.h ****         return (float) M_PI / 2.0f;
 1141              		.loc 2 152 8 is_stmt 0 view .LVU322
 1142 000e F7EE007A 		vmov.f32	s15, #1.0e+0
 1143 0012 B4EEE70A 		vcmpe.f32	s0, s15
 1144 0016 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1145 001a 02DB     		blt	.L51
 153:Core/Inc/FusionMath.h ****     }
 1146              		.loc 2 153 29 view .LVU323
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 36


 1147 001c 9FED040A 		vldr.32	s0, .L52
 1148              	.LVL25:
 156:Core/Inc/FusionMath.h **** 
 1149              		.loc 2 156 1 view .LVU324
 1150 0020 7047     		bx	lr
 1151              	.LVL26:
 1152              	.L51:
 148:Core/Inc/FusionMath.h ****     if (value <= -1.0f) {
 1153              		.loc 2 148 51 view .LVU325
 1154 0022 08B5     		push	{r3, lr}
 1155              	.LCFI30:
 1156              		.cfi_def_cfa_offset 8
 1157              		.cfi_offset 3, -8
 1158              		.cfi_offset 14, -4
 155:Core/Inc/FusionMath.h **** }
 1159              		.loc 2 155 5 is_stmt 1 view .LVU326
 155:Core/Inc/FusionMath.h **** }
 1160              		.loc 2 155 12 is_stmt 0 view .LVU327
 1161 0024 FFF7FEFF 		bl	asinf
 1162              	.LVL27:
 156:Core/Inc/FusionMath.h **** 
 1163              		.loc 2 156 1 view .LVU328
 1164 0028 08BD     		pop	{r3, pc}
 1165              	.LVL28:
 1166              	.L45:
 1167              	.LCFI31:
 1168              		.cfi_def_cfa_offset 0
 1169              		.cfi_restore 3
 1170              		.cfi_restore 14
 150:Core/Inc/FusionMath.h ****     }
 1171              		.loc 2 150 29 view .LVU329
 1172 002a 9FED020A 		vldr.32	s0, .L52+4
 1173              	.LVL29:
 150:Core/Inc/FusionMath.h ****     }
 1174              		.loc 2 150 29 view .LVU330
 1175 002e 7047     		bx	lr
 1176              	.L53:
 1177              		.align	2
 1178              	.L52:
 1179 0030 DB0FC93F 		.word	1070141403
 1180 0034 DB0FC9BF 		.word	-1077342245
 1181              		.cfi_endproc
 1182              	.LFE2:
 1184              		.section	.text.FusionAhrsReset,"ax",%progbits
 1185              		.align	1
 1186              		.global	FusionAhrsReset
 1187              		.syntax unified
 1188              		.thumb
 1189              		.thumb_func
 1191              	FusionAhrsReset:
 1192              	.LVL30:
 1193              	.LFB23:
  64:Core/Src/FusionAhrs.c ****     ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 1194              		.loc 1 64 46 is_stmt 1 view -0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 0
 1197              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 37


 1198              		@ link register save eliminated.
  65:Core/Src/FusionAhrs.c ****     ahrs->accelerometer = FUSION_VECTOR_ZERO;
 1199              		.loc 1 65 5 view .LVU332
  65:Core/Src/FusionAhrs.c ****     ahrs->accelerometer = FUSION_VECTOR_ZERO;
 1200              		.loc 1 65 22 is_stmt 0 view .LVU333
 1201 0000 4FF07E53 		mov	r3, #1065353216
 1202 0004 8361     		str	r3, [r0, #24]	@ float
 1203 0006 0023     		movs	r3, #0
 1204 0008 C361     		str	r3, [r0, #28]	@ float
 1205 000a 0362     		str	r3, [r0, #32]	@ float
 1206 000c 4362     		str	r3, [r0, #36]	@ float
  66:Core/Src/FusionAhrs.c ****     ahrs->initialising = true;
 1207              		.loc 1 66 5 is_stmt 1 view .LVU334
  66:Core/Src/FusionAhrs.c ****     ahrs->initialising = true;
 1208              		.loc 1 66 25 is_stmt 0 view .LVU335
 1209 000e 8362     		str	r3, [r0, #40]	@ float
 1210 0010 C362     		str	r3, [r0, #44]	@ float
 1211 0012 0363     		str	r3, [r0, #48]	@ float
  67:Core/Src/FusionAhrs.c ****     ahrs->rampedGain = INITIAL_GAIN;
 1212              		.loc 1 67 5 is_stmt 1 view .LVU336
  67:Core/Src/FusionAhrs.c ****     ahrs->rampedGain = INITIAL_GAIN;
 1213              		.loc 1 67 24 is_stmt 0 view .LVU337
 1214 0014 0122     		movs	r2, #1
 1215 0016 80F83420 		strb	r2, [r0, #52]
  68:Core/Src/FusionAhrs.c ****     ahrs->angularRateRecovery = false;
 1216              		.loc 1 68 5 is_stmt 1 view .LVU338
  68:Core/Src/FusionAhrs.c ****     ahrs->angularRateRecovery = false;
 1217              		.loc 1 68 22 is_stmt 0 view .LVU339
 1218 001a 0A4A     		ldr	r2, .L55
 1219 001c 8263     		str	r2, [r0, #56]	@ float
  69:Core/Src/FusionAhrs.c ****     ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 1220              		.loc 1 69 5 is_stmt 1 view .LVU340
  69:Core/Src/FusionAhrs.c ****     ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 1221              		.loc 1 69 31 is_stmt 0 view .LVU341
 1222 001e 0022     		movs	r2, #0
 1223 0020 80F84020 		strb	r2, [r0, #64]
  70:Core/Src/FusionAhrs.c ****     ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 1224              		.loc 1 70 5 is_stmt 1 view .LVU342
  70:Core/Src/FusionAhrs.c ****     ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 1225              		.loc 1 70 37 is_stmt 0 view .LVU343
 1226 0024 4364     		str	r3, [r0, #68]	@ float
 1227 0026 8364     		str	r3, [r0, #72]	@ float
 1228 0028 C364     		str	r3, [r0, #76]	@ float
  71:Core/Src/FusionAhrs.c ****     ahrs->accelerometerIgnored = false;
 1229              		.loc 1 71 5 is_stmt 1 view .LVU344
  71:Core/Src/FusionAhrs.c ****     ahrs->accelerometerIgnored = false;
 1230              		.loc 1 71 36 is_stmt 0 view .LVU345
 1231 002a 0365     		str	r3, [r0, #80]	@ float
 1232 002c 4365     		str	r3, [r0, #84]	@ float
 1233 002e 8365     		str	r3, [r0, #88]	@ float
  72:Core/Src/FusionAhrs.c ****     ahrs->accelerationRecoveryTrigger = 0;
 1234              		.loc 1 72 5 is_stmt 1 view .LVU346
  72:Core/Src/FusionAhrs.c ****     ahrs->accelerationRecoveryTrigger = 0;
 1235              		.loc 1 72 32 is_stmt 0 view .LVU347
 1236 0030 80F85C20 		strb	r2, [r0, #92]
  73:Core/Src/FusionAhrs.c ****     ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 1237              		.loc 1 73 5 is_stmt 1 view .LVU348
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 38


  73:Core/Src/FusionAhrs.c ****     ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 1238              		.loc 1 73 39 is_stmt 0 view .LVU349
 1239 0034 0266     		str	r2, [r0, #96]
  74:Core/Src/FusionAhrs.c ****     ahrs->magnetometerIgnored = false;
 1240              		.loc 1 74 5 is_stmt 1 view .LVU350
  74:Core/Src/FusionAhrs.c ****     ahrs->magnetometerIgnored = false;
 1241              		.loc 1 74 55 is_stmt 0 view .LVU351
 1242 0036 4369     		ldr	r3, [r0, #20]
  74:Core/Src/FusionAhrs.c ****     ahrs->magnetometerIgnored = false;
 1243              		.loc 1 74 39 view .LVU352
 1244 0038 4366     		str	r3, [r0, #100]
  75:Core/Src/FusionAhrs.c ****     ahrs->magneticRecoveryTrigger = 0;
 1245              		.loc 1 75 5 is_stmt 1 view .LVU353
  75:Core/Src/FusionAhrs.c ****     ahrs->magneticRecoveryTrigger = 0;
 1246              		.loc 1 75 31 is_stmt 0 view .LVU354
 1247 003a 80F86820 		strb	r2, [r0, #104]
  76:Core/Src/FusionAhrs.c ****     ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 1248              		.loc 1 76 5 is_stmt 1 view .LVU355
  76:Core/Src/FusionAhrs.c ****     ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 1249              		.loc 1 76 35 is_stmt 0 view .LVU356
 1250 003e C266     		str	r2, [r0, #108]
  77:Core/Src/FusionAhrs.c **** }
 1251              		.loc 1 77 5 is_stmt 1 view .LVU357
  77:Core/Src/FusionAhrs.c **** }
 1252              		.loc 1 77 35 is_stmt 0 view .LVU358
 1253 0040 0367     		str	r3, [r0, #112]
  78:Core/Src/FusionAhrs.c **** 
 1254              		.loc 1 78 1 view .LVU359
 1255 0042 7047     		bx	lr
 1256              	.L56:
 1257              		.align	2
 1258              	.L55:
 1259 0044 00002041 		.word	1092616192
 1260              		.cfi_endproc
 1261              	.LFE23:
 1263              		.section	.text.FusionAhrsSetSettings,"ax",%progbits
 1264              		.align	1
 1265              		.global	FusionAhrsSetSettings
 1266              		.syntax unified
 1267              		.thumb
 1268              		.thumb_func
 1270              	FusionAhrsSetSettings:
 1271              	.LVL31:
 1272              	.LFB24:
  85:Core/Src/FusionAhrs.c ****     ahrs->settings.convention = settings->convention;
 1273              		.loc 1 85 94 is_stmt 1 view -0
 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 0
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
  85:Core/Src/FusionAhrs.c ****     ahrs->settings.convention = settings->convention;
 1277              		.loc 1 85 94 is_stmt 0 view .LVU361
 1278 0000 38B5     		push	{r3, r4, r5, lr}
 1279              	.LCFI32:
 1280              		.cfi_def_cfa_offset 16
 1281              		.cfi_offset 3, -16
 1282              		.cfi_offset 4, -12
 1283              		.cfi_offset 5, -8
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 39


 1284              		.cfi_offset 14, -4
 1285 0002 2DED028B 		vpush.64	{d8}
 1286              	.LCFI33:
 1287              		.cfi_def_cfa_offset 24
 1288              		.cfi_offset 80, -24
 1289              		.cfi_offset 81, -20
 1290 0006 0446     		mov	r4, r0
 1291 0008 0D46     		mov	r5, r1
  86:Core/Src/FusionAhrs.c ****     ahrs->settings.gain = settings->gain;
 1292              		.loc 1 86 5 is_stmt 1 view .LVU362
  86:Core/Src/FusionAhrs.c ****     ahrs->settings.gain = settings->gain;
 1293              		.loc 1 86 41 is_stmt 0 view .LVU363
 1294 000a 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
  86:Core/Src/FusionAhrs.c ****     ahrs->settings.gain = settings->gain;
 1295              		.loc 1 86 31 view .LVU364
 1296 000c 0370     		strb	r3, [r0]
  87:Core/Src/FusionAhrs.c ****     ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->
 1297              		.loc 1 87 5 is_stmt 1 view .LVU365
  87:Core/Src/FusionAhrs.c ****     ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->
 1298              		.loc 1 87 35 is_stmt 0 view .LVU366
 1299 000e 91ED018A 		vldr.32	s16, [r1, #4]
  87:Core/Src/FusionAhrs.c ****     ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->
 1300              		.loc 1 87 25 view .LVU367
 1301 0012 80ED018A 		vstr.32	s16, [r0, #4]
  88:Core/Src/FusionAhrs.c ****     ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf
 1302              		.loc 1 88 5 is_stmt 1 view .LVU368
  88:Core/Src/FusionAhrs.c ****     ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf
 1303              		.loc 1 88 45 is_stmt 0 view .LVU369
 1304 0016 D1ED027A 		vldr.32	s15, [r1, #8]
  88:Core/Src/FusionAhrs.c ****     ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf
 1305              		.loc 1 88 80 view .LVU370
 1306 001a F5EE407A 		vcmp.f32	s15, #0
 1307 001e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1308 0022 3DD0     		beq	.L64
  88:Core/Src/FusionAhrs.c ****     ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf
 1309              		.loc 1 88 80 discriminator 1 view .LVU371
 1310 0024 9FED2F7A 		vldr.32	s14, .L70
 1311 0028 67EE877A 		vmul.f32	s15, s15, s14
 1312              	.L58:
  88:Core/Src/FusionAhrs.c ****     ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf
 1313              		.loc 1 88 35 discriminator 4 view .LVU372
 1314 002c C4ED027A 		vstr.32	s15, [r4, #8]
  89:Core/Src/FusionAhrs.c ****     ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * 
 1315              		.loc 1 89 5 is_stmt 1 view .LVU373
  89:Core/Src/FusionAhrs.c ****     ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * 
 1316              		.loc 1 89 52 is_stmt 0 view .LVU374
 1317 0030 D5ED037A 		vldr.32	s15, [r5, #12]
  89:Core/Src/FusionAhrs.c ****     ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * 
 1318              		.loc 1 89 94 view .LVU375
 1319 0034 F5EE407A 		vcmp.f32	s15, #0
 1320 0038 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1321 003c 33D1     		bne	.L68
  89:Core/Src/FusionAhrs.c ****     ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * 
 1322              		.loc 1 89 94 discriminator 2 view .LVU376
 1323 003e 9FED2A0A 		vldr.32	s0, .L70+4
 1324              	.LVL32:
 1325              	.L59:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 40


  89:Core/Src/FusionAhrs.c ****     ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * 
 1326              		.loc 1 89 42 discriminator 4 view .LVU377
 1327 0042 84ED030A 		vstr.32	s0, [r4, #12]
  90:Core/Src/FusionAhrs.c ****     ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 1328              		.loc 1 90 5 is_stmt 1 view .LVU378
  90:Core/Src/FusionAhrs.c ****     ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 1329              		.loc 1 90 48 is_stmt 0 view .LVU379
 1330 0046 D5ED047A 		vldr.32	s15, [r5, #16]
  90:Core/Src/FusionAhrs.c ****     ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 1331              		.loc 1 90 86 view .LVU380
 1332 004a F5EE407A 		vcmp.f32	s15, #0
 1333 004e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1334 0052 37D1     		bne	.L69
  90:Core/Src/FusionAhrs.c ****     ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 1335              		.loc 1 90 86 discriminator 2 view .LVU381
 1336 0054 9FED240A 		vldr.32	s0, .L70+4
 1337              	.L60:
  90:Core/Src/FusionAhrs.c ****     ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 1338              		.loc 1 90 38 discriminator 4 view .LVU382
 1339 0058 84ED040A 		vstr.32	s0, [r4, #16]
  91:Core/Src/FusionAhrs.c ****     ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 1340              		.loc 1 91 5 is_stmt 1 view .LVU383
  91:Core/Src/FusionAhrs.c ****     ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 1341              		.loc 1 91 52 is_stmt 0 view .LVU384
 1342 005c 6B69     		ldr	r3, [r5, #20]
  91:Core/Src/FusionAhrs.c ****     ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 1343              		.loc 1 91 42 view .LVU385
 1344 005e 6361     		str	r3, [r4, #20]
  92:Core/Src/FusionAhrs.c ****     ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 1345              		.loc 1 92 5 is_stmt 1 view .LVU386
  92:Core/Src/FusionAhrs.c ****     ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 1346              		.loc 1 92 39 is_stmt 0 view .LVU387
 1347 0060 6366     		str	r3, [r4, #100]
  93:Core/Src/FusionAhrs.c ****     if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable accelerati
 1348              		.loc 1 93 5 is_stmt 1 view .LVU388
  93:Core/Src/FusionAhrs.c ****     if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable accelerati
 1349              		.loc 1 93 35 is_stmt 0 view .LVU389
 1350 0062 2367     		str	r3, [r4, #112]
  94:Core/Src/FusionAhrs.c ****         ahrs->settings.accelerationRejection = FLT_MAX;
 1351              		.loc 1 94 5 is_stmt 1 view .LVU390
  94:Core/Src/FusionAhrs.c ****         ahrs->settings.accelerationRejection = FLT_MAX;
 1352              		.loc 1 94 18 is_stmt 0 view .LVU391
 1353 0064 D5ED017A 		vldr.32	s15, [r5, #4]
  94:Core/Src/FusionAhrs.c ****         ahrs->settings.accelerationRejection = FLT_MAX;
 1354              		.loc 1 94 8 view .LVU392
 1355 0068 F5EE407A 		vcmp.f32	s15, #0
 1356 006c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1357 0070 01D0     		beq	.L61
  94:Core/Src/FusionAhrs.c ****         ahrs->settings.accelerationRejection = FLT_MAX;
 1358              		.loc 1 94 46 discriminator 1 view .LVU393
 1359 0072 6B69     		ldr	r3, [r5, #20]
  94:Core/Src/FusionAhrs.c ****         ahrs->settings.accelerationRejection = FLT_MAX;
 1360              		.loc 1 94 34 discriminator 1 view .LVU394
 1361 0074 13B9     		cbnz	r3, .L62
 1362              	.L61:
  95:Core/Src/FusionAhrs.c ****         ahrs->settings.magneticRejection = FLT_MAX;
 1363              		.loc 1 95 9 is_stmt 1 view .LVU395
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 41


  95:Core/Src/FusionAhrs.c ****         ahrs->settings.magneticRejection = FLT_MAX;
 1364              		.loc 1 95 46 is_stmt 0 view .LVU396
 1365 0076 1D4B     		ldr	r3, .L70+8
 1366 0078 E360     		str	r3, [r4, #12]	@ float
  96:Core/Src/FusionAhrs.c ****     }
 1367              		.loc 1 96 9 is_stmt 1 view .LVU397
  96:Core/Src/FusionAhrs.c ****     }
 1368              		.loc 1 96 42 is_stmt 0 view .LVU398
 1369 007a 2361     		str	r3, [r4, #16]	@ float
 1370              	.L62:
  98:Core/Src/FusionAhrs.c ****         ahrs->rampedGain = ahrs->settings.gain;
 1371              		.loc 1 98 5 is_stmt 1 view .LVU399
  98:Core/Src/FusionAhrs.c ****         ahrs->rampedGain = ahrs->settings.gain;
 1372              		.loc 1 98 13 is_stmt 0 view .LVU400
 1373 007c 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
  98:Core/Src/FusionAhrs.c ****         ahrs->rampedGain = ahrs->settings.gain;
 1374              		.loc 1 98 8 view .LVU401
 1375 0080 0BB9     		cbnz	r3, .L63
  99:Core/Src/FusionAhrs.c ****     }
 1376              		.loc 1 99 9 is_stmt 1 view .LVU402
  99:Core/Src/FusionAhrs.c ****     }
 1377              		.loc 1 99 26 is_stmt 0 view .LVU403
 1378 0082 84ED0E8A 		vstr.32	s16, [r4, #56]
 1379              	.L63:
 101:Core/Src/FusionAhrs.c **** }
 1380              		.loc 1 101 5 is_stmt 1 view .LVU404
 101:Core/Src/FusionAhrs.c **** }
 1381              		.loc 1 101 42 is_stmt 0 view .LVU405
 1382 0086 F2EE047A 		vmov.f32	s15, #1.0e+1
 1383 008a 77EEC87A 		vsub.f32	s15, s15, s16
 101:Core/Src/FusionAhrs.c **** }
 1384              		.loc 1 101 65 view .LVU406
 1385 008e F0EE086A 		vmov.f32	s13, #3.0e+0
 1386 0092 87EEA67A 		vdiv.f32	s14, s15, s13
 101:Core/Src/FusionAhrs.c **** }
 1387              		.loc 1 101 26 view .LVU407
 1388 0096 84ED0F7A 		vstr.32	s14, [r4, #60]
 102:Core/Src/FusionAhrs.c **** 
 1389              		.loc 1 102 1 view .LVU408
 1390 009a BDEC028B 		vldm	sp!, {d8}
 1391              	.LCFI34:
 1392              		.cfi_remember_state
 1393              		.cfi_restore 80
 1394              		.cfi_restore 81
 1395              		.cfi_def_cfa_offset 16
 1396 009e 38BD     		pop	{r3, r4, r5, pc}
 1397              	.LVL33:
 1398              	.L64:
 1399              	.LCFI35:
 1400              		.cfi_restore_state
  88:Core/Src/FusionAhrs.c ****     ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf
 1401              		.loc 1 88 80 discriminator 2 view .LVU409
 1402 00a0 DFED117A 		vldr.32	s15, .L70+4
 1403 00a4 C2E7     		b	.L58
 1404              	.L68:
 1405              	.LVL34:
 1406              	.LBB75:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 42


 1407              	.LBI75:
 127:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 1408              		.loc 2 127 21 is_stmt 1 view .LVU410
 1409              	.LBB76:
 128:Core/Inc/FusionMath.h **** }
 1410              		.loc 2 128 5 view .LVU411
 128:Core/Inc/FusionMath.h **** }
 1411              		.loc 2 128 5 is_stmt 0 view .LVU412
 1412              	.LBE76:
 1413              	.LBE75:
  89:Core/Src/FusionAhrs.c ****     ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * 
 1414              		.loc 1 89 108 discriminator 1 view .LVU413
 1415 00a6 9FED120A 		vldr.32	s0, .L70+12
 1416 00aa 27EE800A 		vmul.f32	s0, s15, s0
 1417 00ae FFF7FEFF 		bl	sinf
 1418              	.LVL35:
  89:Core/Src/FusionAhrs.c ****     ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * 
 1419              		.loc 1 89 96 discriminator 2 view .LVU414
 1420 00b2 F0EE000A 		vmov.f32	s1, #2.0e+0
 1421 00b6 F6EE007A 		vmov.f32	s15, #5.0e-1
 1422 00ba 20EE270A 		vmul.f32	s0, s0, s15
 1423 00be FFF7FEFF 		bl	powf
 1424              	.LVL36:
 1425 00c2 BEE7     		b	.L59
 1426              	.L69:
 1427              	.LVL37:
 1428              	.LBB77:
 1429              	.LBI77:
 127:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 1430              		.loc 2 127 21 is_stmt 1 view .LVU415
 1431              	.LBB78:
 128:Core/Inc/FusionMath.h **** }
 1432              		.loc 2 128 5 view .LVU416
 128:Core/Inc/FusionMath.h **** }
 1433              		.loc 2 128 5 is_stmt 0 view .LVU417
 1434              	.LBE78:
 1435              	.LBE77:
  90:Core/Src/FusionAhrs.c ****     ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 1436              		.loc 1 90 100 discriminator 1 view .LVU418
 1437 00c4 9FED0A0A 		vldr.32	s0, .L70+12
 1438 00c8 27EE800A 		vmul.f32	s0, s15, s0
 1439 00cc FFF7FEFF 		bl	sinf
 1440              	.LVL38:
  90:Core/Src/FusionAhrs.c ****     ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 1441              		.loc 1 90 88 discriminator 2 view .LVU419
 1442 00d0 F0EE000A 		vmov.f32	s1, #2.0e+0
 1443 00d4 F6EE007A 		vmov.f32	s15, #5.0e-1
 1444 00d8 20EE270A 		vmul.f32	s0, s0, s15
 1445 00dc FFF7FEFF 		bl	powf
 1446              	.LVL39:
 1447 00e0 BAE7     		b	.L60
 1448              	.L71:
 1449 00e2 00BF     		.align	2
 1450              	.L70:
 1451 00e4 48E17A3F 		.word	1065017672
 1452 00e8 FFFF7F7F 		.word	2139095039
 1453 00ec FFFF7F7F 		.word	2139095039
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 43


 1454 00f0 35FA8E3C 		.word	1016003125
 1455              		.cfi_endproc
 1456              	.LFE24:
 1458              		.section	.text.FusionAhrsInitialise,"ax",%progbits
 1459              		.align	1
 1460              		.global	FusionAhrsInitialise
 1461              		.syntax unified
 1462              		.thumb
 1463              		.thumb_func
 1465              	FusionAhrsInitialise:
 1466              	.LVL40:
 1467              	.LFB22:
  46:Core/Src/FusionAhrs.c ****     const FusionAhrsSettings settings = {
 1468              		.loc 1 46 51 is_stmt 1 view -0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 24
 1471              		@ frame_needed = 0, uses_anonymous_args = 0
  46:Core/Src/FusionAhrs.c ****     const FusionAhrsSettings settings = {
 1472              		.loc 1 46 51 is_stmt 0 view .LVU421
 1473 0000 30B5     		push	{r4, r5, lr}
 1474              	.LCFI36:
 1475              		.cfi_def_cfa_offset 12
 1476              		.cfi_offset 4, -12
 1477              		.cfi_offset 5, -8
 1478              		.cfi_offset 14, -4
 1479 0002 87B0     		sub	sp, sp, #28
 1480              	.LCFI37:
 1481              		.cfi_def_cfa_offset 40
 1482 0004 0546     		mov	r5, r0
  47:Core/Src/FusionAhrs.c ****             .convention = FusionConventionNwu,
 1483              		.loc 1 47 5 is_stmt 1 view .LVU422
  47:Core/Src/FusionAhrs.c ****             .convention = FusionConventionNwu,
 1484              		.loc 1 47 30 is_stmt 0 view .LVU423
 1485 0006 EC46     		mov	ip, sp
 1486 0008 084C     		ldr	r4, .L74
 1487 000a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1488              	.LVL41:
  47:Core/Src/FusionAhrs.c ****             .convention = FusionConventionNwu,
 1489              		.loc 1 47 30 view .LVU424
 1490 000c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1491 0010 94E80300 		ldm	r4, {r0, r1}
 1492 0014 8CE80300 		stm	ip, {r0, r1}
  55:Core/Src/FusionAhrs.c ****     FusionAhrsReset(ahrs);
 1493              		.loc 1 55 5 is_stmt 1 view .LVU425
 1494 0018 6946     		mov	r1, sp
 1495 001a 2846     		mov	r0, r5
 1496 001c FFF7FEFF 		bl	FusionAhrsSetSettings
 1497              	.LVL42:
  56:Core/Src/FusionAhrs.c **** }
 1498              		.loc 1 56 5 view .LVU426
 1499 0020 2846     		mov	r0, r5
 1500 0022 FFF7FEFF 		bl	FusionAhrsReset
 1501              	.LVL43:
  57:Core/Src/FusionAhrs.c **** 
 1502              		.loc 1 57 1 is_stmt 0 view .LVU427
 1503 0026 07B0     		add	sp, sp, #28
 1504              	.LCFI38:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 44


 1505              		.cfi_def_cfa_offset 12
 1506              		@ sp needed
 1507 0028 30BD     		pop	{r4, r5, pc}
 1508              	.LVL44:
 1509              	.L75:
  57:Core/Src/FusionAhrs.c **** 
 1510              		.loc 1 57 1 view .LVU428
 1511 002a 00BF     		.align	2
 1512              	.L74:
 1513 002c 00000000 		.word	.LANCHOR0
 1514              		.cfi_endproc
 1515              	.LFE22:
 1517              		.section	.text.FusionAhrsUpdate,"ax",%progbits
 1518              		.align	1
 1519              		.global	FusionAhrsUpdate
 1520              		.syntax unified
 1521              		.thumb
 1522              		.thumb_func
 1524              	FusionAhrsUpdate:
 1525              	.LVL45:
 1526              	.LFB25:
 113:Core/Src/FusionAhrs.c **** #define Q ahrs->quaternion.element
 1527              		.loc 1 113 167 is_stmt 1 view -0
 1528              		.cfi_startproc
 1529              		@ args = 0, pretend = 0, frame = 312
 1530              		@ frame_needed = 0, uses_anonymous_args = 0
 113:Core/Src/FusionAhrs.c **** #define Q ahrs->quaternion.element
 1531              		.loc 1 113 167 is_stmt 0 view .LVU430
 1532 0000 70B5     		push	{r4, r5, r6, lr}
 1533              	.LCFI39:
 1534              		.cfi_def_cfa_offset 16
 1535              		.cfi_offset 4, -16
 1536              		.cfi_offset 5, -12
 1537              		.cfi_offset 6, -8
 1538              		.cfi_offset 14, -4
 1539 0002 2DED068B 		vpush.64	{d8, d9, d10}
 1540              	.LCFI40:
 1541              		.cfi_def_cfa_offset 40
 1542              		.cfi_offset 80, -40
 1543              		.cfi_offset 81, -36
 1544              		.cfi_offset 82, -32
 1545              		.cfi_offset 83, -28
 1546              		.cfi_offset 84, -24
 1547              		.cfi_offset 85, -20
 1548 0006 CEB0     		sub	sp, sp, #312
 1549              	.LCFI41:
 1550              		.cfi_def_cfa_offset 352
 1551 0008 0446     		mov	r4, r0
 1552 000a B0EE408A 		vmov.f32	s16, s0
 1553 000e 04AB     		add	r3, sp, #16
 1554 0010 F0EE648A 		vmov.f32	s17, s9
 1555 0014 8DED070A 		vstr.32	s0, [sp, #28]
 1556 0018 CDED080A 		vstr.32	s1, [sp, #32]
 1557 001c 8DED091A 		vstr.32	s2, [sp, #36]
 1558 0020 CDED041A 		vstr.32	s3, [sp, #16]
 1559 0024 8DED052A 		vstr.32	s4, [sp, #20]
 1560 0028 CDED062A 		vstr.32	s5, [sp, #24]
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 45


 1561 002c 8DED013A 		vstr.32	s6, [sp, #4]
 1562 0030 CDED023A 		vstr.32	s7, [sp, #8]
 1563 0034 8DED034A 		vstr.32	s8, [sp, #12]
 117:Core/Src/FusionAhrs.c **** 
 1564              		.loc 1 117 5 is_stmt 1 view .LVU431
 117:Core/Src/FusionAhrs.c **** 
 1565              		.loc 1 117 25 is_stmt 0 view .LVU432
 1566 0038 00F12805 		add	r5, r0, #40
 1567 003c 93E80700 		ldm	r3, {r0, r1, r2}
 1568              	.LVL46:
 117:Core/Src/FusionAhrs.c **** 
 1569              		.loc 1 117 25 view .LVU433
 1570 0040 85E80700 		stm	r5, {r0, r1, r2}
 120:Core/Src/FusionAhrs.c ****         const FusionQuaternion quaternion = ahrs->quaternion;
 1571              		.loc 1 120 5 is_stmt 1 view .LVU434
 120:Core/Src/FusionAhrs.c ****         const FusionQuaternion quaternion = ahrs->quaternion;
 1572              		.loc 1 120 10 is_stmt 0 view .LVU435
 1573 0044 B0EEC07A 		vabs.f32	s14, s0
 120:Core/Src/FusionAhrs.c ****         const FusionQuaternion quaternion = ahrs->quaternion;
 1574              		.loc 1 120 49 view .LVU436
 1575 0048 D4ED027A 		vldr.32	s15, [r4, #8]
 120:Core/Src/FusionAhrs.c ****         const FusionQuaternion quaternion = ahrs->quaternion;
 1576              		.loc 1 120 8 view .LVU437
 1577 004c B4EEE77A 		vcmpe.f32	s14, s15
 1578 0050 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1579 0054 0DDC     		bgt	.L77
 120:Core/Src/FusionAhrs.c ****         const FusionQuaternion quaternion = ahrs->quaternion;
 1580              		.loc 1 120 70 discriminator 1 view .LVU438
 1581 0056 B0EEE07A 		vabs.f32	s14, s1
 120:Core/Src/FusionAhrs.c ****         const FusionQuaternion quaternion = ahrs->quaternion;
 1582              		.loc 1 120 66 discriminator 1 view .LVU439
 1583 005a F4EEC77A 		vcmpe.f32	s15, s14
 1584 005e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1585 0062 06D4     		bmi	.L77
 120:Core/Src/FusionAhrs.c ****         const FusionQuaternion quaternion = ahrs->quaternion;
 1586              		.loc 1 120 130 discriminator 2 view .LVU440
 1587 0064 B0EEC17A 		vabs.f32	s14, s2
 120:Core/Src/FusionAhrs.c ****         const FusionQuaternion quaternion = ahrs->quaternion;
 1588              		.loc 1 120 126 discriminator 2 view .LVU441
 1589 0068 F4EEC77A 		vcmpe.f32	s15, s14
 1590 006c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1591 0070 10D5     		bpl	.L78
 1592              	.L77:
 1593              	.LBB79:
 121:Core/Src/FusionAhrs.c ****         FusionAhrsReset(ahrs);
 1594              		.loc 1 121 9 is_stmt 1 view .LVU442
 121:Core/Src/FusionAhrs.c ****         FusionAhrsReset(ahrs);
 1595              		.loc 1 121 32 is_stmt 0 view .LVU443
 1596 0072 0EAE     		add	r6, sp, #56
 1597 0074 04F11805 		add	r5, r4, #24
 1598 0078 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 1599 007c 86E80F00 		stm	r6, {r0, r1, r2, r3}
 122:Core/Src/FusionAhrs.c ****         ahrs->quaternion = quaternion;
 1600              		.loc 1 122 9 is_stmt 1 view .LVU444
 1601 0080 2046     		mov	r0, r4
 1602 0082 FFF7FEFF 		bl	FusionAhrsReset
 1603              	.LVL47:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 46


 123:Core/Src/FusionAhrs.c ****         ahrs->angularRateRecovery = true;
 1604              		.loc 1 123 9 view .LVU445
 123:Core/Src/FusionAhrs.c ****         ahrs->angularRateRecovery = true;
 1605              		.loc 1 123 26 is_stmt 0 view .LVU446
 1606 0086 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 1607 008a 85E80F00 		stm	r5, {r0, r1, r2, r3}
 124:Core/Src/FusionAhrs.c ****     }
 1608              		.loc 1 124 9 is_stmt 1 view .LVU447
 124:Core/Src/FusionAhrs.c ****     }
 1609              		.loc 1 124 35 is_stmt 0 view .LVU448
 1610 008e 0123     		movs	r3, #1
 1611 0090 84F84030 		strb	r3, [r4, #64]
 1612              	.L78:
 124:Core/Src/FusionAhrs.c ****     }
 1613              		.loc 1 124 35 view .LVU449
 1614              	.LBE79:
 128:Core/Src/FusionAhrs.c ****         ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 1615              		.loc 1 128 5 is_stmt 1 view .LVU450
 128:Core/Src/FusionAhrs.c ****         ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 1616              		.loc 1 128 13 is_stmt 0 view .LVU451
 1617 0094 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 128:Core/Src/FusionAhrs.c ****         ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 1618              		.loc 1 128 8 view .LVU452
 1619 0098 E3B1     		cbz	r3, .L80
 129:Core/Src/FusionAhrs.c ****         if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 1620              		.loc 1 129 9 is_stmt 1 view .LVU453
 129:Core/Src/FusionAhrs.c ****         if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 1621              		.loc 1 129 13 is_stmt 0 view .LVU454
 1622 009a D4ED0E7A 		vldr.32	s15, [r4, #56]
 129:Core/Src/FusionAhrs.c ****         if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 1623              		.loc 1 129 33 view .LVU455
 1624 009e 94ED0F7A 		vldr.32	s14, [r4, #60]
 129:Core/Src/FusionAhrs.c ****         if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 1625              		.loc 1 129 50 view .LVU456
 1626 00a2 27EE287A 		vmul.f32	s14, s14, s17
 129:Core/Src/FusionAhrs.c ****         if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 1627              		.loc 1 129 26 view .LVU457
 1628 00a6 77EEC77A 		vsub.f32	s15, s15, s14
 1629 00aa C4ED0E7A 		vstr.32	s15, [r4, #56]
 130:Core/Src/FusionAhrs.c ****             ahrs->rampedGain = ahrs->settings.gain;
 1630              		.loc 1 130 9 is_stmt 1 view .LVU458
 130:Core/Src/FusionAhrs.c ****             ahrs->rampedGain = ahrs->settings.gain;
 1631              		.loc 1 130 47 is_stmt 0 view .LVU459
 1632 00ae 94ED017A 		vldr.32	s14, [r4, #4]
 130:Core/Src/FusionAhrs.c ****             ahrs->rampedGain = ahrs->settings.gain;
 1633              		.loc 1 130 12 view .LVU460
 1634 00b2 F4EEC77A 		vcmpe.f32	s15, s14
 1635 00b6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1636 00ba 04D4     		bmi	.L81
 130:Core/Src/FusionAhrs.c ****             ahrs->rampedGain = ahrs->settings.gain;
 1637              		.loc 1 130 54 discriminator 1 view .LVU461
 1638 00bc B5EE407A 		vcmp.f32	s14, #0
 1639 00c0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1640 00c4 06D1     		bne	.L80
 1641              	.L81:
 131:Core/Src/FusionAhrs.c ****             ahrs->initialising = false;
 1642              		.loc 1 131 13 is_stmt 1 view .LVU462
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 47


 131:Core/Src/FusionAhrs.c ****             ahrs->initialising = false;
 1643              		.loc 1 131 30 is_stmt 0 view .LVU463
 1644 00c6 84ED0E7A 		vstr.32	s14, [r4, #56]
 132:Core/Src/FusionAhrs.c ****             ahrs->angularRateRecovery = false;
 1645              		.loc 1 132 13 is_stmt 1 view .LVU464
 132:Core/Src/FusionAhrs.c ****             ahrs->angularRateRecovery = false;
 1646              		.loc 1 132 32 is_stmt 0 view .LVU465
 1647 00ca 0023     		movs	r3, #0
 1648 00cc 84F83430 		strb	r3, [r4, #52]
 133:Core/Src/FusionAhrs.c ****         }
 1649              		.loc 1 133 13 is_stmt 1 view .LVU466
 133:Core/Src/FusionAhrs.c ****         }
 1650              		.loc 1 133 39 is_stmt 0 view .LVU467
 1651 00d0 84F84030 		strb	r3, [r4, #64]
 1652              	.L80:
 138:Core/Src/FusionAhrs.c **** 		
 1653              		.loc 1 138 5 is_stmt 1 view .LVU468
 138:Core/Src/FusionAhrs.c **** 		
 1654              		.loc 1 138 38 is_stmt 0 view .LVU469
 1655 00d4 2046     		mov	r0, r4
 1656 00d6 FFF7FEFF 		bl	HalfGravity
 1657              	.LVL48:
 1658 00da 8DED1E0A 		vstr.32	s0, [sp, #120]
 1659 00de CDED1F0A 		vstr.32	s1, [sp, #124]
 1660 00e2 8DED201A 		vstr.32	s2, [sp, #128]
 141:Core/Src/FusionAhrs.c ****     ahrs->accelerometerIgnored = true;
 1661              		.loc 1 141 5 is_stmt 1 view .LVU470
 141:Core/Src/FusionAhrs.c ****     ahrs->accelerometerIgnored = true;
 1662              		.loc 1 141 18 is_stmt 0 view .LVU471
 1663 00e6 0023     		movs	r3, #0
 1664 00e8 1B93     		str	r3, [sp, #108]	@ float
 1665 00ea 1C93     		str	r3, [sp, #112]	@ float
 1666 00ec 1D93     		str	r3, [sp, #116]	@ float
 142:Core/Src/FusionAhrs.c ****     if (FusionVectorIsZero(accelerometer) == false) {
 1667              		.loc 1 142 5 is_stmt 1 view .LVU472
 142:Core/Src/FusionAhrs.c ****     if (FusionVectorIsZero(accelerometer) == false) {
 1668              		.loc 1 142 32 is_stmt 0 view .LVU473
 1669 00ee 0123     		movs	r3, #1
 1670 00f0 84F85C30 		strb	r3, [r4, #92]
 143:Core/Src/FusionAhrs.c **** 
 1671              		.loc 1 143 5 is_stmt 1 view .LVU474
 1672              	.LBB80:
 1673              	.LBI80:
 191:Core/Inc/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 1674              		.loc 2 191 20 view .LVU475
 1675              	.LBB81:
 192:Core/Inc/FusionMath.h **** }
 1676              		.loc 2 192 5 view .LVU476
 192:Core/Inc/FusionMath.h **** }
 1677              		.loc 2 192 24 is_stmt 0 view .LVU477
 1678 00f4 DDED047A 		vldr.32	s15, [sp, #16]
 192:Core/Inc/FusionMath.h **** }
 1679              		.loc 2 192 63 view .LVU478
 1680 00f8 F5EE407A 		vcmp.f32	s15, #0
 1681 00fc F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1682 0100 0FD1     		bne	.L101
 192:Core/Inc/FusionMath.h **** }
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 48


 1683              		.loc 2 192 51 discriminator 1 view .LVU479
 1684 0102 DDED057A 		vldr.32	s15, [sp, #20]
 192:Core/Inc/FusionMath.h **** }
 1685              		.loc 2 192 36 discriminator 1 view .LVU480
 1686 0106 F5EE407A 		vcmp.f32	s15, #0
 1687 010a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1688 010e 71D1     		bne	.L102
 192:Core/Inc/FusionMath.h **** }
 1689              		.loc 2 192 78 discriminator 3 view .LVU481
 1690 0110 DDED067A 		vldr.32	s15, [sp, #24]
 192:Core/Inc/FusionMath.h **** }
 1691              		.loc 2 192 63 discriminator 3 view .LVU482
 1692 0114 F5EE407A 		vcmp.f32	s15, #0
 1693 0118 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1694 011c 6CD0     		beq	.L103
 192:Core/Inc/FusionMath.h **** }
 1695              		.loc 2 192 63 discriminator 6 view .LVU483
 1696 011e 0023     		movs	r3, #0
 1697 0120 00E0     		b	.L82
 1698              	.L101:
 1699 0122 0023     		movs	r3, #0
 1700              	.L82:
 1701              	.LBE81:
 1702              	.LBE80:
 143:Core/Src/FusionAhrs.c **** 
 1703              		.loc 1 143 8 discriminator 1 view .LVU484
 1704 0124 002B     		cmp	r3, #0
 1705 0126 45D1     		bne	.L83
 146:Core/Src/FusionAhrs.c **** 
 1706              		.loc 1 146 9 is_stmt 1 view .LVU485
 146:Core/Src/FusionAhrs.c **** 
 1707              		.loc 1 146 43 is_stmt 0 view .LVU486
 1708 0128 9DED040A 		vldr.32	s0, [sp, #16]
 1709 012c DDED050A 		vldr.32	s1, [sp, #20]
 1710 0130 9DED061A 		vldr.32	s2, [sp, #24]
 1711 0134 FFF7FEFF 		bl	FusionVectorNormalise
 1712              	.LVL49:
 1713 0138 8DED210A 		vstr.32	s0, [sp, #132]
 1714 013c CDED220A 		vstr.32	s1, [sp, #136]
 1715 0140 8DED231A 		vstr.32	s2, [sp, #140]
 146:Core/Src/FusionAhrs.c **** 
 1716              		.loc 1 146 43 discriminator 1 view .LVU487
 1717 0144 DDED1E1A 		vldr.32	s3, [sp, #120]
 1718 0148 9DED1F2A 		vldr.32	s4, [sp, #124]
 1719 014c DDED202A 		vldr.32	s5, [sp, #128]
 1720 0150 FFF7FEFF 		bl	Feedback
 1721              	.LVL50:
 1722 0154 84ED110A 		vstr.32	s0, [r4, #68]
 1723 0158 C4ED120A 		vstr.32	s1, [r4, #72]
 1724 015c 84ED131A 		vstr.32	s2, [r4, #76]
 149:Core/Src/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 1725              		.loc 1 149 9 is_stmt 1 view .LVU488
 149:Core/Src/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 1726              		.loc 1 149 18 is_stmt 0 view .LVU489
 1727 0160 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 149:Core/Src/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 1728              		.loc 1 149 12 view .LVU490
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 49


 1729 0164 43B9     		cbnz	r3, .L84
 149:Core/Src/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 1730              		.loc 1 149 47 discriminator 1 view .LVU491
 1731 0166 FFF7FEFF 		bl	FusionVectorMagnitudeSquared
 1732              	.LVL51:
 149:Core/Src/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 1733              		.loc 1 149 126 discriminator 1 view .LVU492
 1734 016a D4ED037A 		vldr.32	s15, [r4, #12]
 149:Core/Src/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 1735              		.loc 1 149 42 discriminator 1 view .LVU493
 1736 016e B4EEE70A 		vcmpe.f32	s0, s15
 1737 0172 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1738 0176 41D8     		bhi	.L109
 1739              	.L84:
 150:Core/Src/FusionAhrs.c ****             ahrs->accelerationRecoveryTrigger -= 9;
 1740              		.loc 1 150 13 is_stmt 1 view .LVU494
 150:Core/Src/FusionAhrs.c ****             ahrs->accelerationRecoveryTrigger -= 9;
 1741              		.loc 1 150 40 is_stmt 0 view .LVU495
 1742 0178 0023     		movs	r3, #0
 1743 017a 84F85C30 		strb	r3, [r4, #92]
 151:Core/Src/FusionAhrs.c ****         } else {
 1744              		.loc 1 151 13 is_stmt 1 view .LVU496
 151:Core/Src/FusionAhrs.c ****         } else {
 1745              		.loc 1 151 17 is_stmt 0 view .LVU497
 1746 017e 236E     		ldr	r3, [r4, #96]
 151:Core/Src/FusionAhrs.c ****         } else {
 1747              		.loc 1 151 47 view .LVU498
 1748 0180 093B     		subs	r3, r3, #9
 1749 0182 2366     		str	r3, [r4, #96]
 1750              	.L87:
 157:Core/Src/FusionAhrs.c ****             ahrs->accelerationRecoveryTimeout = 0;
 1751              		.loc 1 157 9 is_stmt 1 view .LVU499
 157:Core/Src/FusionAhrs.c ****             ahrs->accelerationRecoveryTimeout = 0;
 1752              		.loc 1 157 17 is_stmt 0 view .LVU500
 1753 0184 236E     		ldr	r3, [r4, #96]
 157:Core/Src/FusionAhrs.c ****             ahrs->accelerationRecoveryTimeout = 0;
 1754              		.loc 1 157 53 view .LVU501
 1755 0186 626E     		ldr	r2, [r4, #100]
 157:Core/Src/FusionAhrs.c ****             ahrs->accelerationRecoveryTimeout = 0;
 1756              		.loc 1 157 12 view .LVU502
 1757 0188 9342     		cmp	r3, r2
 1758 018a 3BDD     		ble	.L88
 158:Core/Src/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 1759              		.loc 1 158 13 is_stmt 1 view .LVU503
 158:Core/Src/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 1760              		.loc 1 158 47 is_stmt 0 view .LVU504
 1761 018c 0022     		movs	r2, #0
 1762 018e 6266     		str	r2, [r4, #100]
 159:Core/Src/FusionAhrs.c ****         } else {
 1763              		.loc 1 159 13 is_stmt 1 view .LVU505
 159:Core/Src/FusionAhrs.c ****         } else {
 1764              		.loc 1 159 40 is_stmt 0 view .LVU506
 1765 0190 84F85C20 		strb	r2, [r4, #92]
 1766              	.L89:
 163:Core/Src/FusionAhrs.c **** 
 1767              		.loc 1 163 9 is_stmt 1 view .LVU507
 163:Core/Src/FusionAhrs.c **** 
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 50


 1768              		.loc 1 163 103 is_stmt 0 view .LVU508
 1769 0194 6269     		ldr	r2, [r4, #20]
 1770              	.LVL52:
 1771              	.LBB83:
 1772              	.LBI83:
 299:Core/Src/FusionAhrs.c **** 
 300:Core/Src/FusionAhrs.c **** /**
 301:Core/Src/FusionAhrs.c ****  * @brief Returns a value limited to maximum and minimum.
 302:Core/Src/FusionAhrs.c ****  * @param value Value.
 303:Core/Src/FusionAhrs.c ****  * @param min Minimum value.
 304:Core/Src/FusionAhrs.c ****  * @param max Maximum value.
 305:Core/Src/FusionAhrs.c ****  * @return Value limited to maximum and minimum.
 306:Core/Src/FusionAhrs.c ****  */
 307:Core/Src/FusionAhrs.c **** static inline int Clamp(const int value, const int min, const int max) {
 1773              		.loc 1 307 19 is_stmt 1 view .LVU509
 1774              	.LBB84:
 308:Core/Src/FusionAhrs.c ****     if (value < min) {
 1775              		.loc 1 308 5 view .LVU510
 1776              		.loc 1 308 8 is_stmt 0 view .LVU511
 1777 0196 002B     		cmp	r3, #0
 1778 0198 37DB     		blt	.L104
 309:Core/Src/FusionAhrs.c ****         return min;
 310:Core/Src/FusionAhrs.c ****     }
 311:Core/Src/FusionAhrs.c ****     if (value > max) {
 1779              		.loc 1 311 5 is_stmt 1 view .LVU512
 1780              		.loc 1 311 8 is_stmt 0 view .LVU513
 1781 019a 9342     		cmp	r3, r2
 1782 019c 00DC     		bgt	.L90
 312:Core/Src/FusionAhrs.c ****         return max;
 313:Core/Src/FusionAhrs.c ****     }
 314:Core/Src/FusionAhrs.c ****     return value;
 1783              		.loc 1 314 12 view .LVU514
 1784 019e 1A46     		mov	r2, r3
 1785              	.LVL53:
 1786              	.L90:
 1787              		.loc 1 314 12 view .LVU515
 1788              	.LBE84:
 1789              	.LBE83:
 163:Core/Src/FusionAhrs.c **** 
 1790              		.loc 1 163 43 discriminator 1 view .LVU516
 1791 01a0 2266     		str	r2, [r4, #96]
 166:Core/Src/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 1792              		.loc 1 166 9 is_stmt 1 view .LVU517
 166:Core/Src/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 1793              		.loc 1 166 17 is_stmt 0 view .LVU518
 1794 01a2 94F85C30 		ldrb	r3, [r4, #92]	@ zero_extendqisi2
 166:Core/Src/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 1795              		.loc 1 166 12 view .LVU519
 1796 01a6 2BB9     		cbnz	r3, .L83
 167:Core/Src/FusionAhrs.c ****         }
 1797              		.loc 1 167 13 is_stmt 1 view .LVU520
 167:Core/Src/FusionAhrs.c ****         }
 1798              		.loc 1 167 39 is_stmt 0 view .LVU521
 1799 01a8 1BAB     		add	r3, sp, #108
 1800 01aa 04F14402 		add	r2, r4, #68
 1801 01ae 07CA     		ldm	r2, {r0, r1, r2}
 1802 01b0 83E80700 		stm	r3, {r0, r1, r2}
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 51


 1803              	.L83:
 172:Core/Src/FusionAhrs.c ****     ahrs->magnetometerIgnored = true;
 1804              		.loc 1 172 5 is_stmt 1 view .LVU522
 172:Core/Src/FusionAhrs.c ****     ahrs->magnetometerIgnored = true;
 1805              		.loc 1 172 18 is_stmt 0 view .LVU523
 1806 01b4 0023     		movs	r3, #0
 1807 01b6 1893     		str	r3, [sp, #96]	@ float
 1808 01b8 1993     		str	r3, [sp, #100]	@ float
 1809 01ba 1A93     		str	r3, [sp, #104]	@ float
 173:Core/Src/FusionAhrs.c **** 		
 1810              		.loc 1 173 5 is_stmt 1 view .LVU524
 173:Core/Src/FusionAhrs.c **** 		
 1811              		.loc 1 173 31 is_stmt 0 view .LVU525
 1812 01bc 0123     		movs	r3, #1
 1813 01be 84F86830 		strb	r3, [r4, #104]
 175:Core/Src/FusionAhrs.c **** 
 1814              		.loc 1 175 5 is_stmt 1 view .LVU526
 1815              	.LBB86:
 1816              	.LBI86:
 191:Core/Inc/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 1817              		.loc 2 191 20 view .LVU527
 1818              	.LBB87:
 192:Core/Inc/FusionMath.h **** }
 1819              		.loc 2 192 5 view .LVU528
 192:Core/Inc/FusionMath.h **** }
 1820              		.loc 2 192 24 is_stmt 0 view .LVU529
 1821 01c2 DDED017A 		vldr.32	s15, [sp, #4]
 192:Core/Inc/FusionMath.h **** }
 1822              		.loc 2 192 63 view .LVU530
 1823 01c6 F5EE407A 		vcmp.f32	s15, #0
 1824 01ca F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1825 01ce 1ED1     		bne	.L105
 192:Core/Inc/FusionMath.h **** }
 1826              		.loc 2 192 51 discriminator 1 view .LVU531
 1827 01d0 DDED027A 		vldr.32	s15, [sp, #8]
 192:Core/Inc/FusionMath.h **** }
 1828              		.loc 2 192 36 discriminator 1 view .LVU532
 1829 01d4 F5EE407A 		vcmp.f32	s15, #0
 1830 01d8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1831 01dc 40F05281 		bne	.L106
 192:Core/Inc/FusionMath.h **** }
 1832              		.loc 2 192 78 discriminator 3 view .LVU533
 1833 01e0 DDED037A 		vldr.32	s15, [sp, #12]
 192:Core/Inc/FusionMath.h **** }
 1834              		.loc 2 192 63 discriminator 3 view .LVU534
 1835 01e4 F5EE407A 		vcmp.f32	s15, #0
 1836 01e8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1837 01ec 00F04C81 		beq	.L107
 192:Core/Inc/FusionMath.h **** }
 1838              		.loc 2 192 63 discriminator 6 view .LVU535
 1839 01f0 0023     		movs	r3, #0
 1840 01f2 0DE0     		b	.L91
 1841              	.L102:
 192:Core/Inc/FusionMath.h **** }
 1842              		.loc 2 192 63 discriminator 6 view .LVU536
 1843              	.LBE87:
 1844              	.LBE86:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 52


 1845              	.LBB90:
 1846              	.LBB82:
 1847 01f4 0023     		movs	r3, #0
 1848 01f6 95E7     		b	.L82
 1849              	.L103:
 192:Core/Inc/FusionMath.h **** }
 1850              		.loc 2 192 63 discriminator 5 view .LVU537
 1851 01f8 0123     		movs	r3, #1
 1852 01fa 93E7     		b	.L82
 1853              	.L109:
 192:Core/Inc/FusionMath.h **** }
 1854              		.loc 2 192 63 discriminator 5 view .LVU538
 1855              	.LBE82:
 1856              	.LBE90:
 153:Core/Src/FusionAhrs.c ****         }
 1857              		.loc 1 153 13 is_stmt 1 view .LVU539
 153:Core/Src/FusionAhrs.c ****         }
 1858              		.loc 1 153 17 is_stmt 0 view .LVU540
 1859 01fc 236E     		ldr	r3, [r4, #96]
 153:Core/Src/FusionAhrs.c ****         }
 1860              		.loc 1 153 47 view .LVU541
 1861 01fe 0133     		adds	r3, r3, #1
 1862 0200 2366     		str	r3, [r4, #96]
 1863 0202 BFE7     		b	.L87
 1864              	.L88:
 161:Core/Src/FusionAhrs.c ****         }
 1865              		.loc 1 161 13 is_stmt 1 view .LVU542
 161:Core/Src/FusionAhrs.c ****         }
 1866              		.loc 1 161 63 is_stmt 0 view .LVU543
 1867 0204 6269     		ldr	r2, [r4, #20]
 161:Core/Src/FusionAhrs.c ****         }
 1868              		.loc 1 161 47 view .LVU544
 1869 0206 6266     		str	r2, [r4, #100]
 1870 0208 C4E7     		b	.L89
 1871              	.LVL54:
 1872              	.L104:
 1873              	.LBB91:
 1874              	.LBB85:
 309:Core/Src/FusionAhrs.c ****     }
 1875              		.loc 1 309 16 view .LVU545
 1876 020a 0022     		movs	r2, #0
 1877              	.LVL55:
 309:Core/Src/FusionAhrs.c ****     }
 1878              		.loc 1 309 16 view .LVU546
 1879 020c C8E7     		b	.L90
 1880              	.LVL56:
 1881              	.L105:
 309:Core/Src/FusionAhrs.c ****     }
 1882              		.loc 1 309 16 view .LVU547
 1883              	.LBE85:
 1884              	.LBE91:
 1885              	.LBB92:
 1886              	.LBB88:
 192:Core/Inc/FusionMath.h **** }
 1887              		.loc 2 192 63 discriminator 6 view .LVU548
 1888 020e 0023     		movs	r3, #0
 1889              	.L91:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 53


 1890              	.LBE88:
 1891              	.LBE92:
 175:Core/Src/FusionAhrs.c **** 
 1892              		.loc 1 175 8 discriminator 1 view .LVU549
 1893 0210 002B     		cmp	r3, #0
 1894 0212 65D1     		bne	.L92
 1895              	.LBB93:
 178:Core/Src/FusionAhrs.c **** 			
 1896              		.loc 1 178 9 is_stmt 1 view .LVU550
 178:Core/Src/FusionAhrs.c **** 			
 1897              		.loc 1 178 43 is_stmt 0 view .LVU551
 1898 0214 2046     		mov	r0, r4
 1899 0216 FFF7FEFF 		bl	HalfMagnetic
 1900              	.LVL57:
 1901 021a B0EE40AA 		vmov.f32	s20, s0
 1902 021e F0EE609A 		vmov.f32	s19, s1
 1903 0222 B0EE419A 		vmov.f32	s18, s2
 1904 0226 8DED0E0A 		vstr.32	s0, [sp, #56]
 1905 022a CDED0F0A 		vstr.32	s1, [sp, #60]
 1906 022e 8DED101A 		vstr.32	s2, [sp, #64]
 181:Core/Src/FusionAhrs.c **** 			
 1907              		.loc 1 181 9 is_stmt 1 view .LVU552
 181:Core/Src/FusionAhrs.c **** 			
 1908              		.loc 1 181 42 is_stmt 0 view .LVU553
 1909 0232 DDED011A 		vldr.32	s3, [sp, #4]
 1910 0236 9DED022A 		vldr.32	s4, [sp, #8]
 1911 023a DDED032A 		vldr.32	s5, [sp, #12]
 1912 023e 9DED1E0A 		vldr.32	s0, [sp, #120]
 1913 0242 DDED1F0A 		vldr.32	s1, [sp, #124]
 1914 0246 9DED201A 		vldr.32	s2, [sp, #128]
 1915 024a FFF7FEFF 		bl	FusionVectorCrossProduct
 1916              	.LVL58:
 1917 024e 8DED240A 		vstr.32	s0, [sp, #144]
 1918 0252 CDED250A 		vstr.32	s1, [sp, #148]
 1919 0256 8DED261A 		vstr.32	s2, [sp, #152]
 181:Core/Src/FusionAhrs.c **** 			
 1920              		.loc 1 181 42 discriminator 1 view .LVU554
 1921 025a FFF7FEFF 		bl	FusionVectorNormalise
 1922              	.LVL59:
 1923 025e 8DED270A 		vstr.32	s0, [sp, #156]
 1924 0262 CDED280A 		vstr.32	s1, [sp, #160]
 1925 0266 8DED291A 		vstr.32	s2, [sp, #164]
 181:Core/Src/FusionAhrs.c **** 			
 1926              		.loc 1 181 42 discriminator 2 view .LVU555
 1927 026a F0EE4A1A 		vmov.f32	s3, s20
 1928 026e B0EE692A 		vmov.f32	s4, s19
 1929 0272 F0EE492A 		vmov.f32	s5, s18
 1930 0276 FFF7FEFF 		bl	Feedback
 1931              	.LVL60:
 1932 027a 84ED140A 		vstr.32	s0, [r4, #80]
 1933 027e C4ED150A 		vstr.32	s1, [r4, #84]
 1934 0282 84ED161A 		vstr.32	s2, [r4, #88]
 184:Core/Src/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 1935              		.loc 1 184 9 is_stmt 1 view .LVU556
 184:Core/Src/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 1936              		.loc 1 184 18 is_stmt 0 view .LVU557
 1937 0286 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 54


 184:Core/Src/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 1938              		.loc 1 184 12 view .LVU558
 1939 028a 4BB9     		cbnz	r3, .L93
 184:Core/Src/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 1940              		.loc 1 184 47 discriminator 1 view .LVU559
 1941 028c FFF7FEFF 		bl	FusionVectorMagnitudeSquared
 1942              	.LVL61:
 184:Core/Src/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 1943              		.loc 1 184 125 discriminator 1 view .LVU560
 1944 0290 D4ED047A 		vldr.32	s15, [r4, #16]
 184:Core/Src/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 1945              		.loc 1 184 42 discriminator 1 view .LVU561
 1946 0294 B4EEE70A 		vcmpe.f32	s0, s15
 1947 0298 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1948 029c 00F2F680 		bhi	.L110
 1949              	.L93:
 185:Core/Src/FusionAhrs.c ****             ahrs->magneticRecoveryTrigger -= 9;
 1950              		.loc 1 185 13 is_stmt 1 view .LVU562
 185:Core/Src/FusionAhrs.c ****             ahrs->magneticRecoveryTrigger -= 9;
 1951              		.loc 1 185 39 is_stmt 0 view .LVU563
 1952 02a0 0023     		movs	r3, #0
 1953 02a2 84F86830 		strb	r3, [r4, #104]
 186:Core/Src/FusionAhrs.c ****         } else {
 1954              		.loc 1 186 13 is_stmt 1 view .LVU564
 186:Core/Src/FusionAhrs.c ****         } else {
 1955              		.loc 1 186 17 is_stmt 0 view .LVU565
 1956 02a6 E36E     		ldr	r3, [r4, #108]
 186:Core/Src/FusionAhrs.c ****         } else {
 1957              		.loc 1 186 43 view .LVU566
 1958 02a8 093B     		subs	r3, r3, #9
 1959 02aa E366     		str	r3, [r4, #108]
 1960              	.L96:
 192:Core/Src/FusionAhrs.c ****             ahrs->magneticRecoveryTimeout = 0;
 1961              		.loc 1 192 9 is_stmt 1 view .LVU567
 192:Core/Src/FusionAhrs.c ****             ahrs->magneticRecoveryTimeout = 0;
 1962              		.loc 1 192 17 is_stmt 0 view .LVU568
 1963 02ac E36E     		ldr	r3, [r4, #108]
 192:Core/Src/FusionAhrs.c ****             ahrs->magneticRecoveryTimeout = 0;
 1964              		.loc 1 192 49 view .LVU569
 1965 02ae 226F     		ldr	r2, [r4, #112]
 192:Core/Src/FusionAhrs.c ****             ahrs->magneticRecoveryTimeout = 0;
 1966              		.loc 1 192 12 view .LVU570
 1967 02b0 9342     		cmp	r3, r2
 1968 02b2 40F3EF80 		ble	.L97
 193:Core/Src/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 1969              		.loc 1 193 13 is_stmt 1 view .LVU571
 193:Core/Src/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 1970              		.loc 1 193 43 is_stmt 0 view .LVU572
 1971 02b6 0022     		movs	r2, #0
 1972 02b8 2267     		str	r2, [r4, #112]
 194:Core/Src/FusionAhrs.c ****         } else {
 1973              		.loc 1 194 13 is_stmt 1 view .LVU573
 194:Core/Src/FusionAhrs.c ****         } else {
 1974              		.loc 1 194 39 is_stmt 0 view .LVU574
 1975 02ba 84F86820 		strb	r2, [r4, #104]
 1976              	.L98:
 198:Core/Src/FusionAhrs.c **** 
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 55


 1977              		.loc 1 198 9 is_stmt 1 view .LVU575
 198:Core/Src/FusionAhrs.c **** 
 1978              		.loc 1 198 95 is_stmt 0 view .LVU576
 1979 02be 6269     		ldr	r2, [r4, #20]
 1980              	.LVL62:
 1981              	.LBB94:
 1982              	.LBI94:
 307:Core/Src/FusionAhrs.c ****     if (value < min) {
 1983              		.loc 1 307 19 is_stmt 1 view .LVU577
 1984              	.LBB95:
 308:Core/Src/FusionAhrs.c ****         return min;
 1985              		.loc 1 308 5 view .LVU578
 308:Core/Src/FusionAhrs.c ****         return min;
 1986              		.loc 1 308 8 is_stmt 0 view .LVU579
 1987 02c0 002B     		cmp	r3, #0
 1988 02c2 C0F2EA80 		blt	.L108
 311:Core/Src/FusionAhrs.c ****         return max;
 1989              		.loc 1 311 5 is_stmt 1 view .LVU580
 311:Core/Src/FusionAhrs.c ****         return max;
 1990              		.loc 1 311 8 is_stmt 0 view .LVU581
 1991 02c6 9342     		cmp	r3, r2
 1992 02c8 00DC     		bgt	.L99
 1993              		.loc 1 314 12 view .LVU582
 1994 02ca 1A46     		mov	r2, r3
 1995              	.LVL63:
 1996              	.L99:
 1997              		.loc 1 314 12 view .LVU583
 1998              	.LBE95:
 1999              	.LBE94:
 198:Core/Src/FusionAhrs.c **** 
 2000              		.loc 1 198 39 discriminator 1 view .LVU584
 2001 02cc E266     		str	r2, [r4, #108]
 201:Core/Src/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 2002              		.loc 1 201 9 is_stmt 1 view .LVU585
 201:Core/Src/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 2003              		.loc 1 201 17 is_stmt 0 view .LVU586
 2004 02ce 94F86830 		ldrb	r3, [r4, #104]	@ zero_extendqisi2
 201:Core/Src/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 2005              		.loc 1 201 12 view .LVU587
 2006 02d2 2BB9     		cbnz	r3, .L92
 202:Core/Src/FusionAhrs.c ****         }
 2007              		.loc 1 202 13 is_stmt 1 view .LVU588
 202:Core/Src/FusionAhrs.c ****         }
 2008              		.loc 1 202 38 is_stmt 0 view .LVU589
 2009 02d4 18AB     		add	r3, sp, #96
 2010 02d6 04F15002 		add	r2, r4, #80
 2011 02da 07CA     		ldm	r2, {r0, r1, r2}
 2012 02dc 83E80700 		stm	r3, {r0, r1, r2}
 2013              	.L92:
 202:Core/Src/FusionAhrs.c ****         }
 2014              		.loc 1 202 38 view .LVU590
 2015              	.LBE93:
 207:Core/Src/FusionAhrs.c **** 
 2016              		.loc 1 207 5 is_stmt 1 view .LVU591
 2017              	.LVL64:
 2018              	.LBB98:
 2019              	.LBI98:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 56


 240:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 2020              		.loc 2 240 28 view .LVU592
 2021              	.LBB99:
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 2022              		.loc 2 241 5 view .LVU593
 242:Core/Inc/FusionMath.h ****             .y = vector.axis.y * scalar,
 2023              		.loc 2 242 32 is_stmt 0 view .LVU594
 2024 02e0 DFED6F7A 		vldr.32	s15, .L112
 2025 02e4 28EE278A 		vmul.f32	s16, s16, s15
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 2026              		.loc 2 241 24 view .LVU595
 2027 02e8 0EAD     		add	r5, sp, #56
 2028 02ea 85ED008A 		vstr.32	s16, [r5]
 243:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 2029              		.loc 2 243 29 view .LVU596
 2030 02ee 9DED086A 		vldr.32	s12, [sp, #32]
 243:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 2031              		.loc 2 243 32 view .LVU597
 2032 02f2 26EE276A 		vmul.f32	s12, s12, s15
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 2033              		.loc 2 241 24 view .LVU598
 2034 02f6 85ED016A 		vstr.32	s12, [r5, #4]
 244:Core/Inc/FusionMath.h ****     }};
 2035              		.loc 2 244 29 view .LVU599
 2036 02fa DDED096A 		vldr.32	s13, [sp, #36]
 244:Core/Inc/FusionMath.h ****     }};
 2037              		.loc 2 244 32 view .LVU600
 2038 02fe 66EEA76A 		vmul.f32	s13, s13, s15
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 2039              		.loc 2 241 24 view .LVU601
 2040 0302 C5ED026A 		vstr.32	s13, [r5, #8]
 246:Core/Inc/FusionMath.h **** }
 2041              		.loc 2 246 5 is_stmt 1 view .LVU602
 246:Core/Inc/FusionMath.h **** }
 2042              		.loc 2 246 12 is_stmt 0 view .LVU603
 2043 0306 4BAB     		add	r3, sp, #300
 2044 0308 95E80700 		ldm	r5, {r0, r1, r2}
 2045 030c 83E80700 		stm	r3, {r0, r1, r2}
 2046 0310 15AE     		add	r6, sp, #84
 2047 0312 86E80700 		stm	r6, {r0, r1, r2}
 2048              	.LVL65:
 246:Core/Inc/FusionMath.h **** }
 2049              		.loc 2 246 12 view .LVU604
 2050              	.LBE99:
 2051              	.LBE98:
 210:Core/Src/FusionAhrs.c **** 
 2052              		.loc 1 210 5 is_stmt 1 view .LVU605
 2053              	.LBB100:
 2054              	.LBI100:
 201:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 2055              		.loc 2 201 28 view .LVU606
 2056              	.LBB101:
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 2057              		.loc 2 202 5 view .LVU607
 203:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y + vectorB.axis.y,
 2058              		.loc 2 203 33 is_stmt 0 view .LVU608
 2059 0316 9DED1B0A 		vldr.32	s0, [sp, #108]
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 57


 2060 031a DDED187A 		vldr.32	s15, [sp, #96]
 2061 031e 30EE270A 		vadd.f32	s0, s0, s15
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 2062              		.loc 2 202 24 view .LVU609
 2063 0322 85ED000A 		vstr.32	s0, [r5]
 204:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z + vectorB.axis.z,
 2064              		.loc 2 204 33 view .LVU610
 2065 0326 DDED1C7A 		vldr.32	s15, [sp, #112]
 2066 032a 9DED197A 		vldr.32	s14, [sp, #100]
 2067 032e 77EE877A 		vadd.f32	s15, s15, s14
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 2068              		.loc 2 202 24 view .LVU611
 2069 0332 C5ED017A 		vstr.32	s15, [r5, #4]
 205:Core/Inc/FusionMath.h ****     }};
 2070              		.loc 2 205 33 view .LVU612
 2071 0336 DDED1D5A 		vldr.32	s11, [sp, #116]
 2072 033a 9DED1A7A 		vldr.32	s14, [sp, #104]
 2073 033e 75EE875A 		vadd.f32	s11, s11, s14
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 2074              		.loc 2 202 24 view .LVU613
 2075 0342 C5ED025A 		vstr.32	s11, [r5, #8]
 207:Core/Inc/FusionMath.h **** }
 2076              		.loc 2 207 5 is_stmt 1 view .LVU614
 207:Core/Inc/FusionMath.h **** }
 2077              		.loc 2 207 12 is_stmt 0 view .LVU615
 2078 0346 48AB     		add	r3, sp, #288
 2079 0348 95E80700 		ldm	r5, {r0, r1, r2}
 2080 034c 83E80700 		stm	r3, {r0, r1, r2}
 2081 0350 2AAE     		add	r6, sp, #168
 2082 0352 86E80700 		stm	r6, {r0, r1, r2}
 2083              	.LBE101:
 2084              	.LBE100:
 210:Core/Src/FusionAhrs.c **** 
 2085              		.loc 1 210 48 discriminator 1 view .LVU616
 2086 0356 94ED0E7A 		vldr.32	s14, [r4, #56]
 2087              	.LVL66:
 2088              	.LBB102:
 2089              	.LBI102:
 240:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 2090              		.loc 2 240 28 is_stmt 1 view .LVU617
 2091              	.LBB103:
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 2092              		.loc 2 241 5 view .LVU618
 242:Core/Inc/FusionMath.h ****             .y = vector.axis.y * scalar,
 2093              		.loc 2 242 32 is_stmt 0 view .LVU619
 2094 035a 27EE000A 		vmul.f32	s0, s14, s0
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 2095              		.loc 2 241 24 view .LVU620
 2096 035e 85ED000A 		vstr.32	s0, [r5]
 243:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 2097              		.loc 2 243 32 view .LVU621
 2098 0362 67EE277A 		vmul.f32	s15, s14, s15
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 2099              		.loc 2 241 24 view .LVU622
 2100 0366 C5ED017A 		vstr.32	s15, [r5, #4]
 244:Core/Inc/FusionMath.h ****     }};
 2101              		.loc 2 244 32 view .LVU623
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 58


 2102 036a 27EE257A 		vmul.f32	s14, s14, s11
 2103              	.LVL67:
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 2104              		.loc 2 241 24 view .LVU624
 2105 036e 85ED027A 		vstr.32	s14, [r5, #8]
 246:Core/Inc/FusionMath.h **** }
 2106              		.loc 2 246 5 is_stmt 1 view .LVU625
 246:Core/Inc/FusionMath.h **** }
 2107              		.loc 2 246 12 is_stmt 0 view .LVU626
 2108 0372 45AB     		add	r3, sp, #276
 2109 0374 95E80700 		ldm	r5, {r0, r1, r2}
 2110 0378 83E80700 		stm	r3, {r0, r1, r2}
 2111 037c 2DAE     		add	r6, sp, #180
 2112 037e 86E80700 		stm	r6, {r0, r1, r2}
 2113              	.LVL68:
 246:Core/Inc/FusionMath.h **** }
 2114              		.loc 2 246 12 view .LVU627
 2115              	.LBE103:
 2116              	.LBE102:
 2117              	.LBB104:
 2118              	.LBI104:
 201:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 2119              		.loc 2 201 28 is_stmt 1 view .LVU628
 2120              	.LBB105:
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 2121              		.loc 2 202 5 view .LVU629
 203:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y + vectorB.axis.y,
 2122              		.loc 2 203 33 is_stmt 0 view .LVU630
 2123 0382 30EE080A 		vadd.f32	s0, s0, s16
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 2124              		.loc 2 202 24 view .LVU631
 2125 0386 85ED000A 		vstr.32	s0, [r5]
 204:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z + vectorB.axis.z,
 2126              		.loc 2 204 33 view .LVU632
 2127 038a 77EE867A 		vadd.f32	s15, s15, s12
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 2128              		.loc 2 202 24 view .LVU633
 2129 038e C5ED017A 		vstr.32	s15, [r5, #4]
 205:Core/Inc/FusionMath.h ****     }};
 2130              		.loc 2 205 33 view .LVU634
 2131 0392 37EE267A 		vadd.f32	s14, s14, s13
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 2132              		.loc 2 202 24 view .LVU635
 2133 0396 85ED027A 		vstr.32	s14, [r5, #8]
 207:Core/Inc/FusionMath.h **** }
 2134              		.loc 2 207 5 is_stmt 1 view .LVU636
 207:Core/Inc/FusionMath.h **** }
 2135              		.loc 2 207 12 is_stmt 0 view .LVU637
 2136 039a 42AB     		add	r3, sp, #264
 2137 039c 95E80700 		ldm	r5, {r0, r1, r2}
 2138 03a0 83E80700 		stm	r3, {r0, r1, r2}
 2139 03a4 12AE     		add	r6, sp, #72
 2140 03a6 86E80700 		stm	r6, {r0, r1, r2}
 2141              	.LBE105:
 2142              	.LBE104:
 213:Core/Src/FusionAhrs.c **** 
 2143              		.loc 1 213 5 is_stmt 1 view .LVU638
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 59


 2144              	.LVL69:
 2145              	.LBB106:
 2146              	.LBI106:
 240:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 2147              		.loc 2 240 28 view .LVU639
 2148              	.LBB107:
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 2149              		.loc 2 241 5 view .LVU640
 242:Core/Inc/FusionMath.h ****             .y = vector.axis.y * scalar,
 2150              		.loc 2 242 32 is_stmt 0 view .LVU641
 2151 03aa 28EE800A 		vmul.f32	s0, s17, s0
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 2152              		.loc 2 241 24 view .LVU642
 2153 03ae 85ED000A 		vstr.32	s0, [r5]
 243:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 2154              		.loc 2 243 32 view .LVU643
 2155 03b2 68EEA77A 		vmul.f32	s15, s17, s15
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 2156              		.loc 2 241 24 view .LVU644
 2157 03b6 C5ED017A 		vstr.32	s15, [r5, #4]
 244:Core/Inc/FusionMath.h ****     }};
 2158              		.loc 2 244 32 view .LVU645
 2159 03ba 68EE878A 		vmul.f32	s17, s17, s14
 2160              	.LVL70:
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 2161              		.loc 2 241 24 view .LVU646
 2162 03be C5ED028A 		vstr.32	s17, [r5, #8]
 246:Core/Inc/FusionMath.h **** }
 2163              		.loc 2 246 5 is_stmt 1 view .LVU647
 246:Core/Inc/FusionMath.h **** }
 2164              		.loc 2 246 12 is_stmt 0 view .LVU648
 2165 03c2 3FAB     		add	r3, sp, #252
 2166 03c4 95E80700 		ldm	r5, {r0, r1, r2}
 2167 03c8 83E80700 		stm	r3, {r0, r1, r2}
 2168 03cc 30AE     		add	r6, sp, #192
 2169 03ce 86E80700 		stm	r6, {r0, r1, r2}
 2170              	.LVL71:
 246:Core/Inc/FusionMath.h **** }
 2171              		.loc 2 246 12 view .LVU649
 2172              	.LBE107:
 2173              	.LBE106:
 213:Core/Src/FusionAhrs.c **** 
 2174              		.loc 1 213 24 discriminator 1 view .LVU650
 2175 03d2 9DED302A 		vldr.32	s4, [sp, #192]
 2176 03d6 DDED312A 		vldr.32	s5, [sp, #196]
 2177 03da 9DED323A 		vldr.32	s6, [sp, #200]
 2178 03de 94ED060A 		vldr.32	s0, [r4, #24]
 2179 03e2 D4ED070A 		vldr.32	s1, [r4, #28]
 2180 03e6 94ED081A 		vldr.32	s2, [r4, #32]
 2181 03ea D4ED091A 		vldr.32	s3, [r4, #36]
 2182 03ee FFF7FEFF 		bl	FusionQuaternionMultiplyVector
 2183              	.LVL72:
 2184 03f2 8DED330A 		vstr.32	s0, [sp, #204]
 2185 03f6 CDED340A 		vstr.32	s1, [sp, #208]
 2186 03fa 8DED351A 		vstr.32	s2, [sp, #212]
 2187 03fe CDED361A 		vstr.32	s3, [sp, #216]
 2188 0402 0DF1280E 		add	lr, sp, #40
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 60


 2189 0406 04F1180C 		add	ip, r4, #24
 2190 040a 9CE80F00 		ldm	ip, {r0, r1, r2, r3}
 2191 040e 8EE80F00 		stm	lr, {r0, r1, r2, r3}
 2192              	.LBB108:
 2193              	.LBI108:
 334:Core/Inc/FusionMath.h ****     const FusionQuaternion result = {.element = {
 2194              		.loc 2 334 32 is_stmt 1 view .LVU651
 2195              	.LBB109:
 335:Core/Inc/FusionMath.h ****             .w = quaternionA.element.w + quaternionB.element.w,
 2196              		.loc 2 335 5 view .LVU652
 336:Core/Inc/FusionMath.h ****             .x = quaternionA.element.x + quaternionB.element.x,
 2197              		.loc 2 336 37 is_stmt 0 view .LVU653
 2198 0412 DEED007A 		vldr.32	s15, [lr]
 336:Core/Inc/FusionMath.h ****             .x = quaternionA.element.x + quaternionB.element.x,
 2199              		.loc 2 336 40 view .LVU654
 2200 0416 77EE807A 		vadd.f32	s15, s15, s0
 335:Core/Inc/FusionMath.h ****             .w = quaternionA.element.w + quaternionB.element.w,
 2201              		.loc 2 335 28 view .LVU655
 2202 041a C5ED007A 		vstr.32	s15, [r5]
 337:Core/Inc/FusionMath.h ****             .y = quaternionA.element.y + quaternionB.element.y,
 2203              		.loc 2 337 37 view .LVU656
 2204 041e DEED017A 		vldr.32	s15, [lr, #4]
 337:Core/Inc/FusionMath.h ****             .y = quaternionA.element.y + quaternionB.element.y,
 2205              		.loc 2 337 40 view .LVU657
 2206 0422 77EEA07A 		vadd.f32	s15, s15, s1
 335:Core/Inc/FusionMath.h ****             .w = quaternionA.element.w + quaternionB.element.w,
 2207              		.loc 2 335 28 view .LVU658
 2208 0426 C5ED017A 		vstr.32	s15, [r5, #4]
 338:Core/Inc/FusionMath.h ****             .z = quaternionA.element.z + quaternionB.element.z,
 2209              		.loc 2 338 37 view .LVU659
 2210 042a DEED027A 		vldr.32	s15, [lr, #8]
 338:Core/Inc/FusionMath.h ****             .z = quaternionA.element.z + quaternionB.element.z,
 2211              		.loc 2 338 40 view .LVU660
 2212 042e 77EE817A 		vadd.f32	s15, s15, s2
 335:Core/Inc/FusionMath.h ****             .w = quaternionA.element.w + quaternionB.element.w,
 2213              		.loc 2 335 28 view .LVU661
 2214 0432 C5ED027A 		vstr.32	s15, [r5, #8]
 339:Core/Inc/FusionMath.h ****     }};
 2215              		.loc 2 339 37 view .LVU662
 2216 0436 DEED037A 		vldr.32	s15, [lr, #12]
 339:Core/Inc/FusionMath.h ****     }};
 2217              		.loc 2 339 40 view .LVU663
 2218 043a 77EEA17A 		vadd.f32	s15, s15, s3
 335:Core/Inc/FusionMath.h ****             .w = quaternionA.element.w + quaternionB.element.w,
 2219              		.loc 2 335 28 view .LVU664
 2220 043e C5ED037A 		vstr.32	s15, [r5, #12]
 341:Core/Inc/FusionMath.h **** }
 2221              		.loc 2 341 5 is_stmt 1 view .LVU665
 341:Core/Inc/FusionMath.h **** }
 2222              		.loc 2 341 12 is_stmt 0 view .LVU666
 2223 0442 0DF1EC0E 		add	lr, sp, #236
 2224 0446 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 2225 044a 8EE80F00 		stm	lr, {r0, r1, r2, r3}
 2226 044e 37AD     		add	r5, sp, #220
 2227 0450 85E80F00 		stm	r5, {r0, r1, r2, r3}
 2228              	.LBE109:
 2229              	.LBE108:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 61


 213:Core/Src/FusionAhrs.c **** 
 2230              		.loc 1 213 24 discriminator 2 view .LVU667
 2231 0454 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 216:Core/Src/FusionAhrs.c **** #undef Q
 2232              		.loc 1 216 5 is_stmt 1 view .LVU668
 216:Core/Src/FusionAhrs.c **** #undef Q
 2233              		.loc 1 216 24 is_stmt 0 view .LVU669
 2234 0458 94ED060A 		vldr.32	s0, [r4, #24]
 2235 045c D4ED070A 		vldr.32	s1, [r4, #28]
 2236 0460 94ED081A 		vldr.32	s2, [r4, #32]
 2237 0464 D4ED091A 		vldr.32	s3, [r4, #36]
 2238 0468 FFF7FEFF 		bl	FusionQuaternionNormalise
 2239              	.LVL73:
 2240 046c 84ED060A 		vstr.32	s0, [r4, #24]
 2241 0470 C4ED070A 		vstr.32	s1, [r4, #28]
 2242 0474 84ED081A 		vstr.32	s2, [r4, #32]
 2243 0478 C4ED091A 		vstr.32	s3, [r4, #36]
 218:Core/Src/FusionAhrs.c **** 
 2244              		.loc 1 218 1 view .LVU670
 2245 047c 4EB0     		add	sp, sp, #312
 2246              	.LCFI42:
 2247              		.cfi_remember_state
 2248              		.cfi_def_cfa_offset 40
 2249              		@ sp needed
 2250 047e BDEC068B 		vldm	sp!, {d8-d10}
 2251              	.LCFI43:
 2252              		.cfi_restore 84
 2253              		.cfi_restore 85
 2254              		.cfi_restore 82
 2255              		.cfi_restore 83
 2256              		.cfi_restore 80
 2257              		.cfi_restore 81
 2258              		.cfi_def_cfa_offset 16
 2259 0482 70BD     		pop	{r4, r5, r6, pc}
 2260              	.LVL74:
 2261              	.L106:
 2262              	.LCFI44:
 2263              		.cfi_restore_state
 2264              	.LBB110:
 2265              	.LBB89:
 192:Core/Inc/FusionMath.h **** }
 2266              		.loc 2 192 63 discriminator 6 view .LVU671
 2267 0484 0023     		movs	r3, #0
 2268 0486 C3E6     		b	.L91
 2269              	.L107:
 192:Core/Inc/FusionMath.h **** }
 2270              		.loc 2 192 63 discriminator 5 view .LVU672
 2271 0488 0123     		movs	r3, #1
 2272 048a C1E6     		b	.L91
 2273              	.L110:
 192:Core/Inc/FusionMath.h **** }
 2274              		.loc 2 192 63 discriminator 5 view .LVU673
 2275              	.LBE89:
 2276              	.LBE110:
 2277              	.LBB111:
 188:Core/Src/FusionAhrs.c ****         }
 2278              		.loc 1 188 13 is_stmt 1 view .LVU674
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 62


 188:Core/Src/FusionAhrs.c ****         }
 2279              		.loc 1 188 17 is_stmt 0 view .LVU675
 2280 048c E36E     		ldr	r3, [r4, #108]
 188:Core/Src/FusionAhrs.c ****         }
 2281              		.loc 1 188 43 view .LVU676
 2282 048e 0133     		adds	r3, r3, #1
 2283 0490 E366     		str	r3, [r4, #108]
 2284 0492 0BE7     		b	.L96
 2285              	.L97:
 196:Core/Src/FusionAhrs.c ****         }
 2286              		.loc 1 196 13 is_stmt 1 view .LVU677
 196:Core/Src/FusionAhrs.c ****         }
 2287              		.loc 1 196 59 is_stmt 0 view .LVU678
 2288 0494 6269     		ldr	r2, [r4, #20]
 196:Core/Src/FusionAhrs.c ****         }
 2289              		.loc 1 196 43 view .LVU679
 2290 0496 2267     		str	r2, [r4, #112]
 2291 0498 11E7     		b	.L98
 2292              	.LVL75:
 2293              	.L108:
 2294              	.LBB97:
 2295              	.LBB96:
 309:Core/Src/FusionAhrs.c ****     }
 2296              		.loc 1 309 16 view .LVU680
 2297 049a 0022     		movs	r2, #0
 2298              	.LVL76:
 309:Core/Src/FusionAhrs.c ****     }
 2299              		.loc 1 309 16 view .LVU681
 2300 049c 16E7     		b	.L99
 2301              	.L113:
 2302 049e 00BF     		.align	2
 2303              	.L112:
 2304 04a0 35FA0E3C 		.word	1007614517
 2305              	.LBE96:
 2306              	.LBE97:
 2307              	.LBE111:
 2308              		.cfi_endproc
 2309              	.LFE25:
 2311              		.section	.text.FusionAhrsUpdateExternalHeading,"ax",%progbits
 2312              		.align	1
 2313              		.global	FusionAhrsUpdateExternalHeading
 2314              		.syntax unified
 2315              		.thumb
 2316              		.thumb_func
 2318              	FusionAhrsUpdateExternalHeading:
 2319              	.LVL77:
 2320              	.LFB31:
 315:Core/Src/FusionAhrs.c **** }
 316:Core/Src/FusionAhrs.c **** 
 317:Core/Src/FusionAhrs.c **** /**
 318:Core/Src/FusionAhrs.c ****  * @brief Updates the AHRS algorithm using the gyroscope and accelerometer
 319:Core/Src/FusionAhrs.c ****  * measurements only.
 320:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 321:Core/Src/FusionAhrs.c ****  * @param gyroscope Gyroscope measurement in degrees per second.
 322:Core/Src/FusionAhrs.c ****  * @param accelerometer Accelerometer measurement in g.
 323:Core/Src/FusionAhrs.c ****  * @param deltaTime Delta time in seconds.
 324:Core/Src/FusionAhrs.c ****  */
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 63


 325:Core/Src/FusionAhrs.c **** void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const Fus
 326:Core/Src/FusionAhrs.c **** 
 327:Core/Src/FusionAhrs.c ****     // Update AHRS algorithm
 328:Core/Src/FusionAhrs.c ****     FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 329:Core/Src/FusionAhrs.c **** 
 330:Core/Src/FusionAhrs.c ****     // Zero heading during initialisation
 331:Core/Src/FusionAhrs.c ****     if (ahrs->initialising == true) {
 332:Core/Src/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 333:Core/Src/FusionAhrs.c ****     }
 334:Core/Src/FusionAhrs.c **** }
 335:Core/Src/FusionAhrs.c **** 
 336:Core/Src/FusionAhrs.c **** /**
 337:Core/Src/FusionAhrs.c ****  * @brief Updates the AHRS algorithm using the gyroscope, accelerometer, and
 338:Core/Src/FusionAhrs.c ****  * heading measurements.
 339:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 340:Core/Src/FusionAhrs.c ****  * @param gyroscope Gyroscope measurement in degrees per second.
 341:Core/Src/FusionAhrs.c ****  * @param accelerometer Accelerometer measurement in g.
 342:Core/Src/FusionAhrs.c ****  * @param heading Heading measurement in degrees.
 343:Core/Src/FusionAhrs.c ****  * @param deltaTime Delta time in seconds.
 344:Core/Src/FusionAhrs.c ****  */
 345:Core/Src/FusionAhrs.c **** void FusionAhrsUpdateExternalHeading(FusionAhrs *const ahrs, const FusionVector gyroscope, const Fu
 2321              		.loc 1 345 170 is_stmt 1 view -0
 2322              		.cfi_startproc
 2323              		@ args = 0, pretend = 0, frame = 40
 2324              		@ frame_needed = 0, uses_anonymous_args = 0
 2325              		.loc 1 345 170 is_stmt 0 view .LVU683
 2326 0000 10B5     		push	{r4, lr}
 2327              	.LCFI45:
 2328              		.cfi_def_cfa_offset 8
 2329              		.cfi_offset 4, -8
 2330              		.cfi_offset 14, -4
 2331 0002 2DED068B 		vpush.64	{d8, d9, d10}
 2332              	.LCFI46:
 2333              		.cfi_def_cfa_offset 32
 2334              		.cfi_offset 80, -32
 2335              		.cfi_offset 81, -28
 2336              		.cfi_offset 82, -24
 2337              		.cfi_offset 83, -20
 2338              		.cfi_offset 84, -16
 2339              		.cfi_offset 85, -12
 2340 0006 8AB0     		sub	sp, sp, #40
 2341              	.LCFI47:
 2342              		.cfi_def_cfa_offset 72
 2343 0008 0446     		mov	r4, r0
 2344 000a B0EE438A 		vmov.f32	s16, s6
 2345 000e B0EE63AA 		vmov.f32	s20, s7
 2346 0012 8DED030A 		vstr.32	s0, [sp, #12]
 2347 0016 CDED040A 		vstr.32	s1, [sp, #16]
 2348 001a 8DED051A 		vstr.32	s2, [sp, #20]
 2349 001e CDED001A 		vstr.32	s3, [sp]
 2350 0022 8DED012A 		vstr.32	s4, [sp, #4]
 2351 0026 CDED022A 		vstr.32	s5, [sp, #8]
 346:Core/Src/FusionAhrs.c **** #define Q ahrs->quaternion.element
 347:Core/Src/FusionAhrs.c **** 
 348:Core/Src/FusionAhrs.c ****     // Calculate roll
 349:Core/Src/FusionAhrs.c ****     const float roll = atan2f(Q.w * Q.x + Q.y * Q.z, 0.5f - Q.y * Q.y - Q.x * Q.x);
 2352              		.loc 1 349 5 is_stmt 1 view .LVU684
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 64


 2353              		.loc 1 349 32 is_stmt 0 view .LVU685
 2354 002a 90ED060A 		vldr.32	s0, [r0, #24]
 2355              		.loc 1 349 38 view .LVU686
 2356 002e D0ED077A 		vldr.32	s15, [r0, #28]
 2357              		.loc 1 349 35 view .LVU687
 2358 0032 20EE270A 		vmul.f32	s0, s0, s15
 2359              		.loc 1 349 44 view .LVU688
 2360 0036 90ED087A 		vldr.32	s14, [r0, #32]
 2361              		.loc 1 349 50 view .LVU689
 2362 003a D0ED096A 		vldr.32	s13, [r0, #36]
 2363              		.loc 1 349 47 view .LVU690
 2364 003e 67EE266A 		vmul.f32	s13, s14, s13
 2365              		.loc 1 349 65 view .LVU691
 2366 0042 27EE077A 		vmul.f32	s14, s14, s14
 2367              		.loc 1 349 59 view .LVU692
 2368 0046 F6EE000A 		vmov.f32	s1, #5.0e-1
 2369 004a 70EEC70A 		vsub.f32	s1, s1, s14
 2370              		.loc 1 349 77 view .LVU693
 2371 004e 67EEA77A 		vmul.f32	s15, s15, s15
 2372              		.loc 1 349 24 view .LVU694
 2373 0052 70EEE70A 		vsub.f32	s1, s1, s15
 2374 0056 30EE260A 		vadd.f32	s0, s0, s13
 2375 005a FFF7FEFF 		bl	atan2f
 2376              	.LVL78:
 2377              		.loc 1 349 24 view .LVU695
 2378 005e F0EE409A 		vmov.f32	s19, s0
 2379              	.LVL79:
 350:Core/Src/FusionAhrs.c **** 
 351:Core/Src/FusionAhrs.c ****     // Calculate magnetometer
 352:Core/Src/FusionAhrs.c ****     const float headingRadians = FusionDegreesToRadians(heading);
 2380              		.loc 1 352 5 is_stmt 1 view .LVU696
 2381              	.LBB112:
 2382              	.LBI112:
 127:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 2383              		.loc 2 127 21 view .LVU697
 2384              	.LBB113:
 128:Core/Inc/FusionMath.h **** }
 2385              		.loc 2 128 5 view .LVU698
 128:Core/Inc/FusionMath.h **** }
 2386              		.loc 2 128 20 is_stmt 0 view .LVU699
 2387 0062 DFED1D7A 		vldr.32	s15, .L116
 2388 0066 28EE278A 		vmul.f32	s16, s16, s15
 2389              	.LVL80:
 128:Core/Inc/FusionMath.h **** }
 2390              		.loc 2 128 20 view .LVU700
 2391              	.LBE113:
 2392              	.LBE112:
 353:Core/Src/FusionAhrs.c ****     const float sinHeadingRadians = sinf(headingRadians);
 2393              		.loc 1 353 5 is_stmt 1 view .LVU701
 2394              		.loc 1 353 37 is_stmt 0 view .LVU702
 2395 006a B0EE480A 		vmov.f32	s0, s16
 2396              	.LVL81:
 2397              		.loc 1 353 37 view .LVU703
 2398 006e FFF7FEFF 		bl	sinf
 2399              	.LVL82:
 2400 0072 B0EE409A 		vmov.f32	s18, s0
 2401              	.LVL83:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 65


 354:Core/Src/FusionAhrs.c ****     const FusionVector magnetometer = {.axis = {
 2402              		.loc 1 354 5 is_stmt 1 view .LVU704
 355:Core/Src/FusionAhrs.c ****             .x = cosf(headingRadians),
 2403              		.loc 1 355 18 is_stmt 0 view .LVU705
 2404 0076 B0EE480A 		vmov.f32	s0, s16
 2405              	.LVL84:
 2406              		.loc 1 355 18 view .LVU706
 2407 007a FFF7FEFF 		bl	cosf
 2408              	.LVL85:
 2409 007e F0EE408A 		vmov.f32	s17, s0
 354:Core/Src/FusionAhrs.c ****     const FusionVector magnetometer = {.axis = {
 2410              		.loc 1 354 24 view .LVU707
 2411 0082 8DED070A 		vstr.32	s0, [sp, #28]
 356:Core/Src/FusionAhrs.c ****             .y = -1.0f * cosf(roll) * sinHeadingRadians,
 2412              		.loc 1 356 26 view .LVU708
 2413 0086 B0EE690A 		vmov.f32	s0, s19
 2414 008a FFF7FEFF 		bl	cosf
 2415              	.LVL86:
 2416              		.loc 1 356 37 discriminator 1 view .LVU709
 2417 008e 20EE498A 		vnmul.f32	s16, s0, s18
 2418              	.LVL87:
 354:Core/Src/FusionAhrs.c ****     const FusionVector magnetometer = {.axis = {
 2419              		.loc 1 354 24 view .LVU710
 2420 0092 8DED088A 		vstr.32	s16, [sp, #32]
 357:Core/Src/FusionAhrs.c ****             .z = sinHeadingRadians * sinf(roll),
 2421              		.loc 1 357 38 view .LVU711
 2422 0096 B0EE690A 		vmov.f32	s0, s19
 2423 009a FFF7FEFF 		bl	sinf
 2424              	.LVL88:
 2425              		.loc 1 357 36 discriminator 1 view .LVU712
 2426 009e 20EE094A 		vmul.f32	s8, s0, s18
 354:Core/Src/FusionAhrs.c ****             .x = cosf(headingRadians),
 2427              		.loc 1 354 24 view .LVU713
 2428 00a2 8DED094A 		vstr.32	s8, [sp, #36]
 358:Core/Src/FusionAhrs.c ****     }};
 359:Core/Src/FusionAhrs.c **** 
 360:Core/Src/FusionAhrs.c ****     // Update AHRS algorithm
 361:Core/Src/FusionAhrs.c ****     FusionAhrsUpdate(ahrs, gyroscope, accelerometer, magnetometer, deltaTime);
 2429              		.loc 1 361 5 is_stmt 1 view .LVU714
 2430 00a6 F0EE4A4A 		vmov.f32	s9, s20
 2431 00aa B0EE683A 		vmov.f32	s6, s17
 2432 00ae F0EE483A 		vmov.f32	s7, s16
 2433 00b2 DDED001A 		vldr.32	s3, [sp]
 2434 00b6 9DED012A 		vldr.32	s4, [sp, #4]
 2435 00ba DDED022A 		vldr.32	s5, [sp, #8]
 2436 00be 9DED030A 		vldr.32	s0, [sp, #12]
 2437 00c2 DDED040A 		vldr.32	s1, [sp, #16]
 2438 00c6 9DED051A 		vldr.32	s2, [sp, #20]
 2439 00ca 2046     		mov	r0, r4
 2440 00cc FFF7FEFF 		bl	FusionAhrsUpdate
 2441              	.LVL89:
 362:Core/Src/FusionAhrs.c **** #undef Q
 363:Core/Src/FusionAhrs.c **** }
 2442              		.loc 1 363 1 is_stmt 0 view .LVU715
 2443 00d0 0AB0     		add	sp, sp, #40
 2444              	.LCFI48:
 2445              		.cfi_def_cfa_offset 32
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 66


 2446              		@ sp needed
 2447 00d2 BDEC068B 		vldm	sp!, {d8-d10}
 2448              	.LCFI49:
 2449              		.cfi_restore 84
 2450              		.cfi_restore 85
 2451              		.cfi_restore 82
 2452              		.cfi_restore 83
 2453              		.cfi_restore 80
 2454              		.cfi_restore 81
 2455              		.cfi_def_cfa_offset 8
 2456              	.LVL90:
 2457              		.loc 1 363 1 view .LVU716
 2458 00d6 10BD     		pop	{r4, pc}
 2459              	.LVL91:
 2460              	.L117:
 2461              		.loc 1 363 1 view .LVU717
 2462              		.align	2
 2463              	.L116:
 2464 00d8 35FA8E3C 		.word	1016003125
 2465              		.cfi_endproc
 2466              	.LFE31:
 2468              		.section	.text.FusionAhrsGetQuaternion,"ax",%progbits
 2469              		.align	1
 2470              		.global	FusionAhrsGetQuaternion
 2471              		.syntax unified
 2472              		.thumb
 2473              		.thumb_func
 2475              	FusionAhrsGetQuaternion:
 2476              	.LVL92:
 2477              	.LFB32:
 364:Core/Src/FusionAhrs.c **** 
 365:Core/Src/FusionAhrs.c **** /**
 366:Core/Src/FusionAhrs.c ****  * @brief Returns the quaternion describing the sensor relative to the Earth.
 367:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 368:Core/Src/FusionAhrs.c ****  * @return Quaternion describing the sensor relative to the Earth.
 369:Core/Src/FusionAhrs.c ****  */
 370:Core/Src/FusionAhrs.c **** FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 2478              		.loc 1 370 72 is_stmt 1 view -0
 2479              		.cfi_startproc
 2480              		@ args = 0, pretend = 0, frame = 32
 2481              		@ frame_needed = 0, uses_anonymous_args = 0
 2482              		@ link register save eliminated.
 2483              		.loc 1 370 72 is_stmt 0 view .LVU719
 2484 0000 88B0     		sub	sp, sp, #32
 2485              	.LCFI50:
 2486              		.cfi_def_cfa_offset 32
 371:Core/Src/FusionAhrs.c ****     return ahrs->quaternion;
 2487              		.loc 1 371 5 is_stmt 1 view .LVU720
 2488              		.loc 1 371 16 is_stmt 0 view .LVU721
 2489 0002 1830     		adds	r0, r0, #24
 2490              	.LVL93:
 2491              		.loc 1 371 16 view .LVU722
 2492 0004 0FC8     		ldm	r0, {r0, r1, r2, r3}
 2493              	.LVL94:
 2494              		.loc 1 371 16 view .LVU723
 2495 0006 0DF1200C 		add	ip, sp, #32
 2496 000a 0CE90F00 		stmdb	ip, {r0, r1, r2, r3}
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 67


 372:Core/Src/FusionAhrs.c **** }
 2497              		.loc 1 372 1 view .LVU724
 2498 000e 9DED040A 		vldr.32	s0, [sp, #16]
 2499 0012 DDED050A 		vldr.32	s1, [sp, #20]
 2500 0016 9DED061A 		vldr.32	s2, [sp, #24]
 2501 001a DDED071A 		vldr.32	s3, [sp, #28]
 2502 001e 08B0     		add	sp, sp, #32
 2503              	.LCFI51:
 2504              		.cfi_def_cfa_offset 0
 2505              		@ sp needed
 2506 0020 7047     		bx	lr
 2507              		.cfi_endproc
 2508              	.LFE32:
 2510              		.section	.text.FusionAhrsSetQuaternion,"ax",%progbits
 2511              		.align	1
 2512              		.global	FusionAhrsSetQuaternion
 2513              		.syntax unified
 2514              		.thumb
 2515              		.thumb_func
 2517              	FusionAhrsSetQuaternion:
 2518              	.LVL95:
 2519              	.LFB33:
 373:Core/Src/FusionAhrs.c **** 
 374:Core/Src/FusionAhrs.c **** /**
 375:Core/Src/FusionAhrs.c ****  * @brief Sets the quaternion describing the sensor relative to the Earth.
 376:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 377:Core/Src/FusionAhrs.c ****  * @param quaternion Quaternion describing the sensor relative to the Earth.
 378:Core/Src/FusionAhrs.c ****  */
 379:Core/Src/FusionAhrs.c **** void FusionAhrsSetQuaternion(FusionAhrs *const ahrs, const FusionQuaternion quaternion) {
 2520              		.loc 1 379 89 is_stmt 1 view -0
 2521              		.cfi_startproc
 2522              		@ args = 0, pretend = 0, frame = 16
 2523              		@ frame_needed = 0, uses_anonymous_args = 0
 2524              		@ link register save eliminated.
 2525              		.loc 1 379 89 is_stmt 0 view .LVU726
 2526 0000 84B0     		sub	sp, sp, #16
 2527              	.LCFI52:
 2528              		.cfi_def_cfa_offset 16
 2529 0002 8DED000A 		vstr.32	s0, [sp]
 2530 0006 CDED010A 		vstr.32	s1, [sp, #4]
 2531 000a 8DED021A 		vstr.32	s2, [sp, #8]
 2532 000e CDED031A 		vstr.32	s3, [sp, #12]
 380:Core/Src/FusionAhrs.c ****     ahrs->quaternion = quaternion;
 2533              		.loc 1 380 5 is_stmt 1 view .LVU727
 2534              		.loc 1 380 22 is_stmt 0 view .LVU728
 2535 0012 00F1180C 		add	ip, r0, #24
 2536 0016 04AB     		add	r3, sp, #16
 2537 0018 13E90F00 		ldmdb	r3, {r0, r1, r2, r3}
 2538              	.LVL96:
 2539              		.loc 1 380 22 view .LVU729
 2540 001c 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 381:Core/Src/FusionAhrs.c **** }
 2541              		.loc 1 381 1 view .LVU730
 2542 0020 04B0     		add	sp, sp, #16
 2543              	.LCFI53:
 2544              		.cfi_def_cfa_offset 0
 2545              		@ sp needed
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 68


 2546 0022 7047     		bx	lr
 2547              		.cfi_endproc
 2548              	.LFE33:
 2550              		.section	.text.FusionAhrsGetLinearAcceleration,"ax",%progbits
 2551              		.align	1
 2552              		.global	FusionAhrsGetLinearAcceleration
 2553              		.syntax unified
 2554              		.thumb
 2555              		.thumb_func
 2557              	FusionAhrsGetLinearAcceleration:
 2558              	.LVL97:
 2559              	.LFB34:
 382:Core/Src/FusionAhrs.c **** 
 383:Core/Src/FusionAhrs.c **** /**
 384:Core/Src/FusionAhrs.c ****  * @brief Returns the linear acceleration measurement equal to the accelerometer
 385:Core/Src/FusionAhrs.c ****  * measurement with the 1 g of gravity removed.
 386:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 387:Core/Src/FusionAhrs.c ****  * @return Linear acceleration measurement in g.
 388:Core/Src/FusionAhrs.c ****  */
 389:Core/Src/FusionAhrs.c **** FusionVector FusionAhrsGetLinearAcceleration(const FusionAhrs *const ahrs) {
 2560              		.loc 1 389 76 is_stmt 1 view -0
 2561              		.cfi_startproc
 2562              		@ args = 0, pretend = 0, frame = 88
 2563              		@ frame_needed = 0, uses_anonymous_args = 0
 2564              		@ link register save eliminated.
 2565              		.loc 1 389 76 is_stmt 0 view .LVU732
 2566 0000 96B0     		sub	sp, sp, #88
 2567              	.LCFI54:
 2568              		.cfi_def_cfa_offset 88
 390:Core/Src/FusionAhrs.c **** #define Q ahrs->quaternion.element
 391:Core/Src/FusionAhrs.c **** 
 392:Core/Src/FusionAhrs.c ****     // Calculate gravity in the sensor coordinate frame
 393:Core/Src/FusionAhrs.c ****     const FusionVector gravity = {.axis = {
 2569              		.loc 1 393 5 is_stmt 1 view .LVU733
 394:Core/Src/FusionAhrs.c ****             .x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 2570              		.loc 1 394 27 is_stmt 0 view .LVU734
 2571 0002 D0ED075A 		vldr.32	s11, [r0, #28]
 2572              		.loc 1 394 33 view .LVU735
 2573 0006 90ED096A 		vldr.32	s12, [r0, #36]
 2574              		.loc 1 394 30 view .LVU736
 2575 000a 65EE866A 		vmul.f32	s13, s11, s12
 2576              		.loc 1 394 39 view .LVU737
 2577 000e D0ED067A 		vldr.32	s15, [r0, #24]
 2578              		.loc 1 394 45 view .LVU738
 2579 0012 90ED087A 		vldr.32	s14, [r0, #32]
 2580              		.loc 1 394 42 view .LVU739
 2581 0016 27EE875A 		vmul.f32	s10, s15, s14
 2582              		.loc 1 394 36 view .LVU740
 2583 001a 76EEC56A 		vsub.f32	s13, s13, s10
 2584              		.loc 1 394 23 view .LVU741
 2585 001e 76EEA66A 		vadd.f32	s13, s13, s13
 393:Core/Src/FusionAhrs.c ****             .x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 2586              		.loc 1 393 24 view .LVU742
 2587 0022 CDED0A6A 		vstr.32	s13, [sp, #40]
 395:Core/Src/FusionAhrs.c ****             .y = 2.0f * (Q.y * Q.z + Q.w * Q.x),
 2588              		.loc 1 395 30 view .LVU743
 2589 0026 26EE077A 		vmul.f32	s14, s12, s14
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 69


 2590              		.loc 1 395 42 view .LVU744
 2591 002a 65EEA75A 		vmul.f32	s11, s11, s15
 2592              		.loc 1 395 36 view .LVU745
 2593 002e 37EE257A 		vadd.f32	s14, s14, s11
 2594              		.loc 1 395 23 view .LVU746
 2595 0032 37EE077A 		vadd.f32	s14, s14, s14
 393:Core/Src/FusionAhrs.c ****             .x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 2596              		.loc 1 393 24 view .LVU747
 2597 0036 8DED0B7A 		vstr.32	s14, [sp, #44]
 396:Core/Src/FusionAhrs.c ****             .z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 2598              		.loc 1 396 30 view .LVU748
 2599 003a 67EEA77A 		vmul.f32	s15, s15, s15
 2600              		.loc 1 396 36 view .LVU749
 2601 003e F6EE005A 		vmov.f32	s11, #5.0e-1
 2602 0042 77EEE57A 		vsub.f32	s15, s15, s11
 2603              		.loc 1 396 49 view .LVU750
 2604 0046 26EE066A 		vmul.f32	s12, s12, s12
 2605              		.loc 1 396 43 view .LVU751
 2606 004a 77EE867A 		vadd.f32	s15, s15, s12
 2607              		.loc 1 396 23 view .LVU752
 2608 004e 77EEA77A 		vadd.f32	s15, s15, s15
 393:Core/Src/FusionAhrs.c ****             .x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 2609              		.loc 1 393 24 view .LVU753
 2610 0052 CDED0C7A 		vstr.32	s15, [sp, #48]
 397:Core/Src/FusionAhrs.c ****     }}; // third column of transposed rotation matrix
 398:Core/Src/FusionAhrs.c **** 
 399:Core/Src/FusionAhrs.c ****     // Remove gravity from accelerometer measurement
 400:Core/Src/FusionAhrs.c ****     switch (ahrs->settings.convention) {
 2611              		.loc 1 400 5 is_stmt 1 view .LVU754
 2612              		.loc 1 400 27 is_stmt 0 view .LVU755
 2613 0056 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2614              		.loc 1 400 5 view .LVU756
 2615 0058 012B     		cmp	r3, #1
 2616 005a 22D9     		bls	.L123
 2617 005c 022B     		cmp	r3, #2
 2618 005e 48D1     		bne	.L129
 401:Core/Src/FusionAhrs.c ****         case FusionConventionNwu:
 402:Core/Src/FusionAhrs.c ****         case FusionConventionEnu: {
 403:Core/Src/FusionAhrs.c ****             return FusionVectorSubtract(ahrs->accelerometer, gravity);
 404:Core/Src/FusionAhrs.c ****         }
 405:Core/Src/FusionAhrs.c ****         case FusionConventionNed: {
 406:Core/Src/FusionAhrs.c ****             return FusionVectorAdd(ahrs->accelerometer, gravity);
 2619              		.loc 1 406 13 is_stmt 1 view .LVU757
 2620 0060 04AB     		add	r3, sp, #16
 2621 0062 2830     		adds	r0, r0, #40
 2622              	.LVL98:
 2623              		.loc 1 406 13 is_stmt 0 view .LVU758
 2624 0064 07C8     		ldm	r0, {r0, r1, r2}
 2625              	.LVL99:
 2626              		.loc 1 406 13 view .LVU759
 2627 0066 83E80700 		stm	r3, {r0, r1, r2}
 2628              	.LBB114:
 2629              	.LBI114:
 201:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 2630              		.loc 2 201 28 is_stmt 1 view .LVU760
 2631              	.LBB115:
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 70


 2632              		.loc 2 202 5 view .LVU761
 203:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y + vectorB.axis.y,
 2633              		.loc 2 203 30 is_stmt 0 view .LVU762
 2634 006a 9DED046A 		vldr.32	s12, [sp, #16]
 203:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y + vectorB.axis.y,
 2635              		.loc 2 203 33 view .LVU763
 2636 006e 76EE866A 		vadd.f32	s13, s13, s12
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 2637              		.loc 2 202 24 view .LVU764
 2638 0072 CDED076A 		vstr.32	s13, [sp, #28]
 204:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z + vectorB.axis.z,
 2639              		.loc 2 204 30 view .LVU765
 2640 0076 DDED056A 		vldr.32	s13, [sp, #20]
 204:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z + vectorB.axis.z,
 2641              		.loc 2 204 33 view .LVU766
 2642 007a 37EE267A 		vadd.f32	s14, s14, s13
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 2643              		.loc 2 202 24 view .LVU767
 2644 007e 8DED087A 		vstr.32	s14, [sp, #32]
 205:Core/Inc/FusionMath.h ****     }};
 2645              		.loc 2 205 30 view .LVU768
 2646 0082 9DED067A 		vldr.32	s14, [sp, #24]
 205:Core/Inc/FusionMath.h ****     }};
 2647              		.loc 2 205 33 view .LVU769
 2648 0086 77EE877A 		vadd.f32	s15, s15, s14
 202:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 2649              		.loc 2 202 24 view .LVU770
 2650 008a CDED097A 		vstr.32	s15, [sp, #36]
 207:Core/Inc/FusionMath.h **** }
 2651              		.loc 2 207 5 is_stmt 1 view .LVU771
 207:Core/Inc/FusionMath.h **** }
 2652              		.loc 2 207 12 is_stmt 0 view .LVU772
 2653 008e 13AB     		add	r3, sp, #76
 2654 0090 07AA     		add	r2, sp, #28
 2655 0092 07CA     		ldm	r2, {r0, r1, r2}
 2656 0094 83E80700 		stm	r3, {r0, r1, r2}
 2657 0098 0DF1340C 		add	ip, sp, #52
 2658 009c 8CE80700 		stm	ip, {r0, r1, r2}
 2659              	.LBE115:
 2660              	.LBE114:
 2661              		.loc 1 406 20 view .LVU773
 2662 00a0 1FE0     		b	.L126
 2663              	.LVL100:
 2664              	.L123:
 403:Core/Src/FusionAhrs.c ****         }
 2665              		.loc 1 403 13 is_stmt 1 view .LVU774
 2666 00a2 04AB     		add	r3, sp, #16
 2667 00a4 2830     		adds	r0, r0, #40
 2668              	.LVL101:
 403:Core/Src/FusionAhrs.c ****         }
 2669              		.loc 1 403 13 is_stmt 0 view .LVU775
 2670 00a6 07C8     		ldm	r0, {r0, r1, r2}
 2671              	.LVL102:
 403:Core/Src/FusionAhrs.c ****         }
 2672              		.loc 1 403 13 view .LVU776
 2673 00a8 83E80700 		stm	r3, {r0, r1, r2}
 2674              	.LBB116:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 71


 2675              	.LBI116:
 216:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 2676              		.loc 2 216 28 is_stmt 1 view .LVU777
 2677              	.LBB117:
 217:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 2678              		.loc 2 217 5 view .LVU778
 218:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y - vectorB.axis.y,
 2679              		.loc 2 218 30 is_stmt 0 view .LVU779
 2680 00ac 9DED046A 		vldr.32	s12, [sp, #16]
 218:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y - vectorB.axis.y,
 2681              		.loc 2 218 33 view .LVU780
 2682 00b0 76EE666A 		vsub.f32	s13, s12, s13
 217:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 2683              		.loc 2 217 24 view .LVU781
 2684 00b4 CDED076A 		vstr.32	s13, [sp, #28]
 219:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z - vectorB.axis.z,
 2685              		.loc 2 219 30 view .LVU782
 2686 00b8 DDED056A 		vldr.32	s13, [sp, #20]
 219:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z - vectorB.axis.z,
 2687              		.loc 2 219 33 view .LVU783
 2688 00bc 36EEC77A 		vsub.f32	s14, s13, s14
 217:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 2689              		.loc 2 217 24 view .LVU784
 2690 00c0 8DED087A 		vstr.32	s14, [sp, #32]
 220:Core/Inc/FusionMath.h ****     }};
 2691              		.loc 2 220 30 view .LVU785
 2692 00c4 9DED067A 		vldr.32	s14, [sp, #24]
 220:Core/Inc/FusionMath.h ****     }};
 2693              		.loc 2 220 33 view .LVU786
 2694 00c8 77EE677A 		vsub.f32	s15, s14, s15
 217:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 2695              		.loc 2 217 24 view .LVU787
 2696 00cc CDED097A 		vstr.32	s15, [sp, #36]
 222:Core/Inc/FusionMath.h **** }
 2697              		.loc 2 222 5 is_stmt 1 view .LVU788
 222:Core/Inc/FusionMath.h **** }
 2698              		.loc 2 222 12 is_stmt 0 view .LVU789
 2699 00d0 10AB     		add	r3, sp, #64
 2700 00d2 07AA     		add	r2, sp, #28
 2701 00d4 07CA     		ldm	r2, {r0, r1, r2}
 2702 00d6 83E80700 		stm	r3, {r0, r1, r2}
 2703 00da 0DF1340C 		add	ip, sp, #52
 2704 00de 8CE80700 		stm	ip, {r0, r1, r2}
 2705              	.L126:
 222:Core/Inc/FusionMath.h **** }
 2706              		.loc 2 222 12 view .LVU790
 2707              	.LBE117:
 2708              	.LBE116:
 407:Core/Src/FusionAhrs.c ****         }
 408:Core/Src/FusionAhrs.c ****     }
 409:Core/Src/FusionAhrs.c ****     return FUSION_VECTOR_ZERO; // avoid compiler warning
 410:Core/Src/FusionAhrs.c **** #undef Q
 411:Core/Src/FusionAhrs.c **** }
 2709              		.loc 1 411 1 view .LVU791
 2710 00e2 9DED0D0A 		vldr.32	s0, [sp, #52]
 2711 00e6 DDED0E0A 		vldr.32	s1, [sp, #56]
 2712 00ea 9DED0F1A 		vldr.32	s2, [sp, #60]
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 72


 2713 00ee 16B0     		add	sp, sp, #88
 2714              	.LCFI55:
 2715              		.cfi_remember_state
 2716              		.cfi_def_cfa_offset 0
 2717              		@ sp needed
 2718 00f0 7047     		bx	lr
 2719              	.LVL103:
 2720              	.L129:
 2721              	.LCFI56:
 2722              		.cfi_restore_state
 409:Core/Src/FusionAhrs.c **** #undef Q
 2723              		.loc 1 409 5 is_stmt 1 view .LVU792
 409:Core/Src/FusionAhrs.c **** #undef Q
 2724              		.loc 1 409 12 is_stmt 0 view .LVU793
 2725 00f2 0023     		movs	r3, #0
 2726 00f4 0D93     		str	r3, [sp, #52]	@ float
 2727 00f6 0E93     		str	r3, [sp, #56]	@ float
 2728 00f8 0F93     		str	r3, [sp, #60]	@ float
 2729 00fa F2E7     		b	.L126
 2730              		.cfi_endproc
 2731              	.LFE34:
 2733              		.section	.text.FusionAhrsGetEarthAcceleration,"ax",%progbits
 2734              		.align	1
 2735              		.global	FusionAhrsGetEarthAcceleration
 2736              		.syntax unified
 2737              		.thumb
 2738              		.thumb_func
 2740              	FusionAhrsGetEarthAcceleration:
 2741              	.LVL104:
 2742              	.LFB35:
 412:Core/Src/FusionAhrs.c **** 
 413:Core/Src/FusionAhrs.c **** /**
 414:Core/Src/FusionAhrs.c ****  * @brief Returns the Earth acceleration measurement equal to accelerometer
 415:Core/Src/FusionAhrs.c ****  * measurement in the Earth coordinate frame with the 1 g of gravity removed.
 416:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 417:Core/Src/FusionAhrs.c ****  * @return Earth acceleration measurement in g.
 418:Core/Src/FusionAhrs.c ****  */
 419:Core/Src/FusionAhrs.c **** FusionVector FusionAhrsGetEarthAcceleration(const FusionAhrs *const ahrs) {
 2743              		.loc 1 419 75 is_stmt 1 view -0
 2744              		.cfi_startproc
 2745              		@ args = 0, pretend = 0, frame = 40
 2746              		@ frame_needed = 0, uses_anonymous_args = 0
 2747              		@ link register save eliminated.
 2748              		.loc 1 419 75 is_stmt 0 view .LVU795
 2749 0000 8AB0     		sub	sp, sp, #40
 2750              	.LCFI57:
 2751              		.cfi_def_cfa_offset 40
 420:Core/Src/FusionAhrs.c **** #define Q ahrs->quaternion.element
 421:Core/Src/FusionAhrs.c **** #define A ahrs->accelerometer.axis
 422:Core/Src/FusionAhrs.c **** 
 423:Core/Src/FusionAhrs.c ****     // Calculate accelerometer measurement in the Earth coordinate frame
 424:Core/Src/FusionAhrs.c ****     const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 2752              		.loc 1 424 5 is_stmt 1 view .LVU796
 2753              		.loc 1 424 25 is_stmt 0 view .LVU797
 2754 0002 D0ED067A 		vldr.32	s15, [r0, #24]
 2755              		.loc 1 424 17 view .LVU798
 2756 0006 67EEA75A 		vmul.f32	s11, s15, s15
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 73


 2757              	.LVL105:
 425:Core/Src/FusionAhrs.c ****     const float qwqx = Q.w * Q.x;
 2758              		.loc 1 425 5 is_stmt 1 view .LVU799
 2759              		.loc 1 425 31 is_stmt 0 view .LVU800
 2760 000a 90ED077A 		vldr.32	s14, [r0, #28]
 2761              		.loc 1 425 17 view .LVU801
 2762 000e 67EE873A 		vmul.f32	s7, s15, s14
 2763              	.LVL106:
 426:Core/Src/FusionAhrs.c ****     const float qwqy = Q.w * Q.y;
 2764              		.loc 1 426 5 is_stmt 1 view .LVU802
 2765              		.loc 1 426 31 is_stmt 0 view .LVU803
 2766 0012 90ED086A 		vldr.32	s12, [r0, #32]
 2767              		.loc 1 426 17 view .LVU804
 2768 0016 67EE861A 		vmul.f32	s3, s15, s12
 2769              	.LVL107:
 427:Core/Src/FusionAhrs.c ****     const float qwqz = Q.w * Q.z;
 2770              		.loc 1 427 5 is_stmt 1 view .LVU805
 2771              		.loc 1 427 31 is_stmt 0 view .LVU806
 2772 001a D0ED094A 		vldr.32	s9, [r0, #36]
 2773              		.loc 1 427 17 view .LVU807
 2774 001e 67EEA47A 		vmul.f32	s15, s15, s9
 2775              	.LVL108:
 428:Core/Src/FusionAhrs.c ****     const float qxqy = Q.x * Q.y;
 2776              		.loc 1 428 5 is_stmt 1 view .LVU808
 2777              		.loc 1 428 17 is_stmt 0 view .LVU809
 2778 0022 27EE061A 		vmul.f32	s2, s14, s12
 2779              	.LVL109:
 429:Core/Src/FusionAhrs.c ****     const float qxqz = Q.x * Q.z;
 2780              		.loc 1 429 5 is_stmt 1 view .LVU810
 2781              		.loc 1 429 17 is_stmt 0 view .LVU811
 2782 0026 27EE243A 		vmul.f32	s6, s14, s9
 2783              	.LVL110:
 430:Core/Src/FusionAhrs.c ****     const float qyqz = Q.y * Q.z;
 2784              		.loc 1 430 5 is_stmt 1 view .LVU812
 2785              		.loc 1 430 17 is_stmt 0 view .LVU813
 2786 002a 26EE242A 		vmul.f32	s4, s12, s9
 2787              	.LVL111:
 431:Core/Src/FusionAhrs.c ****     FusionVector accelerometer = {.axis = {
 2788              		.loc 1 431 5 is_stmt 1 view .LVU814
 432:Core/Src/FusionAhrs.c ****             .x = 2.0f * ((qwqw - 0.5f + Q.x * Q.x) * A.x + (qxqy - qwqz) * A.y + (qxqz + qwqy) * A.
 2789              		.loc 1 432 32 is_stmt 0 view .LVU815
 2790 002e F6EE006A 		vmov.f32	s13, #5.0e-1
 2791 0032 75EEE65A 		vsub.f32	s11, s11, s13
 2792              	.LVL112:
 2793              		.loc 1 432 45 view .LVU816
 2794 0036 27EE077A 		vmul.f32	s14, s14, s14
 2795              		.loc 1 432 39 view .LVU817
 2796 003a 35EE877A 		vadd.f32	s14, s11, s14
 2797              		.loc 1 432 55 view .LVU818
 2798 003e D0ED0A6A 		vldr.32	s13, [r0, #40]
 2799              		.loc 1 432 52 view .LVU819
 2800 0042 27EE267A 		vmul.f32	s14, s14, s13
 2801              		.loc 1 432 66 view .LVU820
 2802 0046 31EE675A 		vsub.f32	s10, s2, s15
 2803              		.loc 1 432 77 view .LVU821
 2804 004a 90ED0B4A 		vldr.32	s8, [r0, #44]
 2805              		.loc 1 432 74 view .LVU822
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 74


 2806 004e 25EE045A 		vmul.f32	s10, s10, s8
 2807              		.loc 1 432 58 view .LVU823
 2808 0052 37EE057A 		vadd.f32	s14, s14, s10
 2809              		.loc 1 432 88 view .LVU824
 2810 0056 71EE832A 		vadd.f32	s5, s3, s6
 2811              		.loc 1 432 99 view .LVU825
 2812 005a 90ED0C5A 		vldr.32	s10, [r0, #48]
 2813              		.loc 1 432 96 view .LVU826
 2814 005e 62EE852A 		vmul.f32	s5, s5, s10
 2815              		.loc 1 432 80 view .LVU827
 2816 0062 37EE227A 		vadd.f32	s14, s14, s5
 2817              		.loc 1 432 23 view .LVU828
 2818 0066 37EE077A 		vadd.f32	s14, s14, s14
 431:Core/Src/FusionAhrs.c ****     FusionVector accelerometer = {.axis = {
 2819              		.loc 1 431 18 view .LVU829
 2820 006a 8DED047A 		vstr.32	s14, [sp, #16]
 433:Core/Src/FusionAhrs.c ****             .y = 2.0f * ((qxqy + qwqz) * A.x + (qwqw - 0.5f + Q.y * Q.y) * A.y + (qyqz - qwqx) * A.
 2821              		.loc 1 433 32 view .LVU830
 2822 006e 77EE817A 		vadd.f32	s15, s15, s2
 2823              	.LVL113:
 2824              		.loc 1 433 40 view .LVU831
 2825 0072 66EEA77A 		vmul.f32	s15, s13, s15
 2826              		.loc 1 433 67 view .LVU832
 2827 0076 26EE066A 		vmul.f32	s12, s12, s12
 2828              		.loc 1 433 61 view .LVU833
 2829 007a 35EE866A 		vadd.f32	s12, s11, s12
 2830              		.loc 1 433 74 view .LVU834
 2831 007e 24EE066A 		vmul.f32	s12, s8, s12
 2832              		.loc 1 433 46 view .LVU835
 2833 0082 77EE867A 		vadd.f32	s15, s15, s12
 2834              		.loc 1 433 88 view .LVU836
 2835 0086 32EE637A 		vsub.f32	s14, s4, s7
 2836              		.loc 1 433 96 view .LVU837
 2837 008a 25EE077A 		vmul.f32	s14, s10, s14
 2838              		.loc 1 433 80 view .LVU838
 2839 008e 77EE877A 		vadd.f32	s15, s15, s14
 2840              		.loc 1 433 23 view .LVU839
 2841 0092 77EEA77A 		vadd.f32	s15, s15, s15
 431:Core/Src/FusionAhrs.c ****     FusionVector accelerometer = {.axis = {
 2842              		.loc 1 431 18 view .LVU840
 2843 0096 CDED057A 		vstr.32	s15, [sp, #20]
 434:Core/Src/FusionAhrs.c ****             .z = 2.0f * ((qxqz - qwqy) * A.x + (qyqz + qwqx) * A.y + (qwqw - 0.5f + Q.z * Q.z) * A.
 2844              		.loc 1 434 32 view .LVU841
 2845 009a 33EE613A 		vsub.f32	s6, s6, s3
 2846              	.LVL114:
 2847              		.loc 1 434 40 view .LVU842
 2848 009e 66EE836A 		vmul.f32	s13, s13, s6
 2849              		.loc 1 434 54 view .LVU843
 2850 00a2 73EE823A 		vadd.f32	s7, s7, s4
 2851              	.LVL115:
 2852              		.loc 1 434 62 view .LVU844
 2853 00a6 24EE234A 		vmul.f32	s8, s8, s7
 2854              		.loc 1 434 46 view .LVU845
 2855 00aa 76EE846A 		vadd.f32	s13, s13, s8
 2856              		.loc 1 434 89 view .LVU846
 2857 00ae 64EEA47A 		vmul.f32	s15, s9, s9
 2858              		.loc 1 434 83 view .LVU847
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 75


 2859 00b2 75EEA75A 		vadd.f32	s11, s11, s15
 2860              		.loc 1 434 96 view .LVU848
 2861 00b6 25EE255A 		vmul.f32	s10, s10, s11
 2862              		.loc 1 434 68 view .LVU849
 2863 00ba 76EE856A 		vadd.f32	s13, s13, s10
 2864              		.loc 1 434 23 view .LVU850
 2865 00be 76EEA66A 		vadd.f32	s13, s13, s13
 431:Core/Src/FusionAhrs.c ****             .x = 2.0f * ((qwqw - 0.5f + Q.x * Q.x) * A.x + (qxqy - qwqz) * A.y + (qxqz + qwqy) * A.
 2866              		.loc 1 431 18 view .LVU851
 2867 00c2 CDED066A 		vstr.32	s13, [sp, #24]
 435:Core/Src/FusionAhrs.c ****     }}; // rotation matrix multiplied with the accelerometer
 436:Core/Src/FusionAhrs.c **** 
 437:Core/Src/FusionAhrs.c ****     // Remove gravity from accelerometer measurement
 438:Core/Src/FusionAhrs.c ****     switch (ahrs->settings.convention) {
 2868              		.loc 1 438 5 is_stmt 1 view .LVU852
 2869              		.loc 1 438 27 is_stmt 0 view .LVU853
 2870 00c6 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2871              		.loc 1 438 5 view .LVU854
 2872 00c8 012B     		cmp	r3, #1
 2873 00ca 08D9     		bls	.L131
 2874 00cc 022B     		cmp	r3, #2
 2875 00ce 0CD1     		bne	.L133
 439:Core/Src/FusionAhrs.c ****         case FusionConventionNwu:
 440:Core/Src/FusionAhrs.c ****         case FusionConventionEnu:
 441:Core/Src/FusionAhrs.c ****             accelerometer.axis.z -= 1.0f;
 442:Core/Src/FusionAhrs.c ****             break;
 443:Core/Src/FusionAhrs.c ****         case FusionConventionNed:
 444:Core/Src/FusionAhrs.c ****             accelerometer.axis.z += 1.0f;
 2876              		.loc 1 444 13 is_stmt 1 view .LVU855
 2877              		.loc 1 444 34 is_stmt 0 view .LVU856
 2878 00d0 F7EE007A 		vmov.f32	s15, #1.0e+0
 2879 00d4 76EEA76A 		vadd.f32	s13, s13, s15
 2880 00d8 CDED066A 		vstr.32	s13, [sp, #24]
 445:Core/Src/FusionAhrs.c ****             break;
 2881              		.loc 1 445 13 is_stmt 1 view .LVU857
 2882 00dc 05E0     		b	.L133
 2883              	.L131:
 441:Core/Src/FusionAhrs.c ****             break;
 2884              		.loc 1 441 13 view .LVU858
 441:Core/Src/FusionAhrs.c ****             break;
 2885              		.loc 1 441 34 is_stmt 0 view .LVU859
 2886 00de F7EE007A 		vmov.f32	s15, #1.0e+0
 2887 00e2 76EEE76A 		vsub.f32	s13, s13, s15
 2888 00e6 CDED066A 		vstr.32	s13, [sp, #24]
 442:Core/Src/FusionAhrs.c ****         case FusionConventionNed:
 2889              		.loc 1 442 13 is_stmt 1 view .LVU860
 2890              	.L133:
 446:Core/Src/FusionAhrs.c ****     }
 447:Core/Src/FusionAhrs.c ****     return accelerometer;
 2891              		.loc 1 447 5 view .LVU861
 2892              		.loc 1 447 12 is_stmt 0 view .LVU862
 2893 00ea 04AB     		add	r3, sp, #16
 2894 00ec 93E80700 		ldm	r3, {r0, r1, r2}
 2895              	.LVL116:
 2896              		.loc 1 447 12 view .LVU863
 2897 00f0 0AAB     		add	r3, sp, #40
 2898 00f2 03E90700 		stmdb	r3, {r0, r1, r2}
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 76


 448:Core/Src/FusionAhrs.c **** #undef Q
 449:Core/Src/FusionAhrs.c **** #undef A
 450:Core/Src/FusionAhrs.c **** }
 2899              		.loc 1 450 1 view .LVU864
 2900 00f6 9DED070A 		vldr.32	s0, [sp, #28]
 2901 00fa DDED080A 		vldr.32	s1, [sp, #32]
 2902 00fe 9DED091A 		vldr.32	s2, [sp, #36]
 2903              	.LVL117:
 2904              		.loc 1 450 1 view .LVU865
 2905 0102 0AB0     		add	sp, sp, #40
 2906              	.LCFI58:
 2907              		.cfi_def_cfa_offset 0
 2908              		@ sp needed
 2909 0104 7047     		bx	lr
 2910              		.cfi_endproc
 2911              	.LFE35:
 2913              		.section	.text.FusionAhrsGetInternalStates,"ax",%progbits
 2914              		.align	1
 2915              		.global	FusionAhrsGetInternalStates
 2916              		.syntax unified
 2917              		.thumb
 2918              		.thumb_func
 2920              	FusionAhrsGetInternalStates:
 2921              	.LVL118:
 2922              	.LFB36:
 451:Core/Src/FusionAhrs.c **** 
 452:Core/Src/FusionAhrs.c **** /**
 453:Core/Src/FusionAhrs.c ****  * @brief Returns the AHRS algorithm internal states.
 454:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 455:Core/Src/FusionAhrs.c ****  * @return AHRS algorithm internal states.
 456:Core/Src/FusionAhrs.c ****  */
 457:Core/Src/FusionAhrs.c **** FusionAhrsInternalStates FusionAhrsGetInternalStates(const FusionAhrs *const ahrs) {
 2923              		.loc 1 457 84 is_stmt 1 view -0
 2924              		.cfi_startproc
 2925              		@ args = 0, pretend = 0, frame = 0
 2926              		@ frame_needed = 0, uses_anonymous_args = 0
 2927              		.loc 1 457 84 is_stmt 0 view .LVU867
 2928 0000 38B5     		push	{r3, r4, r5, lr}
 2929              	.LCFI59:
 2930              		.cfi_def_cfa_offset 16
 2931              		.cfi_offset 3, -16
 2932              		.cfi_offset 4, -12
 2933              		.cfi_offset 5, -8
 2934              		.cfi_offset 14, -4
 2935 0002 0546     		mov	r5, r0
 2936 0004 0C46     		mov	r4, r1
 458:Core/Src/FusionAhrs.c ****     const FusionAhrsInternalStates internalStates = {
 2937              		.loc 1 458 5 is_stmt 1 view .LVU868
 459:Core/Src/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 2938              		.loc 1 459 75 is_stmt 0 view .LVU869
 2939 0006 91ED110A 		vldr.32	s0, [r1, #68]
 2940 000a D1ED120A 		vldr.32	s1, [r1, #72]
 2941 000e 91ED131A 		vldr.32	s2, [r1, #76]
 2942 0012 FFF7FEFF 		bl	FusionVectorMagnitude
 2943              	.LVL119:
 2944              		.loc 1 459 34 discriminator 1 view .LVU870
 2945 0016 30EE000A 		vadd.f32	s0, s0, s0
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 77


 2946 001a FFF7FEFF 		bl	FusionAsin
 2947              	.LVL120:
 2948              	.LBB118:
 2949              	.LBI118:
 136:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 2950              		.loc 2 136 21 is_stmt 1 view .LVU871
 2951              	.LBB119:
 137:Core/Inc/FusionMath.h **** }
 2952              		.loc 2 137 5 view .LVU872
 137:Core/Inc/FusionMath.h **** }
 2953              		.loc 2 137 20 is_stmt 0 view .LVU873
 2954 001e DFED217A 		vldr.32	s15, .L141
 2955 0022 20EE270A 		vmul.f32	s0, s0, s15
 2956              	.LVL121:
 137:Core/Inc/FusionMath.h **** }
 2957              		.loc 2 137 20 view .LVU874
 2958              	.LBE119:
 2959              	.LBE118:
 458:Core/Src/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 2960              		.loc 1 458 36 view .LVU875
 2961 0026 85ED000A 		vstr.32	s0, [r5]
 460:Core/Src/FusionAhrs.c ****             .accelerometerIgnored = ahrs->accelerometerIgnored,
 2962              		.loc 1 460 41 view .LVU876
 2963 002a 94F85C30 		ldrb	r3, [r4, #92]	@ zero_extendqisi2
 458:Core/Src/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 2964              		.loc 1 458 36 view .LVU877
 2965 002e 2B71     		strb	r3, [r5, #4]
 461:Core/Src/FusionAhrs.c ****             .accelerationRecoveryTrigger = ahrs->settings.recoveryTriggerPeriod == 0 ? 0.0f : (floa
 2966              		.loc 1 461 58 view .LVU878
 2967 0030 6369     		ldr	r3, [r4, #20]
 2968              		.loc 1 461 93 view .LVU879
 2969 0032 83B3     		cbz	r3, .L138
 2970              		.loc 1 461 95 discriminator 1 view .LVU880
 2971 0034 D4ED187A 		vldr.32	s15, [r4, #96]	@ int
 2972 0038 F8EEE76A 		vcvt.f32.s32	s13, s15
 2973              		.loc 1 461 139 discriminator 1 view .LVU881
 2974 003c 07EE903A 		vmov	s15, r3	@ int
 2975 0040 F8EE677A 		vcvt.f32.u32	s15, s15
 2976              		.loc 1 461 93 discriminator 1 view .LVU882
 2977 0044 86EEA77A 		vdiv.f32	s14, s13, s15
 2978              	.L136:
 458:Core/Src/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 2979              		.loc 1 458 36 view .LVU883
 2980 0048 85ED027A 		vstr.32	s14, [r5, #8]
 462:Core/Src/FusionAhrs.c ****             .magneticError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahrs->h
 2981              		.loc 1 462 71 view .LVU884
 2982 004c 94ED140A 		vldr.32	s0, [r4, #80]
 2983 0050 D4ED150A 		vldr.32	s1, [r4, #84]
 2984 0054 94ED161A 		vldr.32	s2, [r4, #88]
 2985 0058 FFF7FEFF 		bl	FusionVectorMagnitude
 2986              	.LVL122:
 2987              		.loc 1 462 30 discriminator 1 view .LVU885
 2988 005c 30EE000A 		vadd.f32	s0, s0, s0
 2989 0060 FFF7FEFF 		bl	FusionAsin
 2990              	.LVL123:
 2991              	.LBB120:
 2992              	.LBI120:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 78


 136:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 2993              		.loc 2 136 21 is_stmt 1 view .LVU886
 2994              	.LBB121:
 137:Core/Inc/FusionMath.h **** }
 2995              		.loc 2 137 5 view .LVU887
 137:Core/Inc/FusionMath.h **** }
 2996              		.loc 2 137 20 is_stmt 0 view .LVU888
 2997 0064 DFED0F7A 		vldr.32	s15, .L141
 2998 0068 20EE270A 		vmul.f32	s0, s0, s15
 2999              	.LVL124:
 137:Core/Inc/FusionMath.h **** }
 3000              		.loc 2 137 20 view .LVU889
 3001              	.LBE121:
 3002              	.LBE120:
 458:Core/Src/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 3003              		.loc 1 458 36 view .LVU890
 3004 006c 85ED030A 		vstr.32	s0, [r5, #12]
 463:Core/Src/FusionAhrs.c ****             .magnetometerIgnored = ahrs->magnetometerIgnored,
 3005              		.loc 1 463 40 view .LVU891
 3006 0070 94F86830 		ldrb	r3, [r4, #104]	@ zero_extendqisi2
 458:Core/Src/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 3007              		.loc 1 458 36 view .LVU892
 3008 0074 2B74     		strb	r3, [r5, #16]
 464:Core/Src/FusionAhrs.c ****             .magneticRecoveryTrigger = ahrs->settings.recoveryTriggerPeriod == 0 ? 0.0f : (float) a
 3009              		.loc 1 464 54 view .LVU893
 3010 0076 6369     		ldr	r3, [r4, #20]
 3011              		.loc 1 464 89 view .LVU894
 3012 0078 83B1     		cbz	r3, .L139
 3013              		.loc 1 464 103 discriminator 1 view .LVU895
 3014 007a D4ED1B6A 		vldr.32	s13, [r4, #108]	@ int
 3015              		.loc 1 464 91 discriminator 1 view .LVU896
 3016 007e F8EEE66A 		vcvt.f32.s32	s13, s13
 3017              		.loc 1 464 131 discriminator 1 view .LVU897
 3018 0082 07EE903A 		vmov	s15, r3	@ int
 3019 0086 F8EE677A 		vcvt.f32.u32	s15, s15
 3020              		.loc 1 464 89 discriminator 1 view .LVU898
 3021 008a 86EEA77A 		vdiv.f32	s14, s13, s15
 3022              	.L137:
 458:Core/Src/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 3023              		.loc 1 458 36 view .LVU899
 3024 008e 85ED057A 		vstr.32	s14, [r5, #20]
 465:Core/Src/FusionAhrs.c ****     };
 466:Core/Src/FusionAhrs.c ****     return internalStates;
 3025              		.loc 1 466 5 is_stmt 1 view .LVU900
 467:Core/Src/FusionAhrs.c **** }
 3026              		.loc 1 467 1 is_stmt 0 view .LVU901
 3027 0092 2846     		mov	r0, r5
 3028 0094 38BD     		pop	{r3, r4, r5, pc}
 3029              	.LVL125:
 3030              	.L138:
 461:Core/Src/FusionAhrs.c ****             .magneticError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahrs->h
 3031              		.loc 1 461 93 discriminator 2 view .LVU902
 3032 0096 9FED047A 		vldr.32	s14, .L141+4
 3033 009a D5E7     		b	.L136
 3034              	.L139:
 464:Core/Src/FusionAhrs.c ****     };
 3035              		.loc 1 464 89 discriminator 2 view .LVU903
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 79


 3036 009c 9FED027A 		vldr.32	s14, .L141+4
 3037 00a0 F5E7     		b	.L137
 3038              	.L142:
 3039 00a2 00BF     		.align	2
 3040              	.L141:
 3041 00a4 E02E6542 		.word	1113927392
 3042 00a8 00000000 		.word	0
 3043              		.cfi_endproc
 3044              	.LFE36:
 3046              		.section	.text.FusionAhrsGetFlags,"ax",%progbits
 3047              		.align	1
 3048              		.global	FusionAhrsGetFlags
 3049              		.syntax unified
 3050              		.thumb
 3051              		.thumb_func
 3053              	FusionAhrsGetFlags:
 3054              	.LVL126:
 3055              	.LFB37:
 468:Core/Src/FusionAhrs.c **** 
 469:Core/Src/FusionAhrs.c **** /**
 470:Core/Src/FusionAhrs.c ****  * @brief Returns the AHRS algorithm flags.
 471:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 472:Core/Src/FusionAhrs.c ****  * @return AHRS algorithm flags.
 473:Core/Src/FusionAhrs.c ****  */
 474:Core/Src/FusionAhrs.c **** FusionAhrsFlags FusionAhrsGetFlags(const FusionAhrs *const ahrs) {
 3056              		.loc 1 474 66 is_stmt 1 view -0
 3057              		.cfi_startproc
 3058              		@ args = 0, pretend = 0, frame = 8
 3059              		@ frame_needed = 0, uses_anonymous_args = 0
 3060              		@ link register save eliminated.
 3061              		.loc 1 474 66 is_stmt 0 view .LVU905
 3062 0000 82B0     		sub	sp, sp, #8
 3063              	.LCFI60:
 3064              		.cfi_def_cfa_offset 8
 475:Core/Src/FusionAhrs.c ****     const FusionAhrsFlags flags = {
 3065              		.loc 1 475 5 is_stmt 1 view .LVU906
 476:Core/Src/FusionAhrs.c ****             .initialising = ahrs->initialising,
 3066              		.loc 1 476 33 is_stmt 0 view .LVU907
 3067 0002 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 475:Core/Src/FusionAhrs.c ****     const FusionAhrsFlags flags = {
 3068              		.loc 1 475 27 view .LVU908
 3069 0006 8DF80030 		strb	r3, [sp]
 477:Core/Src/FusionAhrs.c ****             .angularRateRecovery = ahrs->angularRateRecovery,
 3070              		.loc 1 477 40 view .LVU909
 3071 000a 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 475:Core/Src/FusionAhrs.c ****     const FusionAhrsFlags flags = {
 3072              		.loc 1 475 27 view .LVU910
 3073 000e 8DF80130 		strb	r3, [sp, #1]
 478:Core/Src/FusionAhrs.c ****             .accelerationRecovery = ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryT
 3074              		.loc 1 478 41 view .LVU911
 3075 0012 036E     		ldr	r3, [r0, #96]
 3076              		.loc 1 478 77 view .LVU912
 3077 0014 426E     		ldr	r2, [r0, #100]
 3078              		.loc 1 478 71 view .LVU913
 3079 0016 9342     		cmp	r3, r2
 3080 0018 D4BF     		ite	le
 3081 001a 0023     		movle	r3, #0
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 80


 3082 001c 0123     		movgt	r3, #1
 475:Core/Src/FusionAhrs.c ****             .initialising = ahrs->initialising,
 3083              		.loc 1 475 27 view .LVU914
 3084 001e 8DF80230 		strb	r3, [sp, #2]
 479:Core/Src/FusionAhrs.c ****             .magneticRecovery= ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout,
 3085              		.loc 1 479 36 view .LVU915
 3086 0022 C36E     		ldr	r3, [r0, #108]
 3087              		.loc 1 479 68 view .LVU916
 3088 0024 026F     		ldr	r2, [r0, #112]
 3089              		.loc 1 479 62 view .LVU917
 3090 0026 9342     		cmp	r3, r2
 3091 0028 D4BF     		ite	le
 3092 002a 0023     		movle	r3, #0
 3093 002c 0123     		movgt	r3, #1
 475:Core/Src/FusionAhrs.c ****             .initialising = ahrs->initialising,
 3094              		.loc 1 475 27 view .LVU918
 3095 002e 8DF80330 		strb	r3, [sp, #3]
 480:Core/Src/FusionAhrs.c ****     };
 481:Core/Src/FusionAhrs.c ****     return flags;
 3096              		.loc 1 481 5 is_stmt 1 view .LVU919
 3097              		.loc 1 481 12 is_stmt 0 view .LVU920
 3098 0032 009B     		ldr	r3, [sp]
 3099 0034 0193     		str	r3, [sp, #4]
 3100 0036 0020     		movs	r0, #0
 3101              	.LVL127:
 3102              		.loc 1 481 12 view .LVU921
 3103 0038 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 3104 003c 63F30700 		bfi	r0, r3, #0, #8
 3105 0040 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 3106 0044 63F30F20 		bfi	r0, r3, #8, #8
 3107 0048 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 3108 004c 63F31740 		bfi	r0, r3, #16, #8
 3109 0050 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 3110 0054 63F31F60 		bfi	r0, r3, #24, #8
 482:Core/Src/FusionAhrs.c **** }
 3111              		.loc 1 482 1 view .LVU922
 3112 0058 02B0     		add	sp, sp, #8
 3113              	.LCFI61:
 3114              		.cfi_def_cfa_offset 0
 3115              		@ sp needed
 3116 005a 7047     		bx	lr
 3117              		.cfi_endproc
 3118              	.LFE37:
 3120              		.section	.text.FusionAhrsSetHeading,"ax",%progbits
 3121              		.align	1
 3122              		.global	FusionAhrsSetHeading
 3123              		.syntax unified
 3124              		.thumb
 3125              		.thumb_func
 3127              	FusionAhrsSetHeading:
 3128              	.LVL128:
 3129              	.LFB38:
 483:Core/Src/FusionAhrs.c **** 
 484:Core/Src/FusionAhrs.c **** /**
 485:Core/Src/FusionAhrs.c ****  * @brief Sets the heading of the orientation measurement provided by the AHRS
 486:Core/Src/FusionAhrs.c ****  * algorithm.  This function can be used to reset drift in heading when the AHRS
 487:Core/Src/FusionAhrs.c ****  * algorithm is being used without a magnetometer.
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 81


 488:Core/Src/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 489:Core/Src/FusionAhrs.c ****  * @param heading Heading angle in degrees.
 490:Core/Src/FusionAhrs.c ****  */
 491:Core/Src/FusionAhrs.c **** void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 3130              		.loc 1 491 72 is_stmt 1 view -0
 3131              		.cfi_startproc
 3132              		@ args = 0, pretend = 0, frame = 16
 3133              		@ frame_needed = 0, uses_anonymous_args = 0
 3134              		.loc 1 491 72 is_stmt 0 view .LVU924
 3135 0000 10B5     		push	{r4, lr}
 3136              	.LCFI62:
 3137              		.cfi_def_cfa_offset 8
 3138              		.cfi_offset 4, -8
 3139              		.cfi_offset 14, -4
 3140 0002 2DED048B 		vpush.64	{d8, d9}
 3141              	.LCFI63:
 3142              		.cfi_def_cfa_offset 24
 3143              		.cfi_offset 80, -24
 3144              		.cfi_offset 81, -20
 3145              		.cfi_offset 82, -16
 3146              		.cfi_offset 83, -12
 3147 0006 84B0     		sub	sp, sp, #16
 3148              	.LCFI64:
 3149              		.cfi_def_cfa_offset 40
 3150 0008 0446     		mov	r4, r0
 3151 000a B0EE408A 		vmov.f32	s16, s0
 492:Core/Src/FusionAhrs.c **** #define Q ahrs->quaternion.element
 493:Core/Src/FusionAhrs.c ****     const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 3152              		.loc 1 493 5 is_stmt 1 view .LVU925
 3153              		.loc 1 493 31 is_stmt 0 view .LVU926
 3154 000e 90ED060A 		vldr.32	s0, [r0, #24]
 3155              	.LVL129:
 3156              		.loc 1 493 37 view .LVU927
 3157 0012 D0ED090A 		vldr.32	s1, [r0, #36]
 3158              		.loc 1 493 34 view .LVU928
 3159 0016 20EE200A 		vmul.f32	s0, s0, s1
 3160              		.loc 1 493 43 view .LVU929
 3161 001a 90ED077A 		vldr.32	s14, [r0, #28]
 3162              		.loc 1 493 49 view .LVU930
 3163 001e D0ED087A 		vldr.32	s15, [r0, #32]
 3164              		.loc 1 493 46 view .LVU931
 3165 0022 27EE277A 		vmul.f32	s14, s14, s15
 3166              		.loc 1 493 64 view .LVU932
 3167 0026 67EEA77A 		vmul.f32	s15, s15, s15
 3168              		.loc 1 493 58 view .LVU933
 3169 002a F6EE008A 		vmov.f32	s17, #5.0e-1
 3170 002e 78EEE77A 		vsub.f32	s15, s17, s15
 3171              		.loc 1 493 76 view .LVU934
 3172 0032 60EEA00A 		vmul.f32	s1, s1, s1
 3173              		.loc 1 493 23 view .LVU935
 3174 0036 77EEE00A 		vsub.f32	s1, s15, s1
 3175 003a 30EE070A 		vadd.f32	s0, s0, s14
 3176 003e FFF7FEFF 		bl	atan2f
 3177              	.LVL130:
 494:Core/Src/FusionAhrs.c ****     const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 3178              		.loc 1 494 5 is_stmt 1 view .LVU936
 3179              	.LBB122:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 82


 3180              	.LBI122:
 127:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 3181              		.loc 2 127 21 view .LVU937
 3182              	.LBB123:
 128:Core/Inc/FusionMath.h **** }
 3183              		.loc 2 128 5 view .LVU938
 128:Core/Inc/FusionMath.h **** }
 3184              		.loc 2 128 20 is_stmt 0 view .LVU939
 3185 0042 DFED1D7A 		vldr.32	s15, .L147
 3186 0046 28EE278A 		vmul.f32	s16, s16, s15
 3187              	.LVL131:
 128:Core/Inc/FusionMath.h **** }
 3188              		.loc 2 128 20 view .LVU940
 3189              	.LBE123:
 3190              	.LBE122:
 3191              		.loc 1 494 51 discriminator 1 view .LVU941
 3192 004a 30EE488A 		vsub.f32	s16, s0, s16
 3193              		.loc 1 494 17 discriminator 1 view .LVU942
 3194 004e 28EE288A 		vmul.f32	s16, s16, s17
 3195              	.LVL132:
 495:Core/Src/FusionAhrs.c ****     const FusionQuaternion rotation = {.element = {
 3196              		.loc 1 495 5 is_stmt 1 view .LVU943
 496:Core/Src/FusionAhrs.c ****             .w = cosf(halfYawMinusHeading),
 3197              		.loc 1 496 18 is_stmt 0 view .LVU944
 3198 0052 B0EE480A 		vmov.f32	s0, s16
 3199              	.LVL133:
 3200              		.loc 1 496 18 view .LVU945
 3201 0056 FFF7FEFF 		bl	cosf
 3202              	.LVL134:
 3203 005a B0EE409A 		vmov.f32	s18, s0
 495:Core/Src/FusionAhrs.c ****     const FusionQuaternion rotation = {.element = {
 3204              		.loc 1 495 28 view .LVU946
 3205 005e 8DED000A 		vstr.32	s0, [sp]
 3206 0062 DFED168A 		vldr.32	s17, .L147+4
 3207 0066 CDED018A 		vstr.32	s17, [sp, #4]
 3208 006a CDED028A 		vstr.32	s17, [sp, #8]
 497:Core/Src/FusionAhrs.c ****             .x = 0.0f,
 498:Core/Src/FusionAhrs.c ****             .y = 0.0f,
 499:Core/Src/FusionAhrs.c ****             .z = -1.0f * sinf(halfYawMinusHeading),
 3209              		.loc 1 499 26 view .LVU947
 3210 006e B0EE480A 		vmov.f32	s0, s16
 3211 0072 FFF7FEFF 		bl	sinf
 3212              	.LVL135:
 3213              		.loc 1 499 24 discriminator 1 view .LVU948
 3214 0076 F1EE401A 		vneg.f32	s3, s0
 495:Core/Src/FusionAhrs.c ****             .w = cosf(halfYawMinusHeading),
 3215              		.loc 1 495 28 view .LVU949
 3216 007a CDED031A 		vstr.32	s3, [sp, #12]
 500:Core/Src/FusionAhrs.c ****     }};
 501:Core/Src/FusionAhrs.c ****     ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 3217              		.loc 1 501 5 is_stmt 1 view .LVU950
 3218              		.loc 1 501 24 is_stmt 0 view .LVU951
 3219 007e 94ED062A 		vldr.32	s4, [r4, #24]
 3220 0082 D4ED072A 		vldr.32	s5, [r4, #28]
 3221 0086 94ED083A 		vldr.32	s6, [r4, #32]
 3222 008a D4ED093A 		vldr.32	s7, [r4, #36]
 3223 008e B0EE490A 		vmov.f32	s0, s18
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 83


 3224 0092 F0EE680A 		vmov.f32	s1, s17
 3225 0096 B0EE681A 		vmov.f32	s2, s17
 3226 009a FFF7FEFF 		bl	FusionQuaternionMultiply
 3227              	.LVL136:
 3228 009e 84ED060A 		vstr.32	s0, [r4, #24]
 3229 00a2 C4ED070A 		vstr.32	s1, [r4, #28]
 3230 00a6 84ED081A 		vstr.32	s2, [r4, #32]
 3231 00aa C4ED091A 		vstr.32	s3, [r4, #36]
 502:Core/Src/FusionAhrs.c **** #undef Q
 503:Core/Src/FusionAhrs.c **** }
 3232              		.loc 1 503 1 view .LVU952
 3233 00ae 04B0     		add	sp, sp, #16
 3234              	.LCFI65:
 3235              		.cfi_def_cfa_offset 24
 3236              		@ sp needed
 3237 00b0 BDEC048B 		vldm	sp!, {d8-d9}
 3238              	.LCFI66:
 3239              		.cfi_restore 82
 3240              		.cfi_restore 83
 3241              		.cfi_restore 80
 3242              		.cfi_restore 81
 3243              		.cfi_def_cfa_offset 8
 3244              	.LVL137:
 3245              		.loc 1 503 1 view .LVU953
 3246 00b4 10BD     		pop	{r4, pc}
 3247              	.LVL138:
 3248              	.L148:
 3249              		.loc 1 503 1 view .LVU954
 3250 00b6 00BF     		.align	2
 3251              	.L147:
 3252 00b8 35FA8E3C 		.word	1016003125
 3253 00bc 00000000 		.word	0
 3254              		.cfi_endproc
 3255              	.LFE38:
 3257              		.section	.text.FusionAhrsUpdateNoMagnetometer,"ax",%progbits
 3258              		.align	1
 3259              		.global	FusionAhrsUpdateNoMagnetometer
 3260              		.syntax unified
 3261              		.thumb
 3262              		.thumb_func
 3264              	FusionAhrsUpdateNoMagnetometer:
 3265              	.LVL139:
 3266              	.LFB30:
 325:Core/Src/FusionAhrs.c **** 
 3267              		.loc 1 325 148 is_stmt 1 view -0
 3268              		.cfi_startproc
 3269              		@ args = 0, pretend = 0, frame = 40
 3270              		@ frame_needed = 0, uses_anonymous_args = 0
 325:Core/Src/FusionAhrs.c **** 
 3271              		.loc 1 325 148 is_stmt 0 view .LVU956
 3272 0000 10B5     		push	{r4, lr}
 3273              	.LCFI67:
 3274              		.cfi_def_cfa_offset 8
 3275              		.cfi_offset 4, -8
 3276              		.cfi_offset 14, -4
 3277 0002 8AB0     		sub	sp, sp, #40
 3278              	.LCFI68:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 84


 3279              		.cfi_def_cfa_offset 48
 3280 0004 0446     		mov	r4, r0
 3281 0006 F0EE434A 		vmov.f32	s9, s6
 3282 000a 8DED030A 		vstr.32	s0, [sp, #12]
 3283 000e CDED040A 		vstr.32	s1, [sp, #16]
 3284 0012 8DED051A 		vstr.32	s2, [sp, #20]
 3285 0016 CDED001A 		vstr.32	s3, [sp]
 3286 001a 8DED012A 		vstr.32	s4, [sp, #4]
 3287 001e CDED022A 		vstr.32	s5, [sp, #8]
 328:Core/Src/FusionAhrs.c **** 
 3288              		.loc 1 328 5 is_stmt 1 view .LVU957
 328:Core/Src/FusionAhrs.c **** 
 3289              		.loc 1 328 54 is_stmt 0 view .LVU958
 3290 0022 9FED0C4A 		vldr.32	s8, .L153
 3291 0026 8DED074A 		vstr.32	s8, [sp, #28]
 3292 002a 8DED084A 		vstr.32	s8, [sp, #32]
 3293 002e 8DED094A 		vstr.32	s8, [sp, #36]
 328:Core/Src/FusionAhrs.c **** 
 3294              		.loc 1 328 5 view .LVU959
 3295 0032 B0EE443A 		vmov.f32	s6, s8
 3296              	.LVL140:
 328:Core/Src/FusionAhrs.c **** 
 3297              		.loc 1 328 5 view .LVU960
 3298 0036 F0EE443A 		vmov.f32	s7, s8
 3299 003a FFF7FEFF 		bl	FusionAhrsUpdate
 3300              	.LVL141:
 331:Core/Src/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 3301              		.loc 1 331 5 is_stmt 1 view .LVU961
 331:Core/Src/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 3302              		.loc 1 331 13 is_stmt 0 view .LVU962
 3303 003e 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 331:Core/Src/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 3304              		.loc 1 331 8 view .LVU963
 3305 0042 0BB9     		cbnz	r3, .L152
 3306              	.L149:
 334:Core/Src/FusionAhrs.c **** 
 3307              		.loc 1 334 1 view .LVU964
 3308 0044 0AB0     		add	sp, sp, #40
 3309              	.LCFI69:
 3310              		.cfi_remember_state
 3311              		.cfi_def_cfa_offset 8
 3312              		@ sp needed
 3313 0046 10BD     		pop	{r4, pc}
 3314              	.LVL142:
 3315              	.L152:
 3316              	.LCFI70:
 3317              		.cfi_restore_state
 332:Core/Src/FusionAhrs.c ****     }
 3318              		.loc 1 332 9 is_stmt 1 view .LVU965
 3319 0048 9FED020A 		vldr.32	s0, .L153
 3320 004c 2046     		mov	r0, r4
 3321 004e FFF7FEFF 		bl	FusionAhrsSetHeading
 3322              	.LVL143:
 334:Core/Src/FusionAhrs.c **** 
 3323              		.loc 1 334 1 is_stmt 0 view .LVU966
 3324 0052 F7E7     		b	.L149
 3325              	.L154:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 85


 3326              		.align	2
 3327              	.L153:
 3328 0054 00000000 		.word	0
 3329              		.cfi_endproc
 3330              	.LFE30:
 3332              		.section	.rodata
 3333              		.align	2
 3334              		.set	.LANCHOR0,. + 0
 3335              	.LC0:
 3336 0000 00       		.byte	0
 3337 0001 000000   		.space	3
 3338 0004 0000003F 		.word	1056964608
 3339 0008 00000000 		.word	0
 3340 000c 0000B442 		.word	1119092736
 3341 0010 0000B442 		.word	1119092736
 3342 0014 00000000 		.word	0
 3343              		.text
 3344              	.Letext0:
 3345              		.file 3 "Core/Inc/FusionConvention.h"
 3346              		.file 4 "/Applications/ArmGNUToolchain/13.3.rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 3347              		.file 5 "/Applications/ArmGNUToolchain/13.3.rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 3348              		.file 6 "Core/Inc/FusionAhrs.h"
 3349              		.file 7 "/Applications/ArmGNUToolchain/13.3.rel1/arm-none-eabi/arm-none-eabi/include/math.h"
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 86


DEFINED SYMBOLS
                            *ABS*:00000000 FusionAhrs.c
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:21     .text.FusionVectorCrossProduct:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:26     .text.FusionVectorCrossProduct:00000000 FusionVectorCrossProduct
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:87     .text.FusionVectorDotProduct:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:92     .text.FusionVectorDotProduct:00000000 FusionVectorDotProduct
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:156    .text.FusionVectorMagnitudeSquared:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:161    .text.FusionVectorMagnitudeSquared:00000000 FusionVectorMagnitudeSquared
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:222    .text.FusionVectorNormalise:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:227    .text.FusionVectorNormalise:00000000 FusionVectorNormalise
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:334    .text.FusionVectorNormalise:00000090 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:341    .text.FusionQuaternionMultiply:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:346    .text.FusionQuaternionMultiply:00000000 FusionQuaternionMultiply
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:449    .text.FusionQuaternionMultiplyVector:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:454    .text.FusionQuaternionMultiplyVector:00000000 FusionQuaternionMultiplyVector
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:540    .text.FusionQuaternionNormalise:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:545    .text.FusionQuaternionNormalise:00000000 FusionQuaternionNormalise
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:640    .text.FusionQuaternionNormalise:00000098 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:647    .text.HalfGravity:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:652    .text.HalfGravity:00000000 HalfGravity
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:797    .text.HalfMagnetic:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:802    .text.HalfMagnetic:00000000 HalfMagnetic
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1000   .text.Feedback:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1005   .text.Feedback:00000000 Feedback
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1084   .text.FusionVectorMagnitude:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1089   .text.FusionVectorMagnitude:00000000 FusionVectorMagnitude
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1122   .text.FusionAsin:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1127   .text.FusionAsin:00000000 FusionAsin
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1179   .text.FusionAsin:00000030 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1185   .text.FusionAhrsReset:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1191   .text.FusionAhrsReset:00000000 FusionAhrsReset
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1259   .text.FusionAhrsReset:00000044 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1264   .text.FusionAhrsSetSettings:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1270   .text.FusionAhrsSetSettings:00000000 FusionAhrsSetSettings
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1451   .text.FusionAhrsSetSettings:000000e4 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1459   .text.FusionAhrsInitialise:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1465   .text.FusionAhrsInitialise:00000000 FusionAhrsInitialise
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1513   .text.FusionAhrsInitialise:0000002c $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1518   .text.FusionAhrsUpdate:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:1524   .text.FusionAhrsUpdate:00000000 FusionAhrsUpdate
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:2304   .text.FusionAhrsUpdate:000004a0 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:2312   .text.FusionAhrsUpdateExternalHeading:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:2318   .text.FusionAhrsUpdateExternalHeading:00000000 FusionAhrsUpdateExternalHeading
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:2464   .text.FusionAhrsUpdateExternalHeading:000000d8 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:2469   .text.FusionAhrsGetQuaternion:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:2475   .text.FusionAhrsGetQuaternion:00000000 FusionAhrsGetQuaternion
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:2511   .text.FusionAhrsSetQuaternion:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:2517   .text.FusionAhrsSetQuaternion:00000000 FusionAhrsSetQuaternion
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:2551   .text.FusionAhrsGetLinearAcceleration:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:2557   .text.FusionAhrsGetLinearAcceleration:00000000 FusionAhrsGetLinearAcceleration
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:2734   .text.FusionAhrsGetEarthAcceleration:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:2740   .text.FusionAhrsGetEarthAcceleration:00000000 FusionAhrsGetEarthAcceleration
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:2914   .text.FusionAhrsGetInternalStates:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:2920   .text.FusionAhrsGetInternalStates:00000000 FusionAhrsGetInternalStates
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:3041   .text.FusionAhrsGetInternalStates:000000a4 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:3047   .text.FusionAhrsGetFlags:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:3053   .text.FusionAhrsGetFlags:00000000 FusionAhrsGetFlags
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s 			page 87


/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:3121   .text.FusionAhrsSetHeading:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:3127   .text.FusionAhrsSetHeading:00000000 FusionAhrsSetHeading
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:3252   .text.FusionAhrsSetHeading:000000b8 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:3258   .text.FusionAhrsUpdateNoMagnetometer:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:3264   .text.FusionAhrsUpdateNoMagnetometer:00000000 FusionAhrsUpdateNoMagnetometer
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:3328   .text.FusionAhrsUpdateNoMagnetometer:00000054 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccU7NgPZ.s:3333   .rodata:00000000 $d

UNDEFINED SYMBOLS
sqrtf
asinf
sinf
powf
atan2f
cosf
