ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.Serial_Control,"ax",%progbits
  21              		.align	1
  22              		.global	Serial_Control
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	Serial_Control:
  28              	.LFB166:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "can.h"
  22:Core/Src/main.c **** #include "dma.h"
  23:Core/Src/main.c **** #include "i2c.h"
  24:Core/Src/main.c **** #include "spi.h"
  25:Core/Src/main.c **** #include "tim.h"
  26:Core/Src/main.c **** #include "usart.h"
  27:Core/Src/main.c **** #include "gpio.h"
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN Includes */
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 2


  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** #include "headfile.h"
  33:Core/Src/main.c **** #include "string.h"
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END Includes */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PTD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  43:Core/Src/main.c **** /* USER CODE BEGIN PD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** #define BUFFER_SIZE 19  // 根据需要设置缓冲区大小 
  46:Core/Src/main.c **** char input_buffer[BUFFER_SIZE];
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** uint8_t rx_char;
  49:Core/Src/main.c **** uint16_t buffer_index = 0;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PD */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  55:Core/Src/main.c **** /* USER CODE BEGIN PM */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* USER CODE END PM */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* USER CODE BEGIN PV */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** extern int stop_flag; // KEY Button
  65:Core/Src/main.c **** extern FusionAhrs ahrs;
  66:Core/Src/main.c **** extern int control_mode;
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** int control_mode = 1;  // 0: 手柄控制, 1: 串口控制
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** // volatile int new_serial_data_received = 0;
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** int SERIAL_PERIOD_MS = 10; // 100HZ
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** float Vcx = 0;   //   m/s 
  75:Core/Src/main.c **** float Wc = 0;    //   rad/s 
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* USER CODE END PV */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  80:Core/Src/main.c **** void SystemClock_Config(void);
  81:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  82:Core/Src/main.c **** void Serial_Output();
  83:Core/Src/main.c **** void Serial_Input(); // 函数声明
  84:Core/Src/main.c **** void Serial_Control();
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** uint8_t DMA_RX_Buffer[DMA_RX_BUF_SIZE];
  87:Core/Src/main.c **** uint8_t UART1_RX_Buffer[UART_RX_BUF_SIZE];
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 3


  88:Core/Src/main.c **** volatile uint16_t UART1_RX_Size = 0;
  89:Core/Src/main.c **** volatile uint8_t new_serial_data_received = 0;
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** /* USER CODE END PFP */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  94:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** /* USER CODE END 0 */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** /**
  99:Core/Src/main.c ****   * @brief  The application entry point.
 100:Core/Src/main.c ****   * @retval int
 101:Core/Src/main.c ****   */
 102:Core/Src/main.c **** int main(void)
 103:Core/Src/main.c **** {
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE END 1 */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 112:Core/Src/main.c ****   HAL_Init();
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   // USART1_DMA_Init();  // 启动 DMA 串口接收
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* USER CODE END Init */
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /* Configure the system clock */
 121:Core/Src/main.c ****   SystemClock_Config();
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 124:Core/Src/main.c ****   
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* USER CODE END SysInit */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* Initialize all configured peripherals */
 129:Core/Src/main.c ****   MX_GPIO_Init();
 130:Core/Src/main.c ****   MX_DMA_Init();
 131:Core/Src/main.c ****   MX_CAN1_Init();
 132:Core/Src/main.c ****   MX_CAN2_Init();
 133:Core/Src/main.c ****   MX_USART1_UART_Init();
 134:Core/Src/main.c ****   MX_TIM1_Init();
 135:Core/Src/main.c ****   MX_TIM8_Init();
 136:Core/Src/main.c ****   MX_TIM4_Init();
 137:Core/Src/main.c ****   MX_TIM5_Init();
 138:Core/Src/main.c ****   MX_TIM10_Init();
 139:Core/Src/main.c ****   MX_I2C3_Init();
 140:Core/Src/main.c ****   MX_SPI1_Init();
 141:Core/Src/main.c ****   MX_USART6_UART_Init();
 142:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   Init_all();
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 4


 145:Core/Src/main.c ****   clrStruct();
 146:Core/Src/main.c ****   
 147:Core/Src/main.c ****   TaskAdd(Serial_Control, 100); // 100Hz
 148:Core/Src/main.c ****   
 149:Core/Src/main.c ****   TaskAdd(Serial_Output, SERIAL_PERIOD_MS); // 100Hz Serial
 150:Core/Src/main.c ****  
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   TaskAdd(Speed_set, 5); // 200Hz for wheel PID
 153:Core/Src/main.c ****   TaskAdd(IMU_update, IMUdeltaTime * 1000); // 00Hz for updating IMU and print delta time // TaskPr
 154:Core/Src/main.c ****   
 155:Core/Src/main.c ****   TaskAdd(Joystick_motor_control, 10); // 50Hz
 156:Core/Src/main.c ****  
 157:Core/Src/main.c **** //  TaskAdd(ParseGpsBuffer, 100); // 10Hz
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   // (1) Start DMA reception
 160:Core/Src/main.c ****   HAL_UART_Receive_DMA(&huart1, DMA_RX_Buffer, DMA_RX_BUF_SIZE);
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   // (2) Enable the idle interrupt (IDLE interrupt)
 163:Core/Src/main.c ****   __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   /* USER CODE END 2 */
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   /* Infinite loop */
 168:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 169:Core/Src/main.c ****   while (1)
 170:Core/Src/main.c ****   {
 171:Core/Src/main.c ****     /* USER CODE END WHILE */
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****     // led_green_start();
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****     if(stop_flag)  // Stop Driving when stop_flag is true
 178:Core/Src/main.c ****     {
 179:Core/Src/main.c ****       led_red_blink();
 180:Core/Src/main.c ****     }
 181:Core/Src/main.c ****     else
 182:Core/Src/main.c ****     {
 183:Core/Src/main.c ****         TaskRun();
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****         if (new_serial_data_received) {
 186:Core/Src/main.c ****           new_serial_data_received = 0;
 187:Core/Src/main.c ****           Serial_Input((char*)UART1_RX_Buffer);
 188:Core/Src/main.c ****           usart_printf("Received: %s\r\n", UART1_RX_Buffer);
 189:Core/Src/main.c ****       }
 190:Core/Src/main.c ****     }
 191:Core/Src/main.c ****   }
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* USER CODE END 3 */
 194:Core/Src/main.c **** }
 195:Core/Src/main.c **** 
 196:Core/Src/main.c **** /**
 197:Core/Src/main.c ****   * @brief System Clock Configuration
 198:Core/Src/main.c ****   * @retval None
 199:Core/Src/main.c ****   */
 200:Core/Src/main.c **** 
 201:Core/Src/main.c **** void SystemClock_Config(void)
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 5


 202:Core/Src/main.c **** {
 203:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 204:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 207:Core/Src/main.c ****   */
 208:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 212:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 213:Core/Src/main.c ****   */
 214:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 215:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 6;
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 222:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 223:Core/Src/main.c ****   {
 224:Core/Src/main.c ****     Error_Handler();
 225:Core/Src/main.c ****   }
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 228:Core/Src/main.c ****   */
 229:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 230:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 231:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 232:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 233:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 234:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 237:Core/Src/main.c ****   {
 238:Core/Src/main.c ****     Error_Handler();
 239:Core/Src/main.c ****   }
 240:Core/Src/main.c **** }
 241:Core/Src/main.c **** 
 242:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 243:Core/Src/main.c **** 
 244:Core/Src/main.c **** extern float gyro[], accel[];
 245:Core/Src/main.c **** extern FusionOffset offset;
 246:Core/Src/main.c **** extern FusionVector gyroscope;
 247:Core/Src/main.c **** extern FusionVector accelerometer;
 248:Core/Src/main.c **** extern FusionVector magnetometer;
 249:Core/Src/main.c **** float real_vc;
 250:Core/Src/main.c **** float real_w;    //clockwise stands for minus
 251:Core/Src/main.c **** float x, y, z; // local pose
 252:Core/Src/main.c **** 
 253:Core/Src/main.c **** // void USART1_DMA_Init(void)
 254:Core/Src/main.c **** //   {
 255:Core/Src/main.c **** //       // 启动 DMA 接收
 256:Core/Src/main.c **** 
 257:Core/Src/main.c **** 
 258:Core/Src/main.c **** //       HAL_UART_Receive_DMA(&huart1, input_buffer, BUFFER_SIZE);
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 6


 259:Core/Src/main.c **** //   }
 260:Core/Src/main.c **** 
 261:Core/Src/main.c **** 
 262:Core/Src/main.c **** void Serial_Output(){
 263:Core/Src/main.c ****   const FusionQuaternion Q = FusionAhrsGetQuaternion(&ahrs);
 264:Core/Src/main.c ****   const FusionEuler euler = FusionQuaternionToEuler(Q);
 265:Core/Src/main.c ****   const FusionVector LinearAcc = FusionAhrsGetLinearAcceleration(&ahrs);
 266:Core/Src/main.c ****   MOTORrpm2vw(motor_chassis[0].speed_rpm,-motor_chassis[2].speed_rpm,&real_vc,&real_w);
 267:Core/Src/main.c ****   float yaw = FusionDegreesToRadians(euler.angle.yaw), pitch = FusionDegreesToRadians(euler.angle.p
 268:Core/Src/main.c ****   float cos_yaw = cos(yaw), sin_yaw = sin(yaw);
 269:Core/Src/main.c ****   float cos_pitch = cos(pitch), sin_pitch = sin(pitch);
 270:Core/Src/main.c ****   float cos_roll = cos(roll), sin_roll = sin(roll);
 271:Core/Src/main.c ****   float delta_s = real_vc * (float)SERIAL_PERIOD_MS / 1000.0f;
 272:Core/Src/main.c ****   // pose integration
 273:Core/Src/main.c ****   x += (cos_yaw * sin_pitch * sin_roll - sin_yaw * cos_roll) * delta_s;
 274:Core/Src/main.c ****   y += (sin_yaw * sin_pitch * sin_roll + cos_yaw * cos_roll) * delta_s;
 275:Core/Src/main.c ****   z += (cos_pitch * sin_roll) * delta_s;
 276:Core/Src/main.c ****   
 277:Core/Src/main.c ****   // usart_printf("%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",	
 278:Core/Src/main.c ****   //             (int)(x * 10000), (int)(y * 10000), (int)(z * 10000), // pose
 279:Core/Src/main.c ****   //             (int)(Q.element.x * 10000), (int)(Q.element.y * 10000), (int)(Q.element.z * 10000)
 280:Core/Src/main.c ****   //             (int)(0.0f * 10000), (int)(real_vc * 10000), (int)(0.0f * 10000), // linear accele
 281:Core/Src/main.c ****   //             (int)(FusionDegreesToRadians(gyroscope.axis.x) * 10000), 
 282:Core/Src/main.c ****   //             (int)(FusionDegreesToRadians(gyroscope.axis.y) * 10000), 
 283:Core/Src/main.c ****   //             (int)(FusionDegreesToRadians(gyroscope.axis.z) * 10000));
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****     usart_printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",	
 286:Core/Src/main.c ****                       x, y, z, // Position coordinates
 287:Core/Src/main.c ****                       Q.element.x,
 288:Core/Src/main.c ****                       Q.element.y,
 289:Core/Src/main.c ****                       Q.element.z,
 290:Core/Src/main.c ****                       Q.element.w, // Attitude (quaternion)
 291:Core/Src/main.c ****                       0.0f, real_vc, 0.0f, // Linear velocity
 292:Core/Src/main.c ****                       FusionDegreesToRadians(gyroscope.axis.x), 
 293:Core/Src/main.c ****                       FusionDegreesToRadians(gyroscope.axis.y), 
 294:Core/Src/main.c ****                       FusionDegreesToRadians(gyroscope.axis.z), // Angular velocity
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****                       magnetometer.axis.x,
 297:Core/Src/main.c ****                       magnetometer.axis.y, 
 298:Core/Src/main.c ****                       magnetometer.axis.z); // Magnetometer data
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****   //  LongLat2XY(Convert_to_degrees(Save_Data.longitude),Convert_to_degrees(Save_Data.latitude),&gp
 301:Core/Src/main.c **** //  LongLat2XY(120.742925,31.268221,&gps_X0,&gps_Y0);
 302:Core/Src/main.c ****   
 303:Core/Src/main.c ****   // Print to VOFA+
 304:Core/Src/main.c **** //  usart_printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",
 305:Core/Src/main.c **** //      gyroscope.axis.x, gyroscope.axis.y, gyroscope.axis.z,
 306:Core/Src/main.c **** //      acc_x_avg, acc_y_avg, acc_z_avg,
 307:Core/Src/main.c **** //      magnetometer.axis.x, magnetometer.axis.y, magnetometer.axis.z,
 308:Core/Src/main.c **** //      euler.angle.roll, euler.angle.pitch, euler.angle.yaw
 309:Core/Src/main.c **** //  );
 310:Core/Src/main.c ****   
 311:Core/Src/main.c **** //usart_printf("%lf,%lf,%d,%d,%d,%d,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",  
 312:Core/Src/main.c **** //      Convert_to_degrees(Save_Data.latitude),
 313:Core/Src/main.c **** //      Convert_to_degrees(Save_Data.longitude),
 314:Core/Src/main.c **** //      motor_chassis[0].speed_rpm,
 315:Core/Src/main.c **** //      motor_chassis[1].speed_rpm,
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 7


 316:Core/Src/main.c **** //      -motor_chassis[2].speed_rpm,
 317:Core/Src/main.c **** //      -motor_chassis[3].speed_rpm,
 318:Core/Src/main.c **** //      real_vc,
 319:Core/Src/main.c **** //      real_w,
 320:Core/Src/main.c **** //      gyro[2],
 321:Core/Src/main.c **** //      euler.angle.roll,
 322:Core/Src/main.c **** //      euler.angle.pitch,
 323:Core/Src/main.c **** //      euler.angle.yaw,
 324:Core/Src/main.c **** //      LinearAcc.axis.x,
 325:Core/Src/main.c **** //      gps_X-gps_X0,
 326:Core/Src/main.c **** //      gps_Y-gps_Y0
 327:Core/Src/main.c **** //      );
 328:Core/Src/main.c ****       
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****   // usart_printf("%0.3f,%0.3f,%0.3f\n", euler.angle.roll, euler.angle.pitch, euler.angle.yaw);
 331:Core/Src/main.c **** //   PrintGpsBuffer();
 332:Core/Src/main.c **** }
 333:Core/Src/main.c **** 
 334:Core/Src/main.c **** #define MAX_RETRIES 1  // 最大重试次数
 335:Core/Src/main.c **** #define RETRY_TIMEOUT_MS 3  // 每次重试的超时时间，单位毫秒
 336:Core/Src/main.c **** 
 337:Core/Src/main.c **** char failed_input_buffer[BUFFER_SIZE];  // 用于存储解析失败的输入数据
 338:Core/Src/main.c **** char record_input_buffer[BUFFER_SIZE];
 339:Core/Src/main.c **** // void Serial_Input(const char* input_data)
 340:Core/Src/main.c **** // {
 341:Core/Src/main.c **** //     if (control_mode == 1)
 342:Core/Src/main.c **** //     {
 343:Core/Src/main.c **** //         float temp_vcx, temp_wc;
 344:Core/Src/main.c **** //         int retries = 0;  // 重试次数
 345:Core/Src/main.c **** //         // 尝试解析输入数据
 346:Core/Src/main.c **** //         while (retries < MAX_RETRIES) {
 347:Core/Src/main.c **** //             if (sscanf(input_data, "vcx=%f,wc=%f", &temp_vcx, &temp_wc) == 2) {
 348:Core/Src/main.c **** //                 // 如果解析成功，更新Vcx和Wc
 349:Core/Src/main.c **** //                 Vcx = temp_vcx;
 350:Core/Src/main.c **** //                 Wc = temp_wc;
 351:Core/Src/main.c **** //                 return;  // 解析成功，退出函数
 352:Core/Src/main.c **** //             } else {
 353:Core/Src/main.c **** //                 // 如果解析失败，增加重试次数并等待
 354:Core/Src/main.c **** 
 355:Core/Src/main.c **** //                 retries++;
 356:Core/Src/main.c **** 
 357:Core/Src/main.c **** //                 // 将失败的输入数据存入失败缓冲区，以便监视
 358:Core/Src/main.c **** //                 snprintf(failed_input_buffer, sizeof(failed_input_buffer), "Failed input: %s", i
 359:Core/Src/main.c ****                 
 360:Core/Src/main.c **** //                 // 可选择在串口打印失败的输入数据，方便调试
 361:Core/Src/main.c **** //                 // usart_printf("Failed to parse input after %d retries: %s\n", retries, failed_
 362:Core/Src/main.c **** 
 363:Core/Src/main.c **** //                 HAL_Delay(RETRY_TIMEOUT_MS);  // 等待指定时间后重新尝试
 364:Core/Src/main.c **** //             }
 365:Core/Src/main.c **** //         }
 366:Core/Src/main.c **** //         led_green_start();
 367:Core/Src/main.c **** //         // 如果重试次数用尽，表示解析失败
 368:Core/Src/main.c **** //         usart_printf("Failed to parse input after %d retries: %s\n", retries, input_data);
 369:Core/Src/main.c **** //     }
 370:Core/Src/main.c **** // }
 371:Core/Src/main.c **** 
 372:Core/Src/main.c **** 
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 8


 373:Core/Src/main.c **** // void Serial_Input(const char* input_data)
 374:Core/Src/main.c **** // {
 375:Core/Src/main.c **** //     if (control_mode == 1)
 376:Core/Src/main.c **** //     {   
 377:Core/Src/main.c **** //         led_green_start();
 378:Core/Src/main.c **** //         float temp_vcx, temp_wc;
 379:Core/Src/main.c **** //         int retries = 0;  // 重试次数
 380:Core/Src/main.c **** 
 381:Core/Src/main.c **** //         // 尝试解析输入数据
 382:Core/Src/main.c **** //         while (retries < MAX_RETRIES) {
 383:Core/Src/main.c **** //             if (sscanf(input_data, "vcx=%f,wc=%f", &temp_vcx, &temp_wc) == 2) {
 384:Core/Src/main.c **** //                 // 如果解析成功，更新 Vcx 和 Wc
 385:Core/Src/main.c **** //                 Vcx = temp_vcx;
 386:Core/Src/main.c **** //                 Wc = temp_wc;
 387:Core/Src/main.c **** //                 return;  // 解析成功，退出函数
 388:Core/Src/main.c **** //             } else {
 389:Core/Src/main.c **** //                 retries++;
 390:Core/Src/main.c **** //                 HAL_Delay(RETRY_TIMEOUT_MS);  // 等待指定时间后重新尝试
 391:Core/Src/main.c **** //             }
 392:Core/Src/main.c **** //         }
 393:Core/Src/main.c **** //         // 如果解析失败，打印错误信息
 394:Core/Src/main.c **** //         snprintf(failed_input_buffer, sizeof(failed_input_buffer), "Failed input: %s", input_dat
 395:Core/Src/main.c **** //         usart_printf("Failed to parse input after %d retries: %s\n", retries, input_data);
 396:Core/Src/main.c **** //     }
 397:Core/Src/main.c **** // }
 398:Core/Src/main.c **** 
 399:Core/Src/main.c **** void Serial_Input(const char* input_data)
 400:Core/Src/main.c **** {
 401:Core/Src/main.c ****     if (control_mode == 1)
 402:Core/Src/main.c ****     {   
 403:Core/Src/main.c ****         // led_green_start();
 404:Core/Src/main.c ****         float temp_vcx, temp_wc;
 405:Core/Src/main.c ****         snprintf(record_input_buffer, sizeof(record_input_buffer), "%s", input_data);
 406:Core/Src/main.c **** 
 407:Core/Src/main.c ****         // Attempt to parse the input data
 408:Core/Src/main.c ****         if (sscanf(input_data, "vcx=%f,wc=%f\n", &temp_vcx, &temp_wc) == 2) {
 409:Core/Src/main.c ****             // If parsing is successful, update Vcx and Wc
 410:Core/Src/main.c ****             Vcx = temp_vcx;
 411:Core/Src/main.c ****             Wc = temp_wc;
 412:Core/Src/main.c ****             
 413:Core/Src/main.c ****             // Parsing succeeded, exit the function
 414:Core/Src/main.c ****         } 
 415:Core/Src/main.c ****         else {      // If parsing fails, print an error message
 416:Core/Src/main.c ****             // led_red_start();
 417:Core/Src/main.c ****             snprintf(failed_input_buffer, sizeof(failed_input_buffer), "Failed input: %s", input_da
 418:Core/Src/main.c ****         }
 419:Core/Src/main.c ****     }
 420:Core/Src/main.c **** }
 421:Core/Src/main.c **** 
 422:Core/Src/main.c **** 
 423:Core/Src/main.c **** // void Serial_Control(void)
 424:Core/Src/main.c **** // {
 425:Core/Src/main.c **** //     if (new_serial_data_received) {
 426:Core/Src/main.c **** //         // 解析串口输入的数据，更新 Vcx 和 Wc
 427:Core/Src/main.c **** //         Serial_Input(input_buffer);
 428:Core/Src/main.c ****         
 429:Core/Src/main.c **** //         // 重置标志位
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 9


 430:Core/Src/main.c **** //         new_serial_data_received = 0;
 431:Core/Src/main.c **** //         memset(input_buffer, 0, BUFFER_SIZE);  // 清空接收缓冲区
 432:Core/Src/main.c **** //     }
 433:Core/Src/main.c **** // }
 434:Core/Src/main.c **** 
 435:Core/Src/main.c **** 
 436:Core/Src/main.c **** void Serial_Control(void)
 437:Core/Src/main.c **** {
  29              		.loc 1 437 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 438:Core/Src/main.c ****     // if (new_serial_data_received) {
 439:Core/Src/main.c ****     //     new_serial_data_received = 0;
 440:Core/Src/main.c **** 
 441:Core/Src/main.c ****     //     // 这里的 UART1_RX_Buffer[] 就是本次数据
 442:Core/Src/main.c ****     //     UART1_RX_Buffer[UART1_RX_Size] = '\0';
 443:Core/Src/main.c ****     //     Serial_Input((char*)UART1_RX_Buffer);
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****     //     // 你也可在这里 memset(UART1_RX_Buffer, 0, UART_RX_BUF_SIZE);
 446:Core/Src/main.c ****     // }
 447:Core/Src/main.c **** }
  34              		.loc 1 447 1 view .LVU1
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE166:
  39              		.section	.text.FusionAsin,"ax",%progbits
  40              		.align	1
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  45              	FusionAsin:
  46              	.LVL0:
  47              	.LFB139:
  48              		.file 2 "Core/Inc/FusionMath.h"
   1:Core/Inc/FusionMath.h **** /**
   2:Core/Inc/FusionMath.h ****  * @file FusionMath.h
   3:Core/Inc/FusionMath.h ****  * @author Seb Madgwick
   4:Core/Inc/FusionMath.h ****  * @brief Math library.
   5:Core/Inc/FusionMath.h ****  */
   6:Core/Inc/FusionMath.h **** 
   7:Core/Inc/FusionMath.h **** #ifndef FUSION_MATH_H
   8:Core/Inc/FusionMath.h **** #define FUSION_MATH_H
   9:Core/Inc/FusionMath.h **** 
  10:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
  11:Core/Inc/FusionMath.h **** // Includes
  12:Core/Inc/FusionMath.h **** 
  13:Core/Inc/FusionMath.h **** #include <math.h> // M_PI, sqrtf, atan2f, asinf
  14:Core/Inc/FusionMath.h **** #include <stdbool.h>
  15:Core/Inc/FusionMath.h **** #include <stdint.h>
  16:Core/Inc/FusionMath.h **** 
  17:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
  18:Core/Inc/FusionMath.h **** // Definitions
  19:Core/Inc/FusionMath.h **** 
  20:Core/Inc/FusionMath.h **** /**
  21:Core/Inc/FusionMath.h ****  * @brief 3D vector.
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 10


  22:Core/Inc/FusionMath.h ****  */
  23:Core/Inc/FusionMath.h **** typedef union {
  24:Core/Inc/FusionMath.h ****     float array[3];
  25:Core/Inc/FusionMath.h **** 
  26:Core/Inc/FusionMath.h ****     struct {
  27:Core/Inc/FusionMath.h ****         float x;
  28:Core/Inc/FusionMath.h ****         float y;
  29:Core/Inc/FusionMath.h ****         float z;
  30:Core/Inc/FusionMath.h ****     } axis;
  31:Core/Inc/FusionMath.h **** } FusionVector;
  32:Core/Inc/FusionMath.h **** 
  33:Core/Inc/FusionMath.h **** /**
  34:Core/Inc/FusionMath.h ****  * @brief Quaternion.
  35:Core/Inc/FusionMath.h ****  */
  36:Core/Inc/FusionMath.h **** typedef union {
  37:Core/Inc/FusionMath.h ****     float array[4];
  38:Core/Inc/FusionMath.h **** 
  39:Core/Inc/FusionMath.h ****     struct {
  40:Core/Inc/FusionMath.h ****         float w;
  41:Core/Inc/FusionMath.h ****         float x;
  42:Core/Inc/FusionMath.h ****         float y;
  43:Core/Inc/FusionMath.h ****         float z;
  44:Core/Inc/FusionMath.h ****     } element;
  45:Core/Inc/FusionMath.h **** } FusionQuaternion;
  46:Core/Inc/FusionMath.h **** 
  47:Core/Inc/FusionMath.h **** /**
  48:Core/Inc/FusionMath.h ****  * @brief 3x3 matrix in row-major order.
  49:Core/Inc/FusionMath.h ****  * See http://en.wikipedia.org/wiki/Row-major_order
  50:Core/Inc/FusionMath.h ****  */
  51:Core/Inc/FusionMath.h **** typedef union {
  52:Core/Inc/FusionMath.h ****     float array[3][3];
  53:Core/Inc/FusionMath.h **** 
  54:Core/Inc/FusionMath.h ****     struct {
  55:Core/Inc/FusionMath.h ****         float xx;
  56:Core/Inc/FusionMath.h ****         float xy;
  57:Core/Inc/FusionMath.h ****         float xz;
  58:Core/Inc/FusionMath.h ****         float yx;
  59:Core/Inc/FusionMath.h ****         float yy;
  60:Core/Inc/FusionMath.h ****         float yz;
  61:Core/Inc/FusionMath.h ****         float zx;
  62:Core/Inc/FusionMath.h ****         float zy;
  63:Core/Inc/FusionMath.h ****         float zz;
  64:Core/Inc/FusionMath.h ****     } element;
  65:Core/Inc/FusionMath.h **** } FusionMatrix;
  66:Core/Inc/FusionMath.h **** 
  67:Core/Inc/FusionMath.h **** /**
  68:Core/Inc/FusionMath.h ****  * @brief Euler angles.  Roll, pitch, and yaw correspond to rotations around
  69:Core/Inc/FusionMath.h ****  * X, Y, and Z respectively.
  70:Core/Inc/FusionMath.h ****  */
  71:Core/Inc/FusionMath.h **** typedef union {
  72:Core/Inc/FusionMath.h ****     float array[3];
  73:Core/Inc/FusionMath.h **** 
  74:Core/Inc/FusionMath.h ****     struct {
  75:Core/Inc/FusionMath.h ****         float roll;
  76:Core/Inc/FusionMath.h ****         float pitch;
  77:Core/Inc/FusionMath.h ****         float yaw;
  78:Core/Inc/FusionMath.h ****     } angle;
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 11


  79:Core/Inc/FusionMath.h **** } FusionEuler;
  80:Core/Inc/FusionMath.h **** 
  81:Core/Inc/FusionMath.h **** /**
  82:Core/Inc/FusionMath.h ****  * @brief Vector of zeros.
  83:Core/Inc/FusionMath.h ****  */
  84:Core/Inc/FusionMath.h **** #define FUSION_VECTOR_ZERO ((FusionVector){ .array = {0.0f, 0.0f, 0.0f} })
  85:Core/Inc/FusionMath.h **** 
  86:Core/Inc/FusionMath.h **** /**
  87:Core/Inc/FusionMath.h ****  * @brief Vector of ones.
  88:Core/Inc/FusionMath.h ****  */
  89:Core/Inc/FusionMath.h **** #define FUSION_VECTOR_ONES ((FusionVector){ .array = {1.0f, 1.0f, 1.0f} })
  90:Core/Inc/FusionMath.h **** 
  91:Core/Inc/FusionMath.h **** /**
  92:Core/Inc/FusionMath.h ****  * @brief Identity quaternion.
  93:Core/Inc/FusionMath.h ****  */
  94:Core/Inc/FusionMath.h **** #define FUSION_IDENTITY_QUATERNION ((FusionQuaternion){ .array = {1.0f, 0.0f, 0.0f, 0.0f} })
  95:Core/Inc/FusionMath.h **** 
  96:Core/Inc/FusionMath.h **** /**
  97:Core/Inc/FusionMath.h ****  * @brief Identity matrix.
  98:Core/Inc/FusionMath.h ****  */
  99:Core/Inc/FusionMath.h **** #define FUSION_IDENTITY_MATRIX ((FusionMatrix){ .array = {{1.0f, 0.0f, 0.0f}, {0.0f, 1.0f, 0.0f}, {
 100:Core/Inc/FusionMath.h **** 
 101:Core/Inc/FusionMath.h **** /**
 102:Core/Inc/FusionMath.h ****  * @brief Euler angles of zero.
 103:Core/Inc/FusionMath.h ****  */
 104:Core/Inc/FusionMath.h **** #define FUSION_EULER_ZERO ((FusionEuler){ .array = {0.0f, 0.0f, 0.0f} })
 105:Core/Inc/FusionMath.h **** 
 106:Core/Inc/FusionMath.h **** /**
 107:Core/Inc/FusionMath.h ****  * @brief Pi. May not be defined in math.h.
 108:Core/Inc/FusionMath.h ****  */
 109:Core/Inc/FusionMath.h **** #ifndef M_PI
 110:Core/Inc/FusionMath.h **** #define M_PI (3.14159265358979323846)
 111:Core/Inc/FusionMath.h **** #endif
 112:Core/Inc/FusionMath.h **** 
 113:Core/Inc/FusionMath.h **** /**
 114:Core/Inc/FusionMath.h ****  * @brief Include this definition or add as a preprocessor definition to use
 115:Core/Inc/FusionMath.h ****  * normal square root operations.
 116:Core/Inc/FusionMath.h ****  */
 117:Core/Inc/FusionMath.h **** //#define FUSION_USE_NORMAL_SQRT
 118:Core/Inc/FusionMath.h **** 
 119:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 120:Core/Inc/FusionMath.h **** // Inline functions - Degrees and radians conversion
 121:Core/Inc/FusionMath.h **** 
 122:Core/Inc/FusionMath.h **** /**
 123:Core/Inc/FusionMath.h ****  * @brief Converts degrees to radians.
 124:Core/Inc/FusionMath.h ****  * @param degrees Degrees.
 125:Core/Inc/FusionMath.h ****  * @return Radians.
 126:Core/Inc/FusionMath.h ****  */
 127:Core/Inc/FusionMath.h **** static inline float FusionDegreesToRadians(const float degrees) {
 128:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 129:Core/Inc/FusionMath.h **** }
 130:Core/Inc/FusionMath.h **** 
 131:Core/Inc/FusionMath.h **** /**
 132:Core/Inc/FusionMath.h ****  * @brief Converts radians to degrees.
 133:Core/Inc/FusionMath.h ****  * @param radians Radians.
 134:Core/Inc/FusionMath.h ****  * @return Degrees.
 135:Core/Inc/FusionMath.h ****  */
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 12


 136:Core/Inc/FusionMath.h **** static inline float FusionRadiansToDegrees(const float radians) {
 137:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 138:Core/Inc/FusionMath.h **** }
 139:Core/Inc/FusionMath.h **** 
 140:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 141:Core/Inc/FusionMath.h **** // Inline functions - Arc sine
 142:Core/Inc/FusionMath.h **** 
 143:Core/Inc/FusionMath.h **** /**
 144:Core/Inc/FusionMath.h ****  * @brief Returns the arc sine of the value.
 145:Core/Inc/FusionMath.h ****  * @param value Value.
 146:Core/Inc/FusionMath.h ****  * @return Arc sine of the value.
 147:Core/Inc/FusionMath.h ****  */
 148:Core/Inc/FusionMath.h **** static inline float FusionAsin(const float value) {
  49              		.loc 2 148 51 view -0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
 149:Core/Inc/FusionMath.h ****     if (value <= -1.0f) {
  53              		.loc 2 149 5 view .LVU3
  54              		.loc 2 149 8 is_stmt 0 view .LVU4
  55 0000 FFEE007A 		vmov.f32	s15, #-1.0e+0
  56 0004 B4EEE70A 		vcmpe.f32	s0, s15
  57 0008 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  58 000c 0DD9     		bls	.L4
 150:Core/Inc/FusionMath.h ****         return (float) M_PI / -2.0f;
 151:Core/Inc/FusionMath.h ****     }
 152:Core/Inc/FusionMath.h ****     if (value >= 1.0f) {
  59              		.loc 2 152 5 is_stmt 1 view .LVU5
  60              		.loc 2 152 8 is_stmt 0 view .LVU6
  61 000e F7EE007A 		vmov.f32	s15, #1.0e+0
  62 0012 B4EEE70A 		vcmpe.f32	s0, s15
  63 0016 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  64 001a 02DB     		blt	.L10
 153:Core/Inc/FusionMath.h ****         return (float) M_PI / 2.0f;
  65              		.loc 2 153 29 view .LVU7
  66 001c 9FED040A 		vldr.32	s0, .L11
  67              	.LVL1:
 154:Core/Inc/FusionMath.h ****     }
 155:Core/Inc/FusionMath.h ****     return asinf(value);
 156:Core/Inc/FusionMath.h **** }
  68              		.loc 2 156 1 view .LVU8
  69 0020 7047     		bx	lr
  70              	.LVL2:
  71              	.L10:
 148:Core/Inc/FusionMath.h ****     if (value <= -1.0f) {
  72              		.loc 2 148 51 view .LVU9
  73 0022 08B5     		push	{r3, lr}
  74              	.LCFI0:
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 3, -8
  77              		.cfi_offset 14, -4
 155:Core/Inc/FusionMath.h **** }
  78              		.loc 2 155 5 is_stmt 1 view .LVU10
 155:Core/Inc/FusionMath.h **** }
  79              		.loc 2 155 12 is_stmt 0 view .LVU11
  80 0024 FFF7FEFF 		bl	asinf
  81              	.LVL3:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 13


  82              		.loc 2 156 1 view .LVU12
  83 0028 08BD     		pop	{r3, pc}
  84              	.LVL4:
  85              	.L4:
  86              	.LCFI1:
  87              		.cfi_def_cfa_offset 0
  88              		.cfi_restore 3
  89              		.cfi_restore 14
 150:Core/Inc/FusionMath.h ****     }
  90              		.loc 2 150 29 view .LVU13
  91 002a 9FED020A 		vldr.32	s0, .L11+4
  92              	.LVL5:
 150:Core/Inc/FusionMath.h ****     }
  93              		.loc 2 150 29 view .LVU14
  94 002e 7047     		bx	lr
  95              	.L12:
  96              		.align	2
  97              	.L11:
  98 0030 DB0FC93F 		.word	1070141403
  99 0034 DB0FC9BF 		.word	-1077342245
 100              		.cfi_endproc
 101              	.LFE139:
 103              		.section	.text.FusionQuaternionToEuler,"ax",%progbits
 104              		.align	1
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 109              	FusionQuaternionToEuler:
 110              	.LFB158:
 157:Core/Inc/FusionMath.h **** 
 158:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 159:Core/Inc/FusionMath.h **** // Inline functions - Fast inverse square root
 160:Core/Inc/FusionMath.h **** 
 161:Core/Inc/FusionMath.h **** #ifndef FUSION_USE_NORMAL_SQRT
 162:Core/Inc/FusionMath.h **** 
 163:Core/Inc/FusionMath.h **** /**
 164:Core/Inc/FusionMath.h ****  * @brief Calculates the reciprocal of the square root.
 165:Core/Inc/FusionMath.h ****  * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 166:Core/Inc/FusionMath.h ****  * @param x Operand.
 167:Core/Inc/FusionMath.h ****  * @return Reciprocal of the square root of x.
 168:Core/Inc/FusionMath.h ****  */
 169:Core/Inc/FusionMath.h **** static inline float FusionFastInverseSqrt(const float x) {
 170:Core/Inc/FusionMath.h **** 
 171:Core/Inc/FusionMath.h ****     typedef union {
 172:Core/Inc/FusionMath.h ****         float f;
 173:Core/Inc/FusionMath.h ****         int32_t i;
 174:Core/Inc/FusionMath.h ****     } Union32;
 175:Core/Inc/FusionMath.h **** 
 176:Core/Inc/FusionMath.h ****     Union32 union32 = {.f = x};
 177:Core/Inc/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 178:Core/Inc/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 179:Core/Inc/FusionMath.h **** }
 180:Core/Inc/FusionMath.h **** 
 181:Core/Inc/FusionMath.h **** #endif
 182:Core/Inc/FusionMath.h **** 
 183:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 184:Core/Inc/FusionMath.h **** // Inline functions - Vector operations
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 14


 185:Core/Inc/FusionMath.h **** 
 186:Core/Inc/FusionMath.h **** /**
 187:Core/Inc/FusionMath.h ****  * @brief Returns true if the vector is zero.
 188:Core/Inc/FusionMath.h ****  * @param vector Vector.
 189:Core/Inc/FusionMath.h ****  * @return True if the vector is zero.
 190:Core/Inc/FusionMath.h ****  */
 191:Core/Inc/FusionMath.h **** static inline bool FusionVectorIsZero(const FusionVector vector) {
 192:Core/Inc/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 193:Core/Inc/FusionMath.h **** }
 194:Core/Inc/FusionMath.h **** 
 195:Core/Inc/FusionMath.h **** /**
 196:Core/Inc/FusionMath.h ****  * @brief Returns the sum of two vectors.
 197:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 198:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 199:Core/Inc/FusionMath.h ****  * @return Sum of two vectors.
 200:Core/Inc/FusionMath.h ****  */
 201:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) 
 202:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 203:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 204:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y + vectorB.axis.y,
 205:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z + vectorB.axis.z,
 206:Core/Inc/FusionMath.h ****     }};
 207:Core/Inc/FusionMath.h ****     return result;
 208:Core/Inc/FusionMath.h **** }
 209:Core/Inc/FusionMath.h **** 
 210:Core/Inc/FusionMath.h **** /**
 211:Core/Inc/FusionMath.h ****  * @brief Returns vector B subtracted from vector A.
 212:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 213:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 214:Core/Inc/FusionMath.h ****  * @return Vector B subtracted from vector A.
 215:Core/Inc/FusionMath.h ****  */
 216:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vect
 217:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 218:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 219:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y - vectorB.axis.y,
 220:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z - vectorB.axis.z,
 221:Core/Inc/FusionMath.h ****     }};
 222:Core/Inc/FusionMath.h ****     return result;
 223:Core/Inc/FusionMath.h **** }
 224:Core/Inc/FusionMath.h **** 
 225:Core/Inc/FusionMath.h **** /**
 226:Core/Inc/FusionMath.h ****  * @brief Returns the sum of the elements.
 227:Core/Inc/FusionMath.h ****  * @param vector Vector.
 228:Core/Inc/FusionMath.h ****  * @return Sum of the elements.
 229:Core/Inc/FusionMath.h ****  */
 230:Core/Inc/FusionMath.h **** static inline float FusionVectorSum(const FusionVector vector) {
 231:Core/Inc/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 232:Core/Inc/FusionMath.h **** }
 233:Core/Inc/FusionMath.h **** 
 234:Core/Inc/FusionMath.h **** /**
 235:Core/Inc/FusionMath.h ****  * @brief Returns the multiplication of a vector by a scalar.
 236:Core/Inc/FusionMath.h ****  * @param vector Vector.
 237:Core/Inc/FusionMath.h ****  * @param scalar Scalar.
 238:Core/Inc/FusionMath.h ****  * @return Multiplication of a vector by a scalar.
 239:Core/Inc/FusionMath.h ****  */
 240:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar
 241:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 15


 242:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 243:Core/Inc/FusionMath.h ****             .y = vector.axis.y * scalar,
 244:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 245:Core/Inc/FusionMath.h ****     }};
 246:Core/Inc/FusionMath.h ****     return result;
 247:Core/Inc/FusionMath.h **** }
 248:Core/Inc/FusionMath.h **** 
 249:Core/Inc/FusionMath.h **** /**
 250:Core/Inc/FusionMath.h ****  * @brief Calculates the Hadamard product (element-wise multiplication).
 251:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 252:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 253:Core/Inc/FusionMath.h ****  * @return Hadamard product.
 254:Core/Inc/FusionMath.h ****  */
 255:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVect
 256:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 257:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 258:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y * vectorB.axis.y,
 259:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z * vectorB.axis.z,
 260:Core/Inc/FusionMath.h ****     }};
 261:Core/Inc/FusionMath.h ****     return result;
 262:Core/Inc/FusionMath.h **** }
 263:Core/Inc/FusionMath.h **** 
 264:Core/Inc/FusionMath.h **** /**
 265:Core/Inc/FusionMath.h ****  * @brief Returns the cross product.
 266:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 267:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 268:Core/Inc/FusionMath.h ****  * @return Cross product.
 269:Core/Inc/FusionMath.h ****  */
 270:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector 
 271:Core/Inc/FusionMath.h **** #define A vectorA.axis
 272:Core/Inc/FusionMath.h **** #define B vectorB.axis
 273:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 274:Core/Inc/FusionMath.h ****             .x = A.y * B.z - A.z * B.y,
 275:Core/Inc/FusionMath.h ****             .y = A.z * B.x - A.x * B.z,
 276:Core/Inc/FusionMath.h ****             .z = A.x * B.y - A.y * B.x,
 277:Core/Inc/FusionMath.h ****     }};
 278:Core/Inc/FusionMath.h ****     return result;
 279:Core/Inc/FusionMath.h **** #undef A
 280:Core/Inc/FusionMath.h **** #undef B
 281:Core/Inc/FusionMath.h **** }
 282:Core/Inc/FusionMath.h **** 
 283:Core/Inc/FusionMath.h **** /**
 284:Core/Inc/FusionMath.h ****  * @brief Returns the dot product.
 285:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 286:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 287:Core/Inc/FusionMath.h ****  * @return Dot product.
 288:Core/Inc/FusionMath.h ****  */
 289:Core/Inc/FusionMath.h **** static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) 
 290:Core/Inc/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 291:Core/Inc/FusionMath.h **** }
 292:Core/Inc/FusionMath.h **** 
 293:Core/Inc/FusionMath.h **** /**
 294:Core/Inc/FusionMath.h ****  * @brief Returns the vector magnitude squared.
 295:Core/Inc/FusionMath.h ****  * @param vector Vector.
 296:Core/Inc/FusionMath.h ****  * @return Vector magnitude squared.
 297:Core/Inc/FusionMath.h ****  */
 298:Core/Inc/FusionMath.h **** static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 16


 299:Core/Inc/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 300:Core/Inc/FusionMath.h **** }
 301:Core/Inc/FusionMath.h **** 
 302:Core/Inc/FusionMath.h **** /**
 303:Core/Inc/FusionMath.h ****  * @brief Returns the vector magnitude.
 304:Core/Inc/FusionMath.h ****  * @param vector Vector.
 305:Core/Inc/FusionMath.h ****  * @return Vector magnitude.
 306:Core/Inc/FusionMath.h ****  */
 307:Core/Inc/FusionMath.h **** static inline float FusionVectorMagnitude(const FusionVector vector) {
 308:Core/Inc/FusionMath.h ****     return sqrtf(FusionVectorMagnitudeSquared(vector));
 309:Core/Inc/FusionMath.h **** }
 310:Core/Inc/FusionMath.h **** 
 311:Core/Inc/FusionMath.h **** /**
 312:Core/Inc/FusionMath.h ****  * @brief Returns the normalised vector.
 313:Core/Inc/FusionMath.h ****  * @param vector Vector.
 314:Core/Inc/FusionMath.h ****  * @return Normalised vector.
 315:Core/Inc/FusionMath.h ****  */
 316:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 317:Core/Inc/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 318:Core/Inc/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
 319:Core/Inc/FusionMath.h **** #else
 320:Core/Inc/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 321:Core/Inc/FusionMath.h **** #endif
 322:Core/Inc/FusionMath.h ****     return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 323:Core/Inc/FusionMath.h **** }
 324:Core/Inc/FusionMath.h **** 
 325:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 326:Core/Inc/FusionMath.h **** // Inline functions - Quaternion operations
 327:Core/Inc/FusionMath.h **** 
 328:Core/Inc/FusionMath.h **** /**
 329:Core/Inc/FusionMath.h ****  * @brief Returns the sum of two quaternions.
 330:Core/Inc/FusionMath.h ****  * @param quaternionA Quaternion A.
 331:Core/Inc/FusionMath.h ****  * @param quaternionB Quaternion B.
 332:Core/Inc/FusionMath.h ****  * @return Sum of two quaternions.
 333:Core/Inc/FusionMath.h ****  */
 334:Core/Inc/FusionMath.h **** static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const Fusion
 335:Core/Inc/FusionMath.h ****     const FusionQuaternion result = {.element = {
 336:Core/Inc/FusionMath.h ****             .w = quaternionA.element.w + quaternionB.element.w,
 337:Core/Inc/FusionMath.h ****             .x = quaternionA.element.x + quaternionB.element.x,
 338:Core/Inc/FusionMath.h ****             .y = quaternionA.element.y + quaternionB.element.y,
 339:Core/Inc/FusionMath.h ****             .z = quaternionA.element.z + quaternionB.element.z,
 340:Core/Inc/FusionMath.h ****     }};
 341:Core/Inc/FusionMath.h ****     return result;
 342:Core/Inc/FusionMath.h **** }
 343:Core/Inc/FusionMath.h **** 
 344:Core/Inc/FusionMath.h **** /**
 345:Core/Inc/FusionMath.h ****  * @brief Returns the multiplication of two quaternions.
 346:Core/Inc/FusionMath.h ****  * @param quaternionA Quaternion A (to be post-multiplied).
 347:Core/Inc/FusionMath.h ****  * @param quaternionB Quaternion B (to be pre-multiplied).
 348:Core/Inc/FusionMath.h ****  * @return Multiplication of two quaternions.
 349:Core/Inc/FusionMath.h ****  */
 350:Core/Inc/FusionMath.h **** static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const F
 351:Core/Inc/FusionMath.h **** #define A quaternionA.element
 352:Core/Inc/FusionMath.h **** #define B quaternionB.element
 353:Core/Inc/FusionMath.h ****     const FusionQuaternion result = {.element = {
 354:Core/Inc/FusionMath.h ****             .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 355:Core/Inc/FusionMath.h ****             .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 17


 356:Core/Inc/FusionMath.h ****             .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 357:Core/Inc/FusionMath.h ****             .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 358:Core/Inc/FusionMath.h ****     }};
 359:Core/Inc/FusionMath.h ****     return result;
 360:Core/Inc/FusionMath.h **** #undef A
 361:Core/Inc/FusionMath.h **** #undef B
 362:Core/Inc/FusionMath.h **** }
 363:Core/Inc/FusionMath.h **** 
 364:Core/Inc/FusionMath.h **** /**
 365:Core/Inc/FusionMath.h ****  * @brief Returns the multiplication of a quaternion with a vector.  This is a
 366:Core/Inc/FusionMath.h ****  * normal quaternion multiplication where the vector is treated a
 367:Core/Inc/FusionMath.h ****  * quaternion with a W element value of zero.  The quaternion is post-
 368:Core/Inc/FusionMath.h ****  * multiplied by the vector.
 369:Core/Inc/FusionMath.h ****  * @param quaternion Quaternion.
 370:Core/Inc/FusionMath.h ****  * @param vector Vector.
 371:Core/Inc/FusionMath.h ****  * @return Multiplication of a quaternion with a vector.
 372:Core/Inc/FusionMath.h ****  */
 373:Core/Inc/FusionMath.h **** static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, co
 374:Core/Inc/FusionMath.h **** #define Q quaternion.element
 375:Core/Inc/FusionMath.h **** #define V vector.axis
 376:Core/Inc/FusionMath.h ****     const FusionQuaternion result = {.element = {
 377:Core/Inc/FusionMath.h ****             .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 378:Core/Inc/FusionMath.h ****             .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 379:Core/Inc/FusionMath.h ****             .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 380:Core/Inc/FusionMath.h ****             .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 381:Core/Inc/FusionMath.h ****     }};
 382:Core/Inc/FusionMath.h ****     return result;
 383:Core/Inc/FusionMath.h **** #undef Q
 384:Core/Inc/FusionMath.h **** #undef V
 385:Core/Inc/FusionMath.h **** }
 386:Core/Inc/FusionMath.h **** 
 387:Core/Inc/FusionMath.h **** /**
 388:Core/Inc/FusionMath.h ****  * @brief Returns the normalised quaternion.
 389:Core/Inc/FusionMath.h ****  * @param quaternion Quaternion.
 390:Core/Inc/FusionMath.h ****  * @return Normalised quaternion.
 391:Core/Inc/FusionMath.h ****  */
 392:Core/Inc/FusionMath.h **** static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 393:Core/Inc/FusionMath.h **** #define Q quaternion.element
 394:Core/Inc/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 395:Core/Inc/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 396:Core/Inc/FusionMath.h **** #else
 397:Core/Inc/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z
 398:Core/Inc/FusionMath.h **** #endif
 399:Core/Inc/FusionMath.h ****     const FusionQuaternion result = {.element = {
 400:Core/Inc/FusionMath.h ****             .w = Q.w * magnitudeReciprocal,
 401:Core/Inc/FusionMath.h ****             .x = Q.x * magnitudeReciprocal,
 402:Core/Inc/FusionMath.h ****             .y = Q.y * magnitudeReciprocal,
 403:Core/Inc/FusionMath.h ****             .z = Q.z * magnitudeReciprocal,
 404:Core/Inc/FusionMath.h ****     }};
 405:Core/Inc/FusionMath.h ****     return result;
 406:Core/Inc/FusionMath.h **** #undef Q
 407:Core/Inc/FusionMath.h **** }
 408:Core/Inc/FusionMath.h **** 
 409:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 410:Core/Inc/FusionMath.h **** // Inline functions - Matrix operations
 411:Core/Inc/FusionMath.h **** 
 412:Core/Inc/FusionMath.h **** /**
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 18


 413:Core/Inc/FusionMath.h ****  * @brief Returns the multiplication of a matrix with a vector.
 414:Core/Inc/FusionMath.h ****  * @param matrix Matrix.
 415:Core/Inc/FusionMath.h ****  * @param vector Vector.
 416:Core/Inc/FusionMath.h ****  * @return Multiplication of a matrix with a vector.
 417:Core/Inc/FusionMath.h ****  */
 418:Core/Inc/FusionMath.h **** static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector
 419:Core/Inc/FusionMath.h **** #define R matrix.element
 420:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 421:Core/Inc/FusionMath.h ****             .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 422:Core/Inc/FusionMath.h ****             .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 423:Core/Inc/FusionMath.h ****             .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 424:Core/Inc/FusionMath.h ****     }};
 425:Core/Inc/FusionMath.h ****     return result;
 426:Core/Inc/FusionMath.h **** #undef R
 427:Core/Inc/FusionMath.h **** }
 428:Core/Inc/FusionMath.h **** 
 429:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 430:Core/Inc/FusionMath.h **** // Inline functions - Conversion operations
 431:Core/Inc/FusionMath.h **** 
 432:Core/Inc/FusionMath.h **** /**
 433:Core/Inc/FusionMath.h ****  * @brief Converts a quaternion to a rotation matrix.
 434:Core/Inc/FusionMath.h ****  * @param quaternion Quaternion.
 435:Core/Inc/FusionMath.h ****  * @return Rotation matrix.
 436:Core/Inc/FusionMath.h ****  */
 437:Core/Inc/FusionMath.h **** static inline FusionMatrix FusionQuaternionToMatrix(const FusionQuaternion quaternion) {
 438:Core/Inc/FusionMath.h **** #define Q quaternion.element
 439:Core/Inc/FusionMath.h ****     const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 440:Core/Inc/FusionMath.h ****     const float qwqx = Q.w * Q.x;
 441:Core/Inc/FusionMath.h ****     const float qwqy = Q.w * Q.y;
 442:Core/Inc/FusionMath.h ****     const float qwqz = Q.w * Q.z;
 443:Core/Inc/FusionMath.h ****     const float qxqy = Q.x * Q.y;
 444:Core/Inc/FusionMath.h ****     const float qxqz = Q.x * Q.z;
 445:Core/Inc/FusionMath.h ****     const float qyqz = Q.y * Q.z;
 446:Core/Inc/FusionMath.h ****     const FusionMatrix matrix = {.element = {
 447:Core/Inc/FusionMath.h ****             .xx = 2.0f * (qwqw - 0.5f + Q.x * Q.x),
 448:Core/Inc/FusionMath.h ****             .xy = 2.0f * (qxqy - qwqz),
 449:Core/Inc/FusionMath.h ****             .xz = 2.0f * (qxqz + qwqy),
 450:Core/Inc/FusionMath.h ****             .yx = 2.0f * (qxqy + qwqz),
 451:Core/Inc/FusionMath.h ****             .yy = 2.0f * (qwqw - 0.5f + Q.y * Q.y),
 452:Core/Inc/FusionMath.h ****             .yz = 2.0f * (qyqz - qwqx),
 453:Core/Inc/FusionMath.h ****             .zx = 2.0f * (qxqz - qwqy),
 454:Core/Inc/FusionMath.h ****             .zy = 2.0f * (qyqz + qwqx),
 455:Core/Inc/FusionMath.h ****             .zz = 2.0f * (qwqw - 0.5f + Q.z * Q.z),
 456:Core/Inc/FusionMath.h ****     }};
 457:Core/Inc/FusionMath.h ****     return matrix;
 458:Core/Inc/FusionMath.h **** #undef Q
 459:Core/Inc/FusionMath.h **** }
 460:Core/Inc/FusionMath.h **** 
 461:Core/Inc/FusionMath.h **** /**
 462:Core/Inc/FusionMath.h ****  * @brief Converts a quaternion to ZYX Euler angles in degrees.
 463:Core/Inc/FusionMath.h ****  * @param quaternion Quaternion.
 464:Core/Inc/FusionMath.h ****  * @return Euler angles in degrees.
 465:Core/Inc/FusionMath.h ****  */
 466:Core/Inc/FusionMath.h **** static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 111              		.loc 2 466 86 is_stmt 1 view -0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 56
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 19


 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115 0000 00B5     		push	{lr}
 116              	.LCFI2:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 14, -4
 119 0002 2DED068B 		vpush.64	{d8, d9, d10}
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 28
 122              		.cfi_offset 80, -28
 123              		.cfi_offset 81, -24
 124              		.cfi_offset 82, -20
 125              		.cfi_offset 83, -16
 126              		.cfi_offset 84, -12
 127              		.cfi_offset 85, -8
 128 0006 8FB0     		sub	sp, sp, #60
 129              	.LCFI4:
 130              		.cfi_def_cfa_offset 88
 131 0008 B0EE409A 		vmov.f32	s18, s0
 132 000c F0EE609A 		vmov.f32	s19, s1
 133 0010 B0EE418A 		vmov.f32	s16, s2
 134 0014 F0EE618A 		vmov.f32	s17, s3
 135 0018 8DED040A 		vstr.32	s0, [sp, #16]
 136 001c CDED050A 		vstr.32	s1, [sp, #20]
 137 0020 8DED061A 		vstr.32	s2, [sp, #24]
 138 0024 CDED071A 		vstr.32	s3, [sp, #28]
 467:Core/Inc/FusionMath.h **** #define Q quaternion.element
 468:Core/Inc/FusionMath.h ****     const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated 
 139              		.loc 2 468 5 view .LVU16
 140              		.loc 2 468 49 is_stmt 0 view .LVU17
 141 0028 61EE017A 		vmul.f32	s15, s2, s2
 142              		.loc 2 468 17 view .LVU18
 143 002c B6EE00AA 		vmov.f32	s20, #5.0e-1
 144 0030 3AEE67AA 		vsub.f32	s20, s20, s15
 145              	.LVL6:
 469:Core/Inc/FusionMath.h ****     const FusionEuler euler = {.angle = {
 146              		.loc 2 469 5 is_stmt 1 view .LVU19
 470:Core/Inc/FusionMath.h ****             .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x *
 147              		.loc 2 470 55 is_stmt 0 view .LVU20
 148 0034 20EE200A 		vmul.f32	s0, s0, s1
 149              		.loc 2 470 67 view .LVU21
 150 0038 61EE217A 		vmul.f32	s15, s2, s3
 151              		.loc 2 470 99 view .LVU22
 152 003c 60EEA00A 		vmul.f32	s1, s1, s1
 153              		.loc 2 470 21 view .LVU23
 154 0040 7AEE600A 		vsub.f32	s1, s20, s1
 155 0044 30EE270A 		vadd.f32	s0, s0, s15
 156 0048 FFF7FEFF 		bl	atan2f
 157              	.LVL7:
 158              	.LBB22:
 159              	.LBI22:
 136:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 160              		.loc 2 136 21 is_stmt 1 view .LVU24
 161              	.LBB23:
 137:Core/Inc/FusionMath.h **** }
 162              		.loc 2 137 5 view .LVU25
 137:Core/Inc/FusionMath.h **** }
 163              		.loc 2 137 20 is_stmt 0 view .LVU26
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 20


 164 004c DFED1AAA 		vldr.32	s21, .L15
 165 0050 20EE2A0A 		vmul.f32	s0, s0, s21
 166              	.LVL8:
 137:Core/Inc/FusionMath.h **** }
 167              		.loc 2 137 20 view .LVU27
 168              	.LBE23:
 169              	.LBE22:
 469:Core/Inc/FusionMath.h ****             .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x *
 170              		.loc 2 469 23 view .LVU28
 171 0054 8DED080A 		vstr.32	s0, [sp, #32]
 471:Core/Inc/FusionMath.h ****             .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 172              		.loc 2 471 68 view .LVU29
 173 0058 28EE090A 		vmul.f32	s0, s16, s18
 174              		.loc 2 471 80 view .LVU30
 175 005c 69EEA87A 		vmul.f32	s15, s19, s17
 176              		.loc 2 471 74 view .LVU31
 177 0060 30EE670A 		vsub.f32	s0, s0, s15
 178              		.loc 2 471 22 view .LVU32
 179 0064 30EE000A 		vadd.f32	s0, s0, s0
 180 0068 FFF7FEFF 		bl	FusionAsin
 181              	.LVL9:
 182              	.LBB24:
 183              	.LBI24:
 136:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 184              		.loc 2 136 21 is_stmt 1 view .LVU33
 185              	.LBB25:
 137:Core/Inc/FusionMath.h **** }
 186              		.loc 2 137 5 view .LVU34
 137:Core/Inc/FusionMath.h **** }
 187              		.loc 2 137 20 is_stmt 0 view .LVU35
 188 006c 20EE2A0A 		vmul.f32	s0, s0, s21
 189              	.LVL10:
 137:Core/Inc/FusionMath.h **** }
 190              		.loc 2 137 20 view .LVU36
 191              	.LBE25:
 192              	.LBE24:
 469:Core/Inc/FusionMath.h ****             .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x *
 193              		.loc 2 469 23 view .LVU37
 194 0070 8DED090A 		vstr.32	s0, [sp, #36]
 472:Core/Inc/FusionMath.h ****             .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * 
 195              		.loc 2 472 54 view .LVU38
 196 0074 29EE280A 		vmul.f32	s0, s18, s17
 197              		.loc 2 472 66 view .LVU39
 198 0078 28EE298A 		vmul.f32	s16, s16, s19
 199              		.loc 2 472 98 view .LVU40
 200 007c 68EEA88A 		vmul.f32	s17, s17, s17
 201              		.loc 2 472 20 view .LVU41
 202 0080 7AEE680A 		vsub.f32	s1, s20, s17
 203 0084 30EE080A 		vadd.f32	s0, s0, s16
 204 0088 FFF7FEFF 		bl	atan2f
 205              	.LVL11:
 206              	.LBB26:
 207              	.LBI26:
 136:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 208              		.loc 2 136 21 is_stmt 1 view .LVU42
 209              	.LBB27:
 137:Core/Inc/FusionMath.h **** }
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 21


 210              		.loc 2 137 5 view .LVU43
 137:Core/Inc/FusionMath.h **** }
 211              		.loc 2 137 20 is_stmt 0 view .LVU44
 212 008c 20EE2A0A 		vmul.f32	s0, s0, s21
 213              	.LVL12:
 137:Core/Inc/FusionMath.h **** }
 214              		.loc 2 137 20 view .LVU45
 215              	.LBE27:
 216              	.LBE26:
 469:Core/Inc/FusionMath.h ****             .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x *
 217              		.loc 2 469 23 view .LVU46
 218 0090 8DED0A0A 		vstr.32	s0, [sp, #40]
 473:Core/Inc/FusionMath.h ****     }};
 474:Core/Inc/FusionMath.h ****     return euler;
 219              		.loc 2 474 5 is_stmt 1 view .LVU47
 220              		.loc 2 474 12 is_stmt 0 view .LVU48
 221 0094 08AB     		add	r3, sp, #32
 222 0096 93E80700 		ldm	r3, {r0, r1, r2}
 223 009a 0EAB     		add	r3, sp, #56
 224 009c 03E90700 		stmdb	r3, {r0, r1, r2}
 475:Core/Inc/FusionMath.h **** #undef Q
 476:Core/Inc/FusionMath.h **** }
 225              		.loc 2 476 1 view .LVU49
 226 00a0 9DED0B0A 		vldr.32	s0, [sp, #44]
 227 00a4 DDED0C0A 		vldr.32	s1, [sp, #48]
 228 00a8 9DED0D1A 		vldr.32	s2, [sp, #52]
 229 00ac 0FB0     		add	sp, sp, #60
 230              	.LCFI5:
 231              		.cfi_def_cfa_offset 28
 232              		@ sp needed
 233 00ae BDEC068B 		vldm	sp!, {d8-d10}
 234              	.LCFI6:
 235              		.cfi_restore 84
 236              		.cfi_restore 85
 237              		.cfi_restore 82
 238              		.cfi_restore 83
 239              		.cfi_restore 80
 240              		.cfi_restore 81
 241              		.cfi_def_cfa_offset 4
 242              	.LVL13:
 243              		.loc 2 476 1 view .LVU50
 244 00b2 5DF804FB 		ldr	pc, [sp], #4
 245              	.LVL14:
 246              	.L16:
 247              		.loc 2 476 1 view .LVU51
 248 00b6 00BF     		.align	2
 249              	.L15:
 250 00b8 E02E6542 		.word	1113927392
 251              		.cfi_endproc
 252              	.LFE158:
 254              		.global	__aeabi_f2d
 255              		.global	__aeabi_d2f
 256              		.section	.rodata.Serial_Output.str1.4,"aMS",%progbits,1
 257              		.align	2
 258              	.LC0:
 259 0000 25662C25 		.ascii	"%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\012"
 259      662C2566 
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 22


 259      2C25662C 
 259      25662C25 
 259      662C2566 
 260 0030 00       		.ascii	"\000"
 261              		.section	.text.Serial_Output,"ax",%progbits
 262              		.align	1
 263              		.global	Serial_Output
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 268              	Serial_Output:
 269              	.LFB164:
 262:Core/Src/main.c ****   const FusionQuaternion Q = FusionAhrsGetQuaternion(&ahrs);
 270              		.loc 1 262 21 is_stmt 1 view -0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 40
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 275              	.LCFI7:
 276              		.cfi_def_cfa_offset 24
 277              		.cfi_offset 4, -24
 278              		.cfi_offset 5, -20
 279              		.cfi_offset 6, -16
 280              		.cfi_offset 7, -12
 281              		.cfi_offset 8, -8
 282              		.cfi_offset 14, -4
 283 0004 2DED0A8B 		vpush.64	{d8, d9, d10, d11, d12}
 284              	.LCFI8:
 285              		.cfi_def_cfa_offset 64
 286              		.cfi_offset 80, -64
 287              		.cfi_offset 81, -60
 288              		.cfi_offset 82, -56
 289              		.cfi_offset 83, -52
 290              		.cfi_offset 84, -48
 291              		.cfi_offset 85, -44
 292              		.cfi_offset 86, -40
 293              		.cfi_offset 87, -36
 294              		.cfi_offset 88, -32
 295              		.cfi_offset 89, -28
 296 0008 A8B0     		sub	sp, sp, #160
 297              	.LCFI9:
 298              		.cfi_def_cfa_offset 224
 263:Core/Src/main.c ****   const FusionEuler euler = FusionQuaternionToEuler(Q);
 299              		.loc 1 263 3 view .LVU53
 263:Core/Src/main.c ****   const FusionEuler euler = FusionQuaternionToEuler(Q);
 300              		.loc 1 263 30 is_stmt 0 view .LVU54
 301 000a A34C     		ldr	r4, .L19+8
 302 000c 2046     		mov	r0, r4
 303 000e FFF7FEFF 		bl	FusionAhrsGetQuaternion
 304              	.LVL15:
 305 0012 8DED240A 		vstr.32	s0, [sp, #144]
 306 0016 CDED250A 		vstr.32	s1, [sp, #148]
 307 001a 8DED261A 		vstr.32	s2, [sp, #152]
 308 001e CDED271A 		vstr.32	s3, [sp, #156]
 264:Core/Src/main.c ****   const FusionVector LinearAcc = FusionAhrsGetLinearAcceleration(&ahrs);
 309              		.loc 1 264 3 is_stmt 1 view .LVU55
 264:Core/Src/main.c ****   const FusionVector LinearAcc = FusionAhrsGetLinearAcceleration(&ahrs);
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 23


 310              		.loc 1 264 29 is_stmt 0 view .LVU56
 311 0022 FFF7FEFF 		bl	FusionQuaternionToEuler
 312              	.LVL16:
 313 0026 8DED210A 		vstr.32	s0, [sp, #132]
 314 002a CDED220A 		vstr.32	s1, [sp, #136]
 315 002e 8DED231A 		vstr.32	s2, [sp, #140]
 265:Core/Src/main.c ****   MOTORrpm2vw(motor_chassis[0].speed_rpm,-motor_chassis[2].speed_rpm,&real_vc,&real_w);
 316              		.loc 1 265 3 is_stmt 1 view .LVU57
 265:Core/Src/main.c ****   MOTORrpm2vw(motor_chassis[0].speed_rpm,-motor_chassis[2].speed_rpm,&real_vc,&real_w);
 317              		.loc 1 265 34 is_stmt 0 view .LVU58
 318 0032 2046     		mov	r0, r4
 319 0034 FFF7FEFF 		bl	FusionAhrsGetLinearAcceleration
 320              	.LVL17:
 321 0038 8DED1E0A 		vstr.32	s0, [sp, #120]
 322 003c CDED1F0A 		vstr.32	s1, [sp, #124]
 323 0040 8DED201A 		vstr.32	s2, [sp, #128]
 266:Core/Src/main.c ****   float yaw = FusionDegreesToRadians(euler.angle.yaw), pitch = FusionDegreesToRadians(euler.angle.p
 324              		.loc 1 266 3 is_stmt 1 view .LVU59
 266:Core/Src/main.c ****   float yaw = FusionDegreesToRadians(euler.angle.yaw), pitch = FusionDegreesToRadians(euler.angle.p
 325              		.loc 1 266 31 is_stmt 0 view .LVU60
 326 0044 954B     		ldr	r3, .L19+12
 327 0046 B3F90220 		ldrsh	r2, [r3, #2]
 328 004a 00EE102A 		vmov	s0, r2	@ int
 266:Core/Src/main.c ****   float yaw = FusionDegreesToRadians(euler.angle.yaw), pitch = FusionDegreesToRadians(euler.angle.p
 329              		.loc 1 266 59 view .LVU61
 330 004e B3F91630 		ldrsh	r3, [r3, #22]
 266:Core/Src/main.c ****   float yaw = FusionDegreesToRadians(euler.angle.yaw), pitch = FusionDegreesToRadians(euler.angle.p
 331              		.loc 1 266 42 view .LVU62
 332 0052 5B42     		rsbs	r3, r3, #0
 333 0054 00EE903A 		vmov	s1, r3	@ int
 266:Core/Src/main.c ****   float yaw = FusionDegreesToRadians(euler.angle.yaw), pitch = FusionDegreesToRadians(euler.angle.p
 334              		.loc 1 266 3 view .LVU63
 335 0058 914C     		ldr	r4, .L19+16
 336 005a 9249     		ldr	r1, .L19+20
 337 005c 2046     		mov	r0, r4
 338 005e F8EEE00A 		vcvt.f32.s32	s1, s1
 339 0062 B8EEC00A 		vcvt.f32.s32	s0, s0
 340 0066 FFF7FEFF 		bl	MOTORrpm2vw
 341              	.LVL18:
 267:Core/Src/main.c ****   float cos_yaw = cos(yaw), sin_yaw = sin(yaw);
 342              		.loc 1 267 3 is_stmt 1 view .LVU64
 343              	.LBB28:
 344              	.LBI28:
 127:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 345              		.loc 2 127 21 view .LVU65
 346              	.LBB29:
 128:Core/Inc/FusionMath.h **** }
 347              		.loc 2 128 5 view .LVU66
 128:Core/Inc/FusionMath.h **** }
 348              		.loc 2 128 20 is_stmt 0 view .LVU67
 349 006a 9FED8F9A 		vldr.32	s18, .L19+24
 350              	.LVL19:
 128:Core/Inc/FusionMath.h **** }
 351              		.loc 2 128 20 view .LVU68
 352              	.LBE29:
 353              	.LBE28:
 267:Core/Src/main.c ****   float cos_yaw = cos(yaw), sin_yaw = sin(yaw);
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 24


 354              		.loc 1 267 98 discriminator 1 view .LVU69
 355 006e DDED22AA 		vldr.32	s21, [sp, #136]
 356              	.LVL20:
 357              	.LBB30:
 358              	.LBI30:
 127:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 359              		.loc 2 127 21 is_stmt 1 view .LVU70
 360              	.LBB31:
 128:Core/Inc/FusionMath.h **** }
 361              		.loc 2 128 5 view .LVU71
 128:Core/Inc/FusionMath.h **** }
 362              		.loc 2 128 20 is_stmt 0 view .LVU72
 363 0072 6AEE89AA 		vmul.f32	s21, s21, s18
 364              	.LVL21:
 128:Core/Inc/FusionMath.h **** }
 365              		.loc 2 128 20 view .LVU73
 366              	.LBE31:
 367              	.LBE30:
 267:Core/Src/main.c ****   float cos_yaw = cos(yaw), sin_yaw = sin(yaw);
 368              		.loc 1 267 148 discriminator 2 view .LVU74
 369 0076 DDED219A 		vldr.32	s19, [sp, #132]
 370              	.LVL22:
 371              	.LBB32:
 372              	.LBI32:
 127:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 373              		.loc 2 127 21 is_stmt 1 view .LVU75
 374              	.LBB33:
 128:Core/Inc/FusionMath.h **** }
 375              		.loc 2 128 5 view .LVU76
 128:Core/Inc/FusionMath.h **** }
 376              		.loc 2 128 20 is_stmt 0 view .LVU77
 377 007a 69EE899A 		vmul.f32	s19, s19, s18
 378              	.LVL23:
 128:Core/Inc/FusionMath.h **** }
 379              		.loc 2 128 20 view .LVU78
 380              	.LBE33:
 381              	.LBE32:
 268:Core/Src/main.c ****   float cos_pitch = cos(pitch), sin_pitch = sin(pitch);
 382              		.loc 1 268 3 is_stmt 1 view .LVU79
 268:Core/Src/main.c ****   float cos_pitch = cos(pitch), sin_pitch = sin(pitch);
 383              		.loc 1 268 19 is_stmt 0 view .LVU80
 384 007e DDED237A 		vldr.32	s15, [sp, #140]
 385 0082 67EE897A 		vmul.f32	s15, s15, s18
 386              	.LVL24:
 268:Core/Src/main.c ****   float cos_pitch = cos(pitch), sin_pitch = sin(pitch);
 387              		.loc 1 268 19 view .LVU81
 388 0086 17EE900A 		vmov	r0, s15
 389 008a FFF7FEFF 		bl	__aeabi_f2d
 390              	.LVL25:
 268:Core/Src/main.c ****   float cos_pitch = cos(pitch), sin_pitch = sin(pitch);
 391              		.loc 1 268 19 view .LVU82
 392 008e 41EC180B 		vmov	d8, r0, r1
 393 0092 B0EE480A 		vmov.f32	s0, s16
 394 0096 F0EE680A 		vmov.f32	s1, s17
 395 009a FFF7FEFF 		bl	cos
 396              	.LVL26:
 397 009e 51EC100B 		vmov	r0, r1, d0
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 25


 268:Core/Src/main.c ****   float cos_pitch = cos(pitch), sin_pitch = sin(pitch);
 398              		.loc 1 268 9 discriminator 1 view .LVU83
 399 00a2 FFF7FEFF 		bl	__aeabi_d2f
 400              	.LVL27:
 401 00a6 0AEE100A 		vmov	s20, r0
 402              	.LVL28:
 268:Core/Src/main.c ****   float cos_pitch = cos(pitch), sin_pitch = sin(pitch);
 403              		.loc 1 268 39 discriminator 1 view .LVU84
 404 00aa B0EE480A 		vmov.f32	s0, s16
 405 00ae F0EE680A 		vmov.f32	s1, s17
 406 00b2 FFF7FEFF 		bl	sin
 407              	.LVL29:
 268:Core/Src/main.c ****   float cos_pitch = cos(pitch), sin_pitch = sin(pitch);
 408              		.loc 1 268 39 discriminator 1 view .LVU85
 409 00b6 51EC100B 		vmov	r0, r1, d0
 268:Core/Src/main.c ****   float cos_pitch = cos(pitch), sin_pitch = sin(pitch);
 410              		.loc 1 268 29 discriminator 2 view .LVU86
 411 00ba FFF7FEFF 		bl	__aeabi_d2f
 412              	.LVL30:
 413 00be 08EE100A 		vmov	s16, r0
 414              	.LVL31:
 269:Core/Src/main.c ****   float cos_roll = cos(roll), sin_roll = sin(roll);
 415              		.loc 1 269 3 is_stmt 1 view .LVU87
 269:Core/Src/main.c ****   float cos_roll = cos(roll), sin_roll = sin(roll);
 416              		.loc 1 269 21 is_stmt 0 view .LVU88
 417 00c2 1AEE900A 		vmov	r0, s21
 418              	.LVL32:
 269:Core/Src/main.c ****   float cos_roll = cos(roll), sin_roll = sin(roll);
 419              		.loc 1 269 21 view .LVU89
 420 00c6 FFF7FEFF 		bl	__aeabi_f2d
 421              	.LVL33:
 422 00ca 41EC1C0B 		vmov	d12, r0, r1
 423 00ce B0EE4C0A 		vmov.f32	s0, s24
 424 00d2 F0EE6C0A 		vmov.f32	s1, s25
 425 00d6 FFF7FEFF 		bl	cos
 426              	.LVL34:
 427 00da 51EC100B 		vmov	r0, r1, d0
 269:Core/Src/main.c ****   float cos_roll = cos(roll), sin_roll = sin(roll);
 428              		.loc 1 269 9 discriminator 1 view .LVU90
 429 00de FFF7FEFF 		bl	__aeabi_d2f
 430              	.LVL35:
 431 00e2 08EE900A 		vmov	s17, r0
 432              	.LVL36:
 269:Core/Src/main.c ****   float cos_roll = cos(roll), sin_roll = sin(roll);
 433              		.loc 1 269 45 discriminator 1 view .LVU91
 434 00e6 B0EE4C0A 		vmov.f32	s0, s24
 435 00ea F0EE6C0A 		vmov.f32	s1, s25
 436 00ee FFF7FEFF 		bl	sin
 437              	.LVL37:
 269:Core/Src/main.c ****   float cos_roll = cos(roll), sin_roll = sin(roll);
 438              		.loc 1 269 45 discriminator 1 view .LVU92
 439 00f2 51EC100B 		vmov	r0, r1, d0
 269:Core/Src/main.c ****   float cos_roll = cos(roll), sin_roll = sin(roll);
 440              		.loc 1 269 33 discriminator 2 view .LVU93
 441 00f6 FFF7FEFF 		bl	__aeabi_d2f
 442              	.LVL38:
 443 00fa 0BEE100A 		vmov	s22, r0
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 26


 444              	.LVL39:
 270:Core/Src/main.c ****   float delta_s = real_vc * (float)SERIAL_PERIOD_MS / 1000.0f;
 445              		.loc 1 270 3 is_stmt 1 view .LVU94
 270:Core/Src/main.c ****   float delta_s = real_vc * (float)SERIAL_PERIOD_MS / 1000.0f;
 446              		.loc 1 270 20 is_stmt 0 view .LVU95
 447 00fe 19EE900A 		vmov	r0, s19
 448              	.LVL40:
 270:Core/Src/main.c ****   float delta_s = real_vc * (float)SERIAL_PERIOD_MS / 1000.0f;
 449              		.loc 1 270 20 view .LVU96
 450 0102 FFF7FEFF 		bl	__aeabi_f2d
 451              	.LVL41:
 452 0106 41EC1C0B 		vmov	d12, r0, r1
 453 010a B0EE4C0A 		vmov.f32	s0, s24
 454 010e F0EE6C0A 		vmov.f32	s1, s25
 455 0112 FFF7FEFF 		bl	cos
 456              	.LVL42:
 457 0116 51EC100B 		vmov	r0, r1, d0
 270:Core/Src/main.c ****   float delta_s = real_vc * (float)SERIAL_PERIOD_MS / 1000.0f;
 458              		.loc 1 270 9 discriminator 1 view .LVU97
 459 011a FFF7FEFF 		bl	__aeabi_d2f
 460              	.LVL43:
 461 011e 0AEE900A 		vmov	s21, r0
 462              	.LVL44:
 270:Core/Src/main.c ****   float delta_s = real_vc * (float)SERIAL_PERIOD_MS / 1000.0f;
 463              		.loc 1 270 42 discriminator 1 view .LVU98
 464 0122 B0EE4C0A 		vmov.f32	s0, s24
 465 0126 F0EE6C0A 		vmov.f32	s1, s25
 466 012a FFF7FEFF 		bl	sin
 467              	.LVL45:
 270:Core/Src/main.c ****   float delta_s = real_vc * (float)SERIAL_PERIOD_MS / 1000.0f;
 468              		.loc 1 270 42 discriminator 1 view .LVU99
 469 012e 51EC100B 		vmov	r0, r1, d0
 270:Core/Src/main.c ****   float delta_s = real_vc * (float)SERIAL_PERIOD_MS / 1000.0f;
 470              		.loc 1 270 31 discriminator 2 view .LVU100
 471 0132 FFF7FEFF 		bl	__aeabi_d2f
 472              	.LVL46:
 473 0136 07EE100A 		vmov	s14, r0
 474              	.LVL47:
 271:Core/Src/main.c ****   // pose integration
 475              		.loc 1 271 3 is_stmt 1 view .LVU101
 271:Core/Src/main.c ****   // pose integration
 476              		.loc 1 271 29 is_stmt 0 view .LVU102
 477 013a 5C4B     		ldr	r3, .L19+28
 478 013c D3ED007A 		vldr.32	s15, [r3]	@ int
 479 0140 F8EEE77A 		vcvt.f32.s32	s15, s15
 271:Core/Src/main.c ****   // pose integration
 480              		.loc 1 271 27 view .LVU103
 481 0144 D4ED009A 		vldr.32	s19, [r4]
 482              	.LVL48:
 271:Core/Src/main.c ****   // pose integration
 483              		.loc 1 271 27 view .LVU104
 484 0148 67EEA97A 		vmul.f32	s15, s15, s19
 271:Core/Src/main.c ****   // pose integration
 485              		.loc 1 271 9 view .LVU105
 486 014c 9FED586A 		vldr.32	s12, .L19+32
 487 0150 C7EE866A 		vdiv.f32	s13, s15, s12
 488              	.LVL49:
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 27


 273:Core/Src/main.c ****   y += (sin_yaw * sin_pitch * sin_roll + cos_yaw * cos_roll) * delta_s;
 489              		.loc 1 273 3 is_stmt 1 view .LVU106
 273:Core/Src/main.c ****   y += (sin_yaw * sin_pitch * sin_roll + cos_yaw * cos_roll) * delta_s;
 490              		.loc 1 273 17 is_stmt 0 view .LVU107
 491 0154 6AEE0B7A 		vmul.f32	s15, s20, s22
 273:Core/Src/main.c ****   y += (sin_yaw * sin_pitch * sin_roll + cos_yaw * cos_roll) * delta_s;
 492              		.loc 1 273 29 view .LVU108
 493 0158 67EE877A 		vmul.f32	s15, s15, s14
 273:Core/Src/main.c ****   y += (sin_yaw * sin_pitch * sin_roll + cos_yaw * cos_roll) * delta_s;
 494              		.loc 1 273 50 view .LVU109
 495 015c 28EE2A6A 		vmul.f32	s12, s16, s21
 273:Core/Src/main.c ****   y += (sin_yaw * sin_pitch * sin_roll + cos_yaw * cos_roll) * delta_s;
 496              		.loc 1 273 40 view .LVU110
 497 0160 77EEC67A 		vsub.f32	s15, s15, s12
 273:Core/Src/main.c ****   y += (sin_yaw * sin_pitch * sin_roll + cos_yaw * cos_roll) * delta_s;
 498              		.loc 1 273 62 view .LVU111
 499 0164 67EEA67A 		vmul.f32	s15, s15, s13
 273:Core/Src/main.c ****   y += (sin_yaw * sin_pitch * sin_roll + cos_yaw * cos_roll) * delta_s;
 500              		.loc 1 273 5 view .LVU112
 501 0168 524B     		ldr	r3, .L19+36
 502 016a 93ED006A 		vldr.32	s12, [r3]
 503 016e 77EE867A 		vadd.f32	s15, s15, s12
 504 0172 C3ED007A 		vstr.32	s15, [r3]
 274:Core/Src/main.c ****   z += (cos_pitch * sin_roll) * delta_s;
 505              		.loc 1 274 3 is_stmt 1 view .LVU113
 274:Core/Src/main.c ****   z += (cos_pitch * sin_roll) * delta_s;
 506              		.loc 1 274 17 is_stmt 0 view .LVU114
 507 0176 28EE0B8A 		vmul.f32	s16, s16, s22
 508              	.LVL50:
 274:Core/Src/main.c ****   z += (cos_pitch * sin_roll) * delta_s;
 509              		.loc 1 274 29 view .LVU115
 510 017a 28EE078A 		vmul.f32	s16, s16, s14
 274:Core/Src/main.c ****   z += (cos_pitch * sin_roll) * delta_s;
 511              		.loc 1 274 50 view .LVU116
 512 017e 2AEE2AAA 		vmul.f32	s20, s20, s21
 513              	.LVL51:
 274:Core/Src/main.c ****   z += (cos_pitch * sin_roll) * delta_s;
 514              		.loc 1 274 40 view .LVU117
 515 0182 38EE0A8A 		vadd.f32	s16, s16, s20
 274:Core/Src/main.c ****   z += (cos_pitch * sin_roll) * delta_s;
 516              		.loc 1 274 62 view .LVU118
 517 0186 28EE268A 		vmul.f32	s16, s16, s13
 274:Core/Src/main.c ****   z += (cos_pitch * sin_roll) * delta_s;
 518              		.loc 1 274 5 view .LVU119
 519 018a 4B4B     		ldr	r3, .L19+40
 520 018c 93ED006A 		vldr.32	s12, [r3]
 521 0190 38EE068A 		vadd.f32	s16, s16, s12
 522 0194 83ED008A 		vstr.32	s16, [r3]
 275:Core/Src/main.c ****   
 523              		.loc 1 275 3 is_stmt 1 view .LVU120
 275:Core/Src/main.c ****   
 524              		.loc 1 275 19 is_stmt 0 view .LVU121
 525 0198 68EE878A 		vmul.f32	s17, s17, s14
 526              	.LVL52:
 275:Core/Src/main.c ****   
 527              		.loc 1 275 31 view .LVU122
 528 019c 68EEA68A 		vmul.f32	s17, s17, s13
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 28


 275:Core/Src/main.c ****   
 529              		.loc 1 275 5 view .LVU123
 530 01a0 464B     		ldr	r3, .L19+44
 531 01a2 93ED007A 		vldr.32	s14, [r3]
 532 01a6 78EE878A 		vadd.f32	s17, s17, s14
 533 01aa C3ED008A 		vstr.32	s17, [r3]
 285:Core/Src/main.c ****                       x, y, z, // Position coordinates
 534              		.loc 1 285 5 is_stmt 1 view .LVU124
 292:Core/Src/main.c ****                       FusionDegreesToRadians(gyroscope.axis.y), 
 535              		.loc 1 292 23 is_stmt 0 view .LVU125
 536 01ae 444B     		ldr	r3, .L19+48
 537 01b0 93ED00AA 		vldr.32	s20, [r3]
 538              	.LVL53:
 539              	.LBB34:
 540              	.LBI34:
 127:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 541              		.loc 2 127 21 is_stmt 1 view .LVU126
 542              	.LBB35:
 128:Core/Inc/FusionMath.h **** }
 543              		.loc 2 128 5 view .LVU127
 128:Core/Inc/FusionMath.h **** }
 544              		.loc 2 128 20 is_stmt 0 view .LVU128
 545 01b4 2AEE09AA 		vmul.f32	s20, s20, s18
 546              	.LVL54:
 128:Core/Inc/FusionMath.h **** }
 547              		.loc 2 128 20 view .LVU129
 548              	.LBE35:
 549              	.LBE34:
 293:Core/Src/main.c ****                       FusionDegreesToRadians(gyroscope.axis.z), // Angular velocity
 550              		.loc 1 293 23 view .LVU130
 551 01b8 D3ED01AA 		vldr.32	s21, [r3, #4]
 552              	.LVL55:
 553              	.LBB36:
 554              	.LBI36:
 127:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 555              		.loc 2 127 21 is_stmt 1 view .LVU131
 556              	.LBB37:
 128:Core/Inc/FusionMath.h **** }
 557              		.loc 2 128 5 view .LVU132
 128:Core/Inc/FusionMath.h **** }
 558              		.loc 2 128 20 is_stmt 0 view .LVU133
 559 01bc 6AEE89AA 		vmul.f32	s21, s21, s18
 560              	.LVL56:
 128:Core/Inc/FusionMath.h **** }
 561              		.loc 2 128 20 view .LVU134
 562              	.LBE37:
 563              	.LBE36:
 294:Core/Src/main.c **** 
 564              		.loc 1 294 23 view .LVU135
 565 01c0 93ED027A 		vldr.32	s14, [r3, #8]
 566              	.LVL57:
 567              	.LBB38:
 568              	.LBI38:
 127:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 569              		.loc 2 127 21 is_stmt 1 view .LVU136
 570              	.LBB39:
 128:Core/Inc/FusionMath.h **** }
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 29


 571              		.loc 2 128 5 view .LVU137
 128:Core/Inc/FusionMath.h **** }
 572              		.loc 2 128 20 is_stmt 0 view .LVU138
 573 01c4 27EE099A 		vmul.f32	s18, s14, s18
 574              	.LVL58:
 128:Core/Inc/FusionMath.h **** }
 575              		.loc 2 128 20 view .LVU139
 576              	.LBE39:
 577              	.LBE38:
 296:Core/Src/main.c ****                       magnetometer.axis.y, 
 578              		.loc 1 296 40 view .LVU140
 579 01c8 3E4B     		ldr	r3, .L19+52
 580 01ca 1E68     		ldr	r6, [r3]	@ float
 297:Core/Src/main.c ****                       magnetometer.axis.z); // Magnetometer data
 581              		.loc 1 297 40 view .LVU141
 582 01cc 5F68     		ldr	r7, [r3, #4]	@ float
 298:Core/Src/main.c **** 
 583              		.loc 1 298 40 view .LVU142
 584 01ce D3F80880 		ldr	r8, [r3, #8]	@ float
 285:Core/Src/main.c ****                       x, y, z, // Position coordinates
 585              		.loc 1 285 5 view .LVU143
 586 01d2 17EE900A 		vmov	r0, s15
 587              	.LVL59:
 285:Core/Src/main.c ****                       x, y, z, // Position coordinates
 588              		.loc 1 285 5 view .LVU144
 589 01d6 FFF7FEFF 		bl	__aeabi_f2d
 590              	.LVL60:
 285:Core/Src/main.c ****                       x, y, z, // Position coordinates
 591              		.loc 1 285 5 view .LVU145
 592 01da 0446     		mov	r4, r0
 593 01dc 0D46     		mov	r5, r1
 594 01de 4046     		mov	r0, r8	@ float
 595 01e0 FFF7FEFF 		bl	__aeabi_f2d
 596              	.LVL61:
 597 01e4 CDE91C01 		strd	r0, [sp, #112]
 598 01e8 3846     		mov	r0, r7	@ float
 599 01ea FFF7FEFF 		bl	__aeabi_f2d
 600              	.LVL62:
 601 01ee CDE91A01 		strd	r0, [sp, #104]
 602 01f2 3046     		mov	r0, r6	@ float
 603 01f4 FFF7FEFF 		bl	__aeabi_f2d
 604              	.LVL63:
 605 01f8 CDE91801 		strd	r0, [sp, #96]
 606 01fc 19EE100A 		vmov	r0, s18
 607 0200 FFF7FEFF 		bl	__aeabi_f2d
 608              	.LVL64:
 609 0204 CDE91601 		strd	r0, [sp, #88]
 610 0208 1AEE900A 		vmov	r0, s21
 611 020c FFF7FEFF 		bl	__aeabi_f2d
 612              	.LVL65:
 613 0210 CDE91401 		strd	r0, [sp, #80]
 614 0214 1AEE100A 		vmov	r0, s20
 615 0218 FFF7FEFF 		bl	__aeabi_f2d
 616              	.LVL66:
 617 021c CDE91201 		strd	r0, [sp, #72]
 618 0220 9FED1BAB 		vldr.64	d10, .L19
 619 0224 8DED10AB 		vstr.64	d10, [sp, #64]
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 30


 620 0228 19EE900A 		vmov	r0, s19
 621 022c FFF7FEFF 		bl	__aeabi_f2d
 622              	.LVL67:
 623 0230 CDE90E01 		strd	r0, [sp, #56]
 624 0234 8DED0CAB 		vstr.64	d10, [sp, #48]
 625 0238 2498     		ldr	r0, [sp, #144]	@ float
 626 023a FFF7FEFF 		bl	__aeabi_f2d
 627              	.LVL68:
 628 023e CDE90A01 		strd	r0, [sp, #40]
 629 0242 2798     		ldr	r0, [sp, #156]	@ float
 630 0244 FFF7FEFF 		bl	__aeabi_f2d
 631              	.LVL69:
 632 0248 CDE90801 		strd	r0, [sp, #32]
 633 024c 2698     		ldr	r0, [sp, #152]	@ float
 634 024e FFF7FEFF 		bl	__aeabi_f2d
 635              	.LVL70:
 636 0252 CDE90601 		strd	r0, [sp, #24]
 637 0256 2598     		ldr	r0, [sp, #148]	@ float
 638 0258 FFF7FEFF 		bl	__aeabi_f2d
 639              	.LVL71:
 640 025c CDE90401 		strd	r0, [sp, #16]
 641 0260 18EE900A 		vmov	r0, s17
 642 0264 FFF7FEFF 		bl	__aeabi_f2d
 643              	.LVL72:
 644 0268 CDE90201 		strd	r0, [sp, #8]
 645 026c 18EE100A 		vmov	r0, s16
 646 0270 FFF7FEFF 		bl	__aeabi_f2d
 647              	.LVL73:
 648 0274 CDE90001 		strd	r0, [sp]
 649 0278 2246     		mov	r2, r4
 650 027a 2B46     		mov	r3, r5
 651 027c 1248     		ldr	r0, .L19+56
 652 027e FFF7FEFF 		bl	usart_printf
 653              	.LVL74:
 332:Core/Src/main.c **** 
 654              		.loc 1 332 1 view .LVU146
 655 0282 28B0     		add	sp, sp, #160
 656              	.LCFI10:
 657              		.cfi_def_cfa_offset 64
 658              		@ sp needed
 659 0284 BDEC0A8B 		vldm	sp!, {d8-d12}
 660              	.LCFI11:
 661              		.cfi_restore 88
 662              		.cfi_restore 89
 663              		.cfi_restore 86
 664              		.cfi_restore 87
 665              		.cfi_restore 84
 666              		.cfi_restore 85
 667              		.cfi_restore 82
 668              		.cfi_restore 83
 669              		.cfi_restore 80
 670              		.cfi_restore 81
 671              		.cfi_def_cfa_offset 24
 672              	.LVL75:
 332:Core/Src/main.c **** 
 673              		.loc 1 332 1 view .LVU147
 674 0288 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 31


 675              	.LVL76:
 676              	.L20:
 332:Core/Src/main.c **** 
 677              		.loc 1 332 1 view .LVU148
 678 028c AFF30080 		.align	3
 679              	.L19:
 680 0290 00000000 		.word	0
 681 0294 00000000 		.word	0
 682 0298 00000000 		.word	ahrs
 683 029c 00000000 		.word	motor_chassis
 684 02a0 00000000 		.word	real_vc
 685 02a4 00000000 		.word	real_w
 686 02a8 35FA8E3C 		.word	1016003125
 687 02ac 00000000 		.word	SERIAL_PERIOD_MS
 688 02b0 00007A44 		.word	1148846080
 689 02b4 00000000 		.word	x
 690 02b8 00000000 		.word	y
 691 02bc 00000000 		.word	z
 692 02c0 00000000 		.word	gyroscope
 693 02c4 00000000 		.word	magnetometer
 694 02c8 00000000 		.word	.LC0
 695              		.cfi_endproc
 696              	.LFE164:
 698              		.section	.rodata.Serial_Input.str1.4,"aMS",%progbits,1
 699              		.align	2
 700              	.LC1:
 701 0000 257300   		.ascii	"%s\000"
 702 0003 00       		.align	2
 703              	.LC2:
 704 0004 7663783D 		.ascii	"vcx=%f,wc=%f\012\000"
 704      25662C77 
 704      633D2566 
 704      0A00
 705 0012 0000     		.align	2
 706              	.LC3:
 707 0014 4661696C 		.ascii	"Failed input: %s\000"
 707      65642069 
 707      6E707574 
 707      3A202573 
 707      00
 708              		.section	.text.Serial_Input,"ax",%progbits
 709              		.align	1
 710              		.global	Serial_Input
 711              		.syntax unified
 712              		.thumb
 713              		.thumb_func
 715              	Serial_Input:
 716              	.LVL77:
 717              	.LFB165:
 400:Core/Src/main.c ****     if (control_mode == 1)
 718              		.loc 1 400 1 is_stmt 1 view -0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 8
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 401:Core/Src/main.c ****     {   
 722              		.loc 1 401 5 view .LVU150
 401:Core/Src/main.c ****     {   
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 32


 723              		.loc 1 401 22 is_stmt 0 view .LVU151
 724 0000 124B     		ldr	r3, .L30
 725 0002 1B68     		ldr	r3, [r3]
 401:Core/Src/main.c ****     {   
 726              		.loc 1 401 8 view .LVU152
 727 0004 012B     		cmp	r3, #1
 728 0006 00D0     		beq	.L29
 729 0008 7047     		bx	lr
 730              	.L29:
 400:Core/Src/main.c ****     if (control_mode == 1)
 731              		.loc 1 400 1 view .LVU153
 732 000a 10B5     		push	{r4, lr}
 733              	.LCFI12:
 734              		.cfi_def_cfa_offset 8
 735              		.cfi_offset 4, -8
 736              		.cfi_offset 14, -4
 737 000c 82B0     		sub	sp, sp, #8
 738              	.LCFI13:
 739              		.cfi_def_cfa_offset 16
 740 000e 0446     		mov	r4, r0
 741              	.LBB40:
 404:Core/Src/main.c ****         snprintf(record_input_buffer, sizeof(record_input_buffer), "%s", input_data);
 742              		.loc 1 404 9 is_stmt 1 view .LVU154
 405:Core/Src/main.c **** 
 743              		.loc 1 405 9 view .LVU155
 744 0010 0346     		mov	r3, r0
 745 0012 0F4A     		ldr	r2, .L30+4
 746 0014 1321     		movs	r1, #19
 747 0016 0F48     		ldr	r0, .L30+8
 748              	.LVL78:
 405:Core/Src/main.c **** 
 749              		.loc 1 405 9 is_stmt 0 view .LVU156
 750 0018 FFF7FEFF 		bl	snprintf
 751              	.LVL79:
 408:Core/Src/main.c ****             // If parsing is successful, update Vcx and Wc
 752              		.loc 1 408 9 is_stmt 1 view .LVU157
 408:Core/Src/main.c ****             // If parsing is successful, update Vcx and Wc
 753              		.loc 1 408 13 is_stmt 0 view .LVU158
 754 001c 01AB     		add	r3, sp, #4
 755 001e 6A46     		mov	r2, sp
 756 0020 0D49     		ldr	r1, .L30+12
 757 0022 2046     		mov	r0, r4
 758 0024 FFF7FEFF 		bl	sscanf
 759              	.LVL80:
 408:Core/Src/main.c ****             // If parsing is successful, update Vcx and Wc
 760              		.loc 1 408 12 discriminator 1 view .LVU159
 761 0028 0228     		cmp	r0, #2
 762 002a 07D1     		bne	.L23
 410:Core/Src/main.c ****             Wc = temp_wc;
 763              		.loc 1 410 13 is_stmt 1 view .LVU160
 410:Core/Src/main.c ****             Wc = temp_wc;
 764              		.loc 1 410 17 is_stmt 0 view .LVU161
 765 002c 0B4B     		ldr	r3, .L30+16
 766 002e 009A     		ldr	r2, [sp]	@ float
 767 0030 1A60     		str	r2, [r3]	@ float
 411:Core/Src/main.c ****             
 768              		.loc 1 411 13 is_stmt 1 view .LVU162
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 33


 411:Core/Src/main.c ****             
 769              		.loc 1 411 16 is_stmt 0 view .LVU163
 770 0032 0B4B     		ldr	r3, .L30+20
 771 0034 019A     		ldr	r2, [sp, #4]	@ float
 772 0036 1A60     		str	r2, [r3]	@ float
 773              	.L21:
 774              	.LBE40:
 420:Core/Src/main.c **** 
 775              		.loc 1 420 1 view .LVU164
 776 0038 02B0     		add	sp, sp, #8
 777              	.LCFI14:
 778              		.cfi_remember_state
 779              		.cfi_def_cfa_offset 8
 780              		@ sp needed
 781 003a 10BD     		pop	{r4, pc}
 782              	.LVL81:
 783              	.L23:
 784              	.LCFI15:
 785              		.cfi_restore_state
 786              	.LBB41:
 417:Core/Src/main.c ****         }
 787              		.loc 1 417 13 is_stmt 1 view .LVU165
 788 003c 2346     		mov	r3, r4
 789 003e 094A     		ldr	r2, .L30+24
 790 0040 1321     		movs	r1, #19
 791 0042 0948     		ldr	r0, .L30+28
 792 0044 FFF7FEFF 		bl	snprintf
 793              	.LVL82:
 794              	.LBE41:
 420:Core/Src/main.c **** 
 795              		.loc 1 420 1 is_stmt 0 view .LVU166
 796 0048 F6E7     		b	.L21
 797              	.L31:
 798 004a 00BF     		.align	2
 799              	.L30:
 800 004c 00000000 		.word	control_mode
 801 0050 00000000 		.word	.LC1
 802 0054 00000000 		.word	record_input_buffer
 803 0058 04000000 		.word	.LC2
 804 005c 00000000 		.word	Vcx
 805 0060 00000000 		.word	Wc
 806 0064 14000000 		.word	.LC3
 807 0068 00000000 		.word	failed_input_buffer
 808              		.cfi_endproc
 809              	.LFE165:
 811              		.section	.text.Error_Handler,"ax",%progbits
 812              		.align	1
 813              		.global	Error_Handler
 814              		.syntax unified
 815              		.thumb
 816              		.thumb_func
 818              	Error_Handler:
 819              	.LFB167:
 448:Core/Src/main.c **** 
 449:Core/Src/main.c **** /* USER CODE END 4 */
 450:Core/Src/main.c **** 
 451:Core/Src/main.c **** /**
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 34


 452:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 453:Core/Src/main.c ****   * @retval None
 454:Core/Src/main.c ****   */
 455:Core/Src/main.c **** void Error_Handler(void)
 456:Core/Src/main.c **** {
 820              		.loc 1 456 1 is_stmt 1 view -0
 821              		.cfi_startproc
 822              		@ Volatile: function does not return.
 823              		@ args = 0, pretend = 0, frame = 0
 824              		@ frame_needed = 0, uses_anonymous_args = 0
 825              		@ link register save eliminated.
 457:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 458:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 459:Core/Src/main.c ****   __disable_irq();
 826              		.loc 1 459 3 view .LVU168
 827              	.LBB42:
 828              	.LBI42:
 829              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 35


  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 36


  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 37


 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 38


 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 39


 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 40


 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 41


 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 42


 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 43


 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 44


 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 45


 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 46


 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 47


 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 48


 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 49


 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 50


 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 51


 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 830              		.loc 3 960 27 view .LVU169
 831              	.LBB43:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 832              		.loc 3 962 3 view .LVU170
 833              		.syntax unified
 834              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 835 0000 72B6     		cpsid i
 836              	@ 0 "" 2
 837              		.thumb
 838              		.syntax unified
 839              	.L33:
 840              	.LBE43:
 841              	.LBE42:
 460:Core/Src/main.c ****   while (1)
 842              		.loc 1 460 3 view .LVU171
 461:Core/Src/main.c ****   {
 462:Core/Src/main.c ****   }
 843              		.loc 1 462 3 view .LVU172
 460:Core/Src/main.c ****   while (1)
 844              		.loc 1 460 9 view .LVU173
 845 0002 FEE7     		b	.L33
 846              		.cfi_endproc
 847              	.LFE167:
 849              		.section	.text.SystemClock_Config,"ax",%progbits
 850              		.align	1
 851              		.global	SystemClock_Config
 852              		.syntax unified
 853              		.thumb
 854              		.thumb_func
 856              	SystemClock_Config:
 857              	.LFB163:
 202:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 858              		.loc 1 202 1 view -0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 80
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862 0000 00B5     		push	{lr}
 863              	.LCFI16:
 864              		.cfi_def_cfa_offset 4
 865              		.cfi_offset 14, -4
 866 0002 95B0     		sub	sp, sp, #84
 867              	.LCFI17:
 868              		.cfi_def_cfa_offset 88
 203:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 869              		.loc 1 203 3 view .LVU175
 203:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 870              		.loc 1 203 22 is_stmt 0 view .LVU176
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 52


 871 0004 3022     		movs	r2, #48
 872 0006 0021     		movs	r1, #0
 873 0008 08A8     		add	r0, sp, #32
 874 000a FFF7FEFF 		bl	memset
 875              	.LVL83:
 204:Core/Src/main.c **** 
 876              		.loc 1 204 3 is_stmt 1 view .LVU177
 204:Core/Src/main.c **** 
 877              		.loc 1 204 22 is_stmt 0 view .LVU178
 878 000e 0023     		movs	r3, #0
 879 0010 0393     		str	r3, [sp, #12]
 880 0012 0493     		str	r3, [sp, #16]
 881 0014 0593     		str	r3, [sp, #20]
 882 0016 0693     		str	r3, [sp, #24]
 883 0018 0793     		str	r3, [sp, #28]
 208:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 884              		.loc 1 208 3 is_stmt 1 view .LVU179
 885              	.LBB44:
 208:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 886              		.loc 1 208 3 view .LVU180
 887 001a 0193     		str	r3, [sp, #4]
 208:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 888              		.loc 1 208 3 view .LVU181
 889 001c 204A     		ldr	r2, .L40
 890 001e 116C     		ldr	r1, [r2, #64]
 891 0020 41F08051 		orr	r1, r1, #268435456
 892 0024 1164     		str	r1, [r2, #64]
 208:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 893              		.loc 1 208 3 view .LVU182
 894 0026 126C     		ldr	r2, [r2, #64]
 895 0028 02F08052 		and	r2, r2, #268435456
 896 002c 0192     		str	r2, [sp, #4]
 208:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 897              		.loc 1 208 3 view .LVU183
 898 002e 019A     		ldr	r2, [sp, #4]
 899              	.LBE44:
 208:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 900              		.loc 1 208 3 view .LVU184
 209:Core/Src/main.c **** 
 901              		.loc 1 209 3 view .LVU185
 902              	.LBB45:
 209:Core/Src/main.c **** 
 903              		.loc 1 209 3 view .LVU186
 904 0030 0293     		str	r3, [sp, #8]
 209:Core/Src/main.c **** 
 905              		.loc 1 209 3 view .LVU187
 906 0032 1C4B     		ldr	r3, .L40+4
 907 0034 1A68     		ldr	r2, [r3]
 908 0036 42F48042 		orr	r2, r2, #16384
 909 003a 1A60     		str	r2, [r3]
 209:Core/Src/main.c **** 
 910              		.loc 1 209 3 view .LVU188
 911 003c 1B68     		ldr	r3, [r3]
 912 003e 03F48043 		and	r3, r3, #16384
 913 0042 0293     		str	r3, [sp, #8]
 209:Core/Src/main.c **** 
 914              		.loc 1 209 3 view .LVU189
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 53


 915 0044 029B     		ldr	r3, [sp, #8]
 916              	.LBE45:
 209:Core/Src/main.c **** 
 917              		.loc 1 209 3 view .LVU190
 214:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 918              		.loc 1 214 3 view .LVU191
 214:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 919              		.loc 1 214 36 is_stmt 0 view .LVU192
 920 0046 0123     		movs	r3, #1
 921 0048 0893     		str	r3, [sp, #32]
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 922              		.loc 1 215 3 is_stmt 1 view .LVU193
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 923              		.loc 1 215 30 is_stmt 0 view .LVU194
 924 004a 4FF48033 		mov	r3, #65536
 925 004e 0993     		str	r3, [sp, #36]
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 926              		.loc 1 216 3 is_stmt 1 view .LVU195
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 927              		.loc 1 216 34 is_stmt 0 view .LVU196
 928 0050 0223     		movs	r3, #2
 929 0052 0E93     		str	r3, [sp, #56]
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 6;
 930              		.loc 1 217 3 is_stmt 1 view .LVU197
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 6;
 931              		.loc 1 217 35 is_stmt 0 view .LVU198
 932 0054 4FF48002 		mov	r2, #4194304
 933 0058 0F92     		str	r2, [sp, #60]
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 934              		.loc 1 218 3 is_stmt 1 view .LVU199
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 935              		.loc 1 218 30 is_stmt 0 view .LVU200
 936 005a 0622     		movs	r2, #6
 937 005c 1092     		str	r2, [sp, #64]
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 938              		.loc 1 219 3 is_stmt 1 view .LVU201
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 939              		.loc 1 219 30 is_stmt 0 view .LVU202
 940 005e A822     		movs	r2, #168
 941 0060 1192     		str	r2, [sp, #68]
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 942              		.loc 1 220 3 is_stmt 1 view .LVU203
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 943              		.loc 1 220 30 is_stmt 0 view .LVU204
 944 0062 1293     		str	r3, [sp, #72]
 221:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 945              		.loc 1 221 3 is_stmt 1 view .LVU205
 221:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 946              		.loc 1 221 30 is_stmt 0 view .LVU206
 947 0064 0423     		movs	r3, #4
 948 0066 1393     		str	r3, [sp, #76]
 222:Core/Src/main.c ****   {
 949              		.loc 1 222 3 is_stmt 1 view .LVU207
 222:Core/Src/main.c ****   {
 950              		.loc 1 222 7 is_stmt 0 view .LVU208
 951 0068 08A8     		add	r0, sp, #32
 952 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 54


 953              	.LVL84:
 222:Core/Src/main.c ****   {
 954              		.loc 1 222 6 discriminator 1 view .LVU209
 955 006e 98B9     		cbnz	r0, .L38
 229:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 956              		.loc 1 229 3 is_stmt 1 view .LVU210
 229:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 957              		.loc 1 229 31 is_stmt 0 view .LVU211
 958 0070 0F23     		movs	r3, #15
 959 0072 0393     		str	r3, [sp, #12]
 231:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 960              		.loc 1 231 3 is_stmt 1 view .LVU212
 231:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 961              		.loc 1 231 34 is_stmt 0 view .LVU213
 962 0074 0223     		movs	r3, #2
 963 0076 0493     		str	r3, [sp, #16]
 232:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 964              		.loc 1 232 3 is_stmt 1 view .LVU214
 232:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 965              		.loc 1 232 35 is_stmt 0 view .LVU215
 966 0078 0023     		movs	r3, #0
 967 007a 0593     		str	r3, [sp, #20]
 233:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 968              		.loc 1 233 3 is_stmt 1 view .LVU216
 233:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 969              		.loc 1 233 36 is_stmt 0 view .LVU217
 970 007c 4FF4A053 		mov	r3, #5120
 971 0080 0693     		str	r3, [sp, #24]
 234:Core/Src/main.c **** 
 972              		.loc 1 234 3 is_stmt 1 view .LVU218
 234:Core/Src/main.c **** 
 973              		.loc 1 234 36 is_stmt 0 view .LVU219
 974 0082 4FF48053 		mov	r3, #4096
 975 0086 0793     		str	r3, [sp, #28]
 236:Core/Src/main.c ****   {
 976              		.loc 1 236 3 is_stmt 1 view .LVU220
 236:Core/Src/main.c ****   {
 977              		.loc 1 236 7 is_stmt 0 view .LVU221
 978 0088 0521     		movs	r1, #5
 979 008a 03A8     		add	r0, sp, #12
 980 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 981              	.LVL85:
 236:Core/Src/main.c ****   {
 982              		.loc 1 236 6 discriminator 1 view .LVU222
 983 0090 20B9     		cbnz	r0, .L39
 240:Core/Src/main.c **** 
 984              		.loc 1 240 1 view .LVU223
 985 0092 15B0     		add	sp, sp, #84
 986              	.LCFI18:
 987              		.cfi_remember_state
 988              		.cfi_def_cfa_offset 4
 989              		@ sp needed
 990 0094 5DF804FB 		ldr	pc, [sp], #4
 991              	.L38:
 992              	.LCFI19:
 993              		.cfi_restore_state
 224:Core/Src/main.c ****   }
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 55


 994              		.loc 1 224 5 is_stmt 1 view .LVU224
 995 0098 FFF7FEFF 		bl	Error_Handler
 996              	.LVL86:
 997              	.L39:
 238:Core/Src/main.c ****   }
 998              		.loc 1 238 5 view .LVU225
 999 009c FFF7FEFF 		bl	Error_Handler
 1000              	.LVL87:
 1001              	.L41:
 1002              		.align	2
 1003              	.L40:
 1004 00a0 00380240 		.word	1073887232
 1005 00a4 00700040 		.word	1073770496
 1006              		.cfi_endproc
 1007              	.LFE163:
 1009              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1010              		.align	2
 1011              	.LC4:
 1012 0000 52656365 		.ascii	"Received: %s\015\012\000"
 1012      69766564 
 1012      3A202573 
 1012      0D0A00
 1013              		.section	.text.main,"ax",%progbits
 1014              		.align	1
 1015              		.global	main
 1016              		.syntax unified
 1017              		.thumb
 1018              		.thumb_func
 1020              	main:
 1021              	.LFB162:
 103:Core/Src/main.c **** 
 1022              		.loc 1 103 1 view -0
 1023              		.cfi_startproc
 1024              		@ Volatile: function does not return.
 1025              		@ args = 0, pretend = 0, frame = 8
 1026              		@ frame_needed = 0, uses_anonymous_args = 0
 1027 0000 00B5     		push	{lr}
 1028              	.LCFI20:
 1029              		.cfi_def_cfa_offset 4
 1030              		.cfi_offset 14, -4
 1031 0002 83B0     		sub	sp, sp, #12
 1032              	.LCFI21:
 1033              		.cfi_def_cfa_offset 16
 112:Core/Src/main.c **** 
 1034              		.loc 1 112 3 view .LVU227
 1035 0004 FFF7FEFF 		bl	HAL_Init
 1036              	.LVL88:
 121:Core/Src/main.c **** 
 1037              		.loc 1 121 3 view .LVU228
 1038 0008 FFF7FEFF 		bl	SystemClock_Config
 1039              	.LVL89:
 129:Core/Src/main.c ****   MX_DMA_Init();
 1040              		.loc 1 129 3 view .LVU229
 1041 000c FFF7FEFF 		bl	MX_GPIO_Init
 1042              	.LVL90:
 130:Core/Src/main.c ****   MX_CAN1_Init();
 1043              		.loc 1 130 3 view .LVU230
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 56


 1044 0010 FFF7FEFF 		bl	MX_DMA_Init
 1045              	.LVL91:
 131:Core/Src/main.c ****   MX_CAN2_Init();
 1046              		.loc 1 131 3 view .LVU231
 1047 0014 FFF7FEFF 		bl	MX_CAN1_Init
 1048              	.LVL92:
 132:Core/Src/main.c ****   MX_USART1_UART_Init();
 1049              		.loc 1 132 3 view .LVU232
 1050 0018 FFF7FEFF 		bl	MX_CAN2_Init
 1051              	.LVL93:
 133:Core/Src/main.c ****   MX_TIM1_Init();
 1052              		.loc 1 133 3 view .LVU233
 1053 001c FFF7FEFF 		bl	MX_USART1_UART_Init
 1054              	.LVL94:
 134:Core/Src/main.c ****   MX_TIM8_Init();
 1055              		.loc 1 134 3 view .LVU234
 1056 0020 FFF7FEFF 		bl	MX_TIM1_Init
 1057              	.LVL95:
 135:Core/Src/main.c ****   MX_TIM4_Init();
 1058              		.loc 1 135 3 view .LVU235
 1059 0024 FFF7FEFF 		bl	MX_TIM8_Init
 1060              	.LVL96:
 136:Core/Src/main.c ****   MX_TIM5_Init();
 1061              		.loc 1 136 3 view .LVU236
 1062 0028 FFF7FEFF 		bl	MX_TIM4_Init
 1063              	.LVL97:
 137:Core/Src/main.c ****   MX_TIM10_Init();
 1064              		.loc 1 137 3 view .LVU237
 1065 002c FFF7FEFF 		bl	MX_TIM5_Init
 1066              	.LVL98:
 138:Core/Src/main.c ****   MX_I2C3_Init();
 1067              		.loc 1 138 3 view .LVU238
 1068 0030 FFF7FEFF 		bl	MX_TIM10_Init
 1069              	.LVL99:
 139:Core/Src/main.c ****   MX_SPI1_Init();
 1070              		.loc 1 139 3 view .LVU239
 1071 0034 FFF7FEFF 		bl	MX_I2C3_Init
 1072              	.LVL100:
 140:Core/Src/main.c ****   MX_USART6_UART_Init();
 1073              		.loc 1 140 3 view .LVU240
 1074 0038 FFF7FEFF 		bl	MX_SPI1_Init
 1075              	.LVL101:
 141:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1076              		.loc 1 141 3 view .LVU241
 1077 003c FFF7FEFF 		bl	MX_USART6_UART_Init
 1078              	.LVL102:
 144:Core/Src/main.c ****   clrStruct();
 1079              		.loc 1 144 3 view .LVU242
 1080 0040 FFF7FEFF 		bl	Init_all
 1081              	.LVL103:
 145:Core/Src/main.c ****   
 1082              		.loc 1 145 3 view .LVU243
 1083 0044 FFF7FEFF 		bl	clrStruct
 1084              	.LVL104:
 147:Core/Src/main.c ****   
 1085              		.loc 1 147 3 view .LVU244
 1086 0048 6421     		movs	r1, #100
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 57


 1087 004a 2248     		ldr	r0, .L48
 1088 004c FFF7FEFF 		bl	TaskAdd
 1089              	.LVL105:
 149:Core/Src/main.c ****  
 1090              		.loc 1 149 3 view .LVU245
 1091 0050 214B     		ldr	r3, .L48+4
 1092 0052 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1093 0054 2148     		ldr	r0, .L48+8
 1094 0056 FFF7FEFF 		bl	TaskAdd
 1095              	.LVL106:
 152:Core/Src/main.c ****   TaskAdd(IMU_update, IMUdeltaTime * 1000); // 00Hz for updating IMU and print delta time // TaskPr
 1096              		.loc 1 152 3 view .LVU246
 1097 005a 0521     		movs	r1, #5
 1098 005c 2048     		ldr	r0, .L48+12
 1099 005e FFF7FEFF 		bl	TaskAdd
 1100              	.LVL107:
 153:Core/Src/main.c ****   
 1101              		.loc 1 153 3 view .LVU247
 153:Core/Src/main.c ****   
 1102              		.loc 1 153 36 is_stmt 0 view .LVU248
 1103 0062 204B     		ldr	r3, .L48+16
 1104 0064 D3ED007A 		vldr.32	s15, [r3]
 1105 0068 9FED1F7A 		vldr.32	s14, .L48+20
 1106 006c 67EE877A 		vmul.f32	s15, s15, s14
 153:Core/Src/main.c ****   
 1107              		.loc 1 153 3 view .LVU249
 1108 0070 FCEEE77A 		vcvt.u32.f32	s15, s15
 1109 0074 CDED017A 		vstr.32	s15, [sp, #4]	@ int
 1110 0078 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 1111 007c 1B48     		ldr	r0, .L48+24
 1112 007e FFF7FEFF 		bl	TaskAdd
 1113              	.LVL108:
 155:Core/Src/main.c ****  
 1114              		.loc 1 155 3 is_stmt 1 view .LVU250
 1115 0082 0A21     		movs	r1, #10
 1116 0084 1A48     		ldr	r0, .L48+28
 1117 0086 FFF7FEFF 		bl	TaskAdd
 1118              	.LVL109:
 160:Core/Src/main.c **** 
 1119              		.loc 1 160 3 view .LVU251
 1120 008a 1A4C     		ldr	r4, .L48+32
 1121 008c 4022     		movs	r2, #64
 1122 008e 1A49     		ldr	r1, .L48+36
 1123 0090 2046     		mov	r0, r4
 1124 0092 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 1125              	.LVL110:
 163:Core/Src/main.c **** 
 1126              		.loc 1 163 3 view .LVU252
 1127 0096 2268     		ldr	r2, [r4]
 1128 0098 D368     		ldr	r3, [r2, #12]
 1129 009a 43F01003 		orr	r3, r3, #16
 1130 009e D360     		str	r3, [r2, #12]
 1131 00a0 01E0     		b	.L43
 1132              	.L47:
 179:Core/Src/main.c ****     }
 1133              		.loc 1 179 7 view .LVU253
 1134 00a2 FFF7FEFF 		bl	led_red_blink
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 58


 1135              	.LVL111:
 1136              	.L43:
 169:Core/Src/main.c ****   {
 1137              		.loc 1 169 3 view .LVU254
 177:Core/Src/main.c ****     {
 1138              		.loc 1 177 5 view .LVU255
 177:Core/Src/main.c ****     {
 1139              		.loc 1 177 8 is_stmt 0 view .LVU256
 1140 00a6 154B     		ldr	r3, .L48+40
 1141 00a8 1B68     		ldr	r3, [r3]
 177:Core/Src/main.c ****     {
 1142              		.loc 1 177 7 view .LVU257
 1143 00aa 002B     		cmp	r3, #0
 1144 00ac F9D1     		bne	.L47
 183:Core/Src/main.c **** 
 1145              		.loc 1 183 9 is_stmt 1 view .LVU258
 1146 00ae FFF7FEFF 		bl	TaskRun
 1147              	.LVL112:
 185:Core/Src/main.c ****           new_serial_data_received = 0;
 1148              		.loc 1 185 9 view .LVU259
 185:Core/Src/main.c ****           new_serial_data_received = 0;
 1149              		.loc 1 185 13 is_stmt 0 view .LVU260
 1150 00b2 134B     		ldr	r3, .L48+44
 1151 00b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 185:Core/Src/main.c ****           new_serial_data_received = 0;
 1152              		.loc 1 185 12 view .LVU261
 1153 00b6 002B     		cmp	r3, #0
 1154 00b8 F5D0     		beq	.L43
 186:Core/Src/main.c ****           Serial_Input((char*)UART1_RX_Buffer);
 1155              		.loc 1 186 11 is_stmt 1 view .LVU262
 186:Core/Src/main.c ****           Serial_Input((char*)UART1_RX_Buffer);
 1156              		.loc 1 186 36 is_stmt 0 view .LVU263
 1157 00ba 114B     		ldr	r3, .L48+44
 1158 00bc 0022     		movs	r2, #0
 1159 00be 1A70     		strb	r2, [r3]
 187:Core/Src/main.c ****           usart_printf("Received: %s\r\n", UART1_RX_Buffer);
 1160              		.loc 1 187 11 is_stmt 1 view .LVU264
 1161 00c0 104C     		ldr	r4, .L48+48
 1162 00c2 2046     		mov	r0, r4
 1163 00c4 FFF7FEFF 		bl	Serial_Input
 1164              	.LVL113:
 188:Core/Src/main.c ****       }
 1165              		.loc 1 188 11 view .LVU265
 1166 00c8 2146     		mov	r1, r4
 1167 00ca 0F48     		ldr	r0, .L48+52
 1168 00cc FFF7FEFF 		bl	usart_printf
 1169              	.LVL114:
 1170 00d0 E9E7     		b	.L43
 1171              	.L49:
 1172 00d2 00BF     		.align	2
 1173              	.L48:
 1174 00d4 00000000 		.word	Serial_Control
 1175 00d8 00000000 		.word	SERIAL_PERIOD_MS
 1176 00dc 00000000 		.word	Serial_Output
 1177 00e0 00000000 		.word	Speed_set
 1178 00e4 00000000 		.word	IMUdeltaTime
 1179 00e8 00007A44 		.word	1148846080
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 59


 1180 00ec 00000000 		.word	IMU_update
 1181 00f0 00000000 		.word	Joystick_motor_control
 1182 00f4 00000000 		.word	huart1
 1183 00f8 00000000 		.word	DMA_RX_Buffer
 1184 00fc 00000000 		.word	stop_flag
 1185 0100 00000000 		.word	new_serial_data_received
 1186 0104 00000000 		.word	UART1_RX_Buffer
 1187 0108 00000000 		.word	.LC4
 1188              		.cfi_endproc
 1189              	.LFE162:
 1191              		.global	record_input_buffer
 1192              		.section	.bss.record_input_buffer,"aw",%nobits
 1193              		.align	2
 1196              	record_input_buffer:
 1197 0000 00000000 		.space	19
 1197      00000000 
 1197      00000000 
 1197      00000000 
 1197      000000
 1198              		.global	failed_input_buffer
 1199              		.section	.bss.failed_input_buffer,"aw",%nobits
 1200              		.align	2
 1203              	failed_input_buffer:
 1204 0000 00000000 		.space	19
 1204      00000000 
 1204      00000000 
 1204      00000000 
 1204      000000
 1205              		.global	z
 1206              		.section	.bss.z,"aw",%nobits
 1207              		.align	2
 1210              	z:
 1211 0000 00000000 		.space	4
 1212              		.global	y
 1213              		.section	.bss.y,"aw",%nobits
 1214              		.align	2
 1217              	y:
 1218 0000 00000000 		.space	4
 1219              		.global	x
 1220              		.section	.bss.x,"aw",%nobits
 1221              		.align	2
 1224              	x:
 1225 0000 00000000 		.space	4
 1226              		.global	real_w
 1227              		.section	.bss.real_w,"aw",%nobits
 1228              		.align	2
 1231              	real_w:
 1232 0000 00000000 		.space	4
 1233              		.global	real_vc
 1234              		.section	.bss.real_vc,"aw",%nobits
 1235              		.align	2
 1238              	real_vc:
 1239 0000 00000000 		.space	4
 1240              		.global	new_serial_data_received
 1241              		.section	.bss.new_serial_data_received,"aw",%nobits
 1244              	new_serial_data_received:
 1245 0000 00       		.space	1
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 60


 1246              		.global	UART1_RX_Size
 1247              		.section	.bss.UART1_RX_Size,"aw",%nobits
 1248              		.align	1
 1251              	UART1_RX_Size:
 1252 0000 0000     		.space	2
 1253              		.global	UART1_RX_Buffer
 1254              		.section	.bss.UART1_RX_Buffer,"aw",%nobits
 1255              		.align	2
 1258              	UART1_RX_Buffer:
 1259 0000 00000000 		.space	64
 1259      00000000 
 1259      00000000 
 1259      00000000 
 1259      00000000 
 1260              		.global	DMA_RX_Buffer
 1261              		.section	.bss.DMA_RX_Buffer,"aw",%nobits
 1262              		.align	2
 1265              	DMA_RX_Buffer:
 1266 0000 00000000 		.space	64
 1266      00000000 
 1266      00000000 
 1266      00000000 
 1266      00000000 
 1267              		.global	Wc
 1268              		.section	.bss.Wc,"aw",%nobits
 1269              		.align	2
 1272              	Wc:
 1273 0000 00000000 		.space	4
 1274              		.global	Vcx
 1275              		.section	.bss.Vcx,"aw",%nobits
 1276              		.align	2
 1279              	Vcx:
 1280 0000 00000000 		.space	4
 1281              		.global	SERIAL_PERIOD_MS
 1282              		.section	.data.SERIAL_PERIOD_MS,"aw"
 1283              		.align	2
 1286              	SERIAL_PERIOD_MS:
 1287 0000 0A000000 		.word	10
 1288              		.global	control_mode
 1289              		.section	.data.control_mode,"aw"
 1290              		.align	2
 1293              	control_mode:
 1294 0000 01000000 		.word	1
 1295              		.global	buffer_index
 1296              		.section	.bss.buffer_index,"aw",%nobits
 1297              		.align	1
 1300              	buffer_index:
 1301 0000 0000     		.space	2
 1302              		.global	rx_char
 1303              		.section	.bss.rx_char,"aw",%nobits
 1306              	rx_char:
 1307 0000 00       		.space	1
 1308              		.global	input_buffer
 1309              		.section	.bss.input_buffer,"aw",%nobits
 1310              		.align	2
 1313              	input_buffer:
 1314 0000 00000000 		.space	19
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 61


 1314      00000000 
 1314      00000000 
 1314      00000000 
 1314      000000
 1315              		.text
 1316              	.Letext0:
 1317              		.file 4 "/Applications/ArmGNUToolchain/13.3.rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 1318              		.file 5 "/Applications/ArmGNUToolchain/13.3.rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 1319              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 1320              		.file 7 "/Applications/ArmGNUToolchain/13.3.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/13.3.1/includ
 1321              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1322              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1323              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1324              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1325              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1326              		.file 13 "Core/Inc/main.h"
 1327              		.file 14 "Core/Inc/usart.h"
 1328              		.file 15 "Core/Inc/CAN_receive.h"
 1329              		.file 16 "Core/Inc/FusionConvention.h"
 1330              		.file 17 "Core/Inc/FusionAhrs.h"
 1331              		.file 18 "Core/Inc/IMU.h"
 1332              		.file 19 "Core/Inc/Motor_Speed_pid.h"
 1333              		.file 20 "Core/Inc/Task.h"
 1334              		.file 21 "/Applications/ArmGNUToolchain/13.3.rel1/arm-none-eabi/arm-none-eabi/include/stdio.h"
 1335              		.file 22 "/Applications/ArmGNUToolchain/13.3.rel1/arm-none-eabi/arm-none-eabi/include/math.h"
 1336              		.file 23 "Core/Inc/user_usart.h"
 1337              		.file 24 "Core/Inc/led.h"
 1338              		.file 25 "Core/Inc/Joystick.h"
 1339              		.file 26 "Core/Inc/User_init.h"
 1340              		.file 27 "Core/Inc/spi.h"
 1341              		.file 28 "Core/Inc/i2c.h"
 1342              		.file 29 "Core/Inc/tim.h"
 1343              		.file 30 "Core/Inc/can.h"
 1344              		.file 31 "Core/Inc/dma.h"
 1345              		.file 32 "Core/Inc/gpio.h"
 1346              		.file 33 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1347              		.file 34 "<built-in>"
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 62


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:21     .text.Serial_Control:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:27     .text.Serial_Control:00000000 Serial_Control
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:40     .text.FusionAsin:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:45     .text.FusionAsin:00000000 FusionAsin
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:98     .text.FusionAsin:00000030 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:104    .text.FusionQuaternionToEuler:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:109    .text.FusionQuaternionToEuler:00000000 FusionQuaternionToEuler
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:250    .text.FusionQuaternionToEuler:000000b8 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:257    .rodata.Serial_Output.str1.4:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:262    .text.Serial_Output:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:268    .text.Serial_Output:00000000 Serial_Output
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:680    .text.Serial_Output:00000290 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1238   .bss.real_vc:00000000 real_vc
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1231   .bss.real_w:00000000 real_w
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1286   .data.SERIAL_PERIOD_MS:00000000 SERIAL_PERIOD_MS
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1224   .bss.x:00000000 x
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1217   .bss.y:00000000 y
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1210   .bss.z:00000000 z
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:699    .rodata.Serial_Input.str1.4:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:709    .text.Serial_Input:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:715    .text.Serial_Input:00000000 Serial_Input
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:800    .text.Serial_Input:0000004c $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1293   .data.control_mode:00000000 control_mode
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1196   .bss.record_input_buffer:00000000 record_input_buffer
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1279   .bss.Vcx:00000000 Vcx
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1272   .bss.Wc:00000000 Wc
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1203   .bss.failed_input_buffer:00000000 failed_input_buffer
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:812    .text.Error_Handler:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:818    .text.Error_Handler:00000000 Error_Handler
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:850    .text.SystemClock_Config:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:856    .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1004   .text.SystemClock_Config:000000a0 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1010   .rodata.main.str1.4:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1014   .text.main:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1020   .text.main:00000000 main
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1174   .text.main:000000d4 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1265   .bss.DMA_RX_Buffer:00000000 DMA_RX_Buffer
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1244   .bss.new_serial_data_received:00000000 new_serial_data_received
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1258   .bss.UART1_RX_Buffer:00000000 UART1_RX_Buffer
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1193   .bss.record_input_buffer:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1200   .bss.failed_input_buffer:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1207   .bss.z:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1214   .bss.y:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1221   .bss.x:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1228   .bss.real_w:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1235   .bss.real_vc:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1245   .bss.new_serial_data_received:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1251   .bss.UART1_RX_Size:00000000 UART1_RX_Size
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1248   .bss.UART1_RX_Size:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1255   .bss.UART1_RX_Buffer:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1262   .bss.DMA_RX_Buffer:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1269   .bss.Wc:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1276   .bss.Vcx:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1283   .data.SERIAL_PERIOD_MS:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1290   .data.control_mode:00000000 $d
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s 			page 63


/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1300   .bss.buffer_index:00000000 buffer_index
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1297   .bss.buffer_index:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1306   .bss.rx_char:00000000 rx_char
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1307   .bss.rx_char:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1313   .bss.input_buffer:00000000 input_buffer
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//ccKL0csP.s:1310   .bss.input_buffer:00000000 $d

UNDEFINED SYMBOLS
asinf
atan2f
__aeabi_f2d
__aeabi_d2f
FusionAhrsGetQuaternion
FusionAhrsGetLinearAcceleration
MOTORrpm2vw
cos
sin
usart_printf
ahrs
motor_chassis
gyroscope
magnetometer
snprintf
sscanf
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_CAN1_Init
MX_CAN2_Init
MX_USART1_UART_Init
MX_TIM1_Init
MX_TIM8_Init
MX_TIM4_Init
MX_TIM5_Init
MX_TIM10_Init
MX_I2C3_Init
MX_SPI1_Init
MX_USART6_UART_Init
Init_all
clrStruct
TaskAdd
HAL_UART_Receive_DMA
led_red_blink
TaskRun
Speed_set
IMUdeltaTime
IMU_update
Joystick_motor_control
huart1
stop_flag
