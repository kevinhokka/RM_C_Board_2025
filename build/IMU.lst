ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"IMU.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/IMU.c"
  20              		.section	.text.FusionMatrixMultiplyVector,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	FusionMatrixMultiplyVector:
  27              	.LFB156:
  28              		.file 2 "Core/Inc/FusionMath.h"
   1:Core/Inc/FusionMath.h **** /**
   2:Core/Inc/FusionMath.h ****  * @file FusionMath.h
   3:Core/Inc/FusionMath.h ****  * @author Seb Madgwick
   4:Core/Inc/FusionMath.h ****  * @brief Math library.
   5:Core/Inc/FusionMath.h ****  */
   6:Core/Inc/FusionMath.h **** 
   7:Core/Inc/FusionMath.h **** #ifndef FUSION_MATH_H
   8:Core/Inc/FusionMath.h **** #define FUSION_MATH_H
   9:Core/Inc/FusionMath.h **** 
  10:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
  11:Core/Inc/FusionMath.h **** // Includes
  12:Core/Inc/FusionMath.h **** 
  13:Core/Inc/FusionMath.h **** #include <math.h> // M_PI, sqrtf, atan2f, asinf
  14:Core/Inc/FusionMath.h **** #include <stdbool.h>
  15:Core/Inc/FusionMath.h **** #include <stdint.h>
  16:Core/Inc/FusionMath.h **** 
  17:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
  18:Core/Inc/FusionMath.h **** // Definitions
  19:Core/Inc/FusionMath.h **** 
  20:Core/Inc/FusionMath.h **** /**
  21:Core/Inc/FusionMath.h ****  * @brief 3D vector.
  22:Core/Inc/FusionMath.h ****  */
  23:Core/Inc/FusionMath.h **** typedef union {
  24:Core/Inc/FusionMath.h ****     float array[3];
  25:Core/Inc/FusionMath.h **** 
  26:Core/Inc/FusionMath.h ****     struct {
  27:Core/Inc/FusionMath.h ****         float x;
  28:Core/Inc/FusionMath.h ****         float y;
  29:Core/Inc/FusionMath.h ****         float z;
  30:Core/Inc/FusionMath.h ****     } axis;
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 2


  31:Core/Inc/FusionMath.h **** } FusionVector;
  32:Core/Inc/FusionMath.h **** 
  33:Core/Inc/FusionMath.h **** /**
  34:Core/Inc/FusionMath.h ****  * @brief Quaternion.
  35:Core/Inc/FusionMath.h ****  */
  36:Core/Inc/FusionMath.h **** typedef union {
  37:Core/Inc/FusionMath.h ****     float array[4];
  38:Core/Inc/FusionMath.h **** 
  39:Core/Inc/FusionMath.h ****     struct {
  40:Core/Inc/FusionMath.h ****         float w;
  41:Core/Inc/FusionMath.h ****         float x;
  42:Core/Inc/FusionMath.h ****         float y;
  43:Core/Inc/FusionMath.h ****         float z;
  44:Core/Inc/FusionMath.h ****     } element;
  45:Core/Inc/FusionMath.h **** } FusionQuaternion;
  46:Core/Inc/FusionMath.h **** 
  47:Core/Inc/FusionMath.h **** /**
  48:Core/Inc/FusionMath.h ****  * @brief 3x3 matrix in row-major order.
  49:Core/Inc/FusionMath.h ****  * See http://en.wikipedia.org/wiki/Row-major_order
  50:Core/Inc/FusionMath.h ****  */
  51:Core/Inc/FusionMath.h **** typedef union {
  52:Core/Inc/FusionMath.h ****     float array[3][3];
  53:Core/Inc/FusionMath.h **** 
  54:Core/Inc/FusionMath.h ****     struct {
  55:Core/Inc/FusionMath.h ****         float xx;
  56:Core/Inc/FusionMath.h ****         float xy;
  57:Core/Inc/FusionMath.h ****         float xz;
  58:Core/Inc/FusionMath.h ****         float yx;
  59:Core/Inc/FusionMath.h ****         float yy;
  60:Core/Inc/FusionMath.h ****         float yz;
  61:Core/Inc/FusionMath.h ****         float zx;
  62:Core/Inc/FusionMath.h ****         float zy;
  63:Core/Inc/FusionMath.h ****         float zz;
  64:Core/Inc/FusionMath.h ****     } element;
  65:Core/Inc/FusionMath.h **** } FusionMatrix;
  66:Core/Inc/FusionMath.h **** 
  67:Core/Inc/FusionMath.h **** /**
  68:Core/Inc/FusionMath.h ****  * @brief Euler angles.  Roll, pitch, and yaw correspond to rotations around
  69:Core/Inc/FusionMath.h ****  * X, Y, and Z respectively.
  70:Core/Inc/FusionMath.h ****  */
  71:Core/Inc/FusionMath.h **** typedef union {
  72:Core/Inc/FusionMath.h ****     float array[3];
  73:Core/Inc/FusionMath.h **** 
  74:Core/Inc/FusionMath.h ****     struct {
  75:Core/Inc/FusionMath.h ****         float roll;
  76:Core/Inc/FusionMath.h ****         float pitch;
  77:Core/Inc/FusionMath.h ****         float yaw;
  78:Core/Inc/FusionMath.h ****     } angle;
  79:Core/Inc/FusionMath.h **** } FusionEuler;
  80:Core/Inc/FusionMath.h **** 
  81:Core/Inc/FusionMath.h **** /**
  82:Core/Inc/FusionMath.h ****  * @brief Vector of zeros.
  83:Core/Inc/FusionMath.h ****  */
  84:Core/Inc/FusionMath.h **** #define FUSION_VECTOR_ZERO ((FusionVector){ .array = {0.0f, 0.0f, 0.0f} })
  85:Core/Inc/FusionMath.h **** 
  86:Core/Inc/FusionMath.h **** /**
  87:Core/Inc/FusionMath.h ****  * @brief Vector of ones.
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 3


  88:Core/Inc/FusionMath.h ****  */
  89:Core/Inc/FusionMath.h **** #define FUSION_VECTOR_ONES ((FusionVector){ .array = {1.0f, 1.0f, 1.0f} })
  90:Core/Inc/FusionMath.h **** 
  91:Core/Inc/FusionMath.h **** /**
  92:Core/Inc/FusionMath.h ****  * @brief Identity quaternion.
  93:Core/Inc/FusionMath.h ****  */
  94:Core/Inc/FusionMath.h **** #define FUSION_IDENTITY_QUATERNION ((FusionQuaternion){ .array = {1.0f, 0.0f, 0.0f, 0.0f} })
  95:Core/Inc/FusionMath.h **** 
  96:Core/Inc/FusionMath.h **** /**
  97:Core/Inc/FusionMath.h ****  * @brief Identity matrix.
  98:Core/Inc/FusionMath.h ****  */
  99:Core/Inc/FusionMath.h **** #define FUSION_IDENTITY_MATRIX ((FusionMatrix){ .array = {{1.0f, 0.0f, 0.0f}, {0.0f, 1.0f, 0.0f}, {
 100:Core/Inc/FusionMath.h **** 
 101:Core/Inc/FusionMath.h **** /**
 102:Core/Inc/FusionMath.h ****  * @brief Euler angles of zero.
 103:Core/Inc/FusionMath.h ****  */
 104:Core/Inc/FusionMath.h **** #define FUSION_EULER_ZERO ((FusionEuler){ .array = {0.0f, 0.0f, 0.0f} })
 105:Core/Inc/FusionMath.h **** 
 106:Core/Inc/FusionMath.h **** /**
 107:Core/Inc/FusionMath.h ****  * @brief Pi. May not be defined in math.h.
 108:Core/Inc/FusionMath.h ****  */
 109:Core/Inc/FusionMath.h **** #ifndef M_PI
 110:Core/Inc/FusionMath.h **** #define M_PI (3.14159265358979323846)
 111:Core/Inc/FusionMath.h **** #endif
 112:Core/Inc/FusionMath.h **** 
 113:Core/Inc/FusionMath.h **** /**
 114:Core/Inc/FusionMath.h ****  * @brief Include this definition or add as a preprocessor definition to use
 115:Core/Inc/FusionMath.h ****  * normal square root operations.
 116:Core/Inc/FusionMath.h ****  */
 117:Core/Inc/FusionMath.h **** //#define FUSION_USE_NORMAL_SQRT
 118:Core/Inc/FusionMath.h **** 
 119:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 120:Core/Inc/FusionMath.h **** // Inline functions - Degrees and radians conversion
 121:Core/Inc/FusionMath.h **** 
 122:Core/Inc/FusionMath.h **** /**
 123:Core/Inc/FusionMath.h ****  * @brief Converts degrees to radians.
 124:Core/Inc/FusionMath.h ****  * @param degrees Degrees.
 125:Core/Inc/FusionMath.h ****  * @return Radians.
 126:Core/Inc/FusionMath.h ****  */
 127:Core/Inc/FusionMath.h **** static inline float FusionDegreesToRadians(const float degrees) {
 128:Core/Inc/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 129:Core/Inc/FusionMath.h **** }
 130:Core/Inc/FusionMath.h **** 
 131:Core/Inc/FusionMath.h **** /**
 132:Core/Inc/FusionMath.h ****  * @brief Converts radians to degrees.
 133:Core/Inc/FusionMath.h ****  * @param radians Radians.
 134:Core/Inc/FusionMath.h ****  * @return Degrees.
 135:Core/Inc/FusionMath.h ****  */
 136:Core/Inc/FusionMath.h **** static inline float FusionRadiansToDegrees(const float radians) {
 137:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 138:Core/Inc/FusionMath.h **** }
 139:Core/Inc/FusionMath.h **** 
 140:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 141:Core/Inc/FusionMath.h **** // Inline functions - Arc sine
 142:Core/Inc/FusionMath.h **** 
 143:Core/Inc/FusionMath.h **** /**
 144:Core/Inc/FusionMath.h ****  * @brief Returns the arc sine of the value.
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 4


 145:Core/Inc/FusionMath.h ****  * @param value Value.
 146:Core/Inc/FusionMath.h ****  * @return Arc sine of the value.
 147:Core/Inc/FusionMath.h ****  */
 148:Core/Inc/FusionMath.h **** static inline float FusionAsin(const float value) {
 149:Core/Inc/FusionMath.h ****     if (value <= -1.0f) {
 150:Core/Inc/FusionMath.h ****         return (float) M_PI / -2.0f;
 151:Core/Inc/FusionMath.h ****     }
 152:Core/Inc/FusionMath.h ****     if (value >= 1.0f) {
 153:Core/Inc/FusionMath.h ****         return (float) M_PI / 2.0f;
 154:Core/Inc/FusionMath.h ****     }
 155:Core/Inc/FusionMath.h ****     return asinf(value);
 156:Core/Inc/FusionMath.h **** }
 157:Core/Inc/FusionMath.h **** 
 158:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 159:Core/Inc/FusionMath.h **** // Inline functions - Fast inverse square root
 160:Core/Inc/FusionMath.h **** 
 161:Core/Inc/FusionMath.h **** #ifndef FUSION_USE_NORMAL_SQRT
 162:Core/Inc/FusionMath.h **** 
 163:Core/Inc/FusionMath.h **** /**
 164:Core/Inc/FusionMath.h ****  * @brief Calculates the reciprocal of the square root.
 165:Core/Inc/FusionMath.h ****  * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 166:Core/Inc/FusionMath.h ****  * @param x Operand.
 167:Core/Inc/FusionMath.h ****  * @return Reciprocal of the square root of x.
 168:Core/Inc/FusionMath.h ****  */
 169:Core/Inc/FusionMath.h **** static inline float FusionFastInverseSqrt(const float x) {
 170:Core/Inc/FusionMath.h **** 
 171:Core/Inc/FusionMath.h ****     typedef union {
 172:Core/Inc/FusionMath.h ****         float f;
 173:Core/Inc/FusionMath.h ****         int32_t i;
 174:Core/Inc/FusionMath.h ****     } Union32;
 175:Core/Inc/FusionMath.h **** 
 176:Core/Inc/FusionMath.h ****     Union32 union32 = {.f = x};
 177:Core/Inc/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 178:Core/Inc/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 179:Core/Inc/FusionMath.h **** }
 180:Core/Inc/FusionMath.h **** 
 181:Core/Inc/FusionMath.h **** #endif
 182:Core/Inc/FusionMath.h **** 
 183:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 184:Core/Inc/FusionMath.h **** // Inline functions - Vector operations
 185:Core/Inc/FusionMath.h **** 
 186:Core/Inc/FusionMath.h **** /**
 187:Core/Inc/FusionMath.h ****  * @brief Returns true if the vector is zero.
 188:Core/Inc/FusionMath.h ****  * @param vector Vector.
 189:Core/Inc/FusionMath.h ****  * @return True if the vector is zero.
 190:Core/Inc/FusionMath.h ****  */
 191:Core/Inc/FusionMath.h **** static inline bool FusionVectorIsZero(const FusionVector vector) {
 192:Core/Inc/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 193:Core/Inc/FusionMath.h **** }
 194:Core/Inc/FusionMath.h **** 
 195:Core/Inc/FusionMath.h **** /**
 196:Core/Inc/FusionMath.h ****  * @brief Returns the sum of two vectors.
 197:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 198:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 199:Core/Inc/FusionMath.h ****  * @return Sum of two vectors.
 200:Core/Inc/FusionMath.h ****  */
 201:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) 
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 5


 202:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 203:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x + vectorB.axis.x,
 204:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y + vectorB.axis.y,
 205:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z + vectorB.axis.z,
 206:Core/Inc/FusionMath.h ****     }};
 207:Core/Inc/FusionMath.h ****     return result;
 208:Core/Inc/FusionMath.h **** }
 209:Core/Inc/FusionMath.h **** 
 210:Core/Inc/FusionMath.h **** /**
 211:Core/Inc/FusionMath.h ****  * @brief Returns vector B subtracted from vector A.
 212:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 213:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 214:Core/Inc/FusionMath.h ****  * @return Vector B subtracted from vector A.
 215:Core/Inc/FusionMath.h ****  */
 216:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vect
 217:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 218:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 219:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y - vectorB.axis.y,
 220:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z - vectorB.axis.z,
 221:Core/Inc/FusionMath.h ****     }};
 222:Core/Inc/FusionMath.h ****     return result;
 223:Core/Inc/FusionMath.h **** }
 224:Core/Inc/FusionMath.h **** 
 225:Core/Inc/FusionMath.h **** /**
 226:Core/Inc/FusionMath.h ****  * @brief Returns the sum of the elements.
 227:Core/Inc/FusionMath.h ****  * @param vector Vector.
 228:Core/Inc/FusionMath.h ****  * @return Sum of the elements.
 229:Core/Inc/FusionMath.h ****  */
 230:Core/Inc/FusionMath.h **** static inline float FusionVectorSum(const FusionVector vector) {
 231:Core/Inc/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 232:Core/Inc/FusionMath.h **** }
 233:Core/Inc/FusionMath.h **** 
 234:Core/Inc/FusionMath.h **** /**
 235:Core/Inc/FusionMath.h ****  * @brief Returns the multiplication of a vector by a scalar.
 236:Core/Inc/FusionMath.h ****  * @param vector Vector.
 237:Core/Inc/FusionMath.h ****  * @param scalar Scalar.
 238:Core/Inc/FusionMath.h ****  * @return Multiplication of a vector by a scalar.
 239:Core/Inc/FusionMath.h ****  */
 240:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar
 241:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 242:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 243:Core/Inc/FusionMath.h ****             .y = vector.axis.y * scalar,
 244:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 245:Core/Inc/FusionMath.h ****     }};
 246:Core/Inc/FusionMath.h ****     return result;
 247:Core/Inc/FusionMath.h **** }
 248:Core/Inc/FusionMath.h **** 
 249:Core/Inc/FusionMath.h **** /**
 250:Core/Inc/FusionMath.h ****  * @brief Calculates the Hadamard product (element-wise multiplication).
 251:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 252:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 253:Core/Inc/FusionMath.h ****  * @return Hadamard product.
 254:Core/Inc/FusionMath.h ****  */
 255:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVect
 256:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 257:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 258:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y * vectorB.axis.y,
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 6


 259:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z * vectorB.axis.z,
 260:Core/Inc/FusionMath.h ****     }};
 261:Core/Inc/FusionMath.h ****     return result;
 262:Core/Inc/FusionMath.h **** }
 263:Core/Inc/FusionMath.h **** 
 264:Core/Inc/FusionMath.h **** /**
 265:Core/Inc/FusionMath.h ****  * @brief Returns the cross product.
 266:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 267:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 268:Core/Inc/FusionMath.h ****  * @return Cross product.
 269:Core/Inc/FusionMath.h ****  */
 270:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector 
 271:Core/Inc/FusionMath.h **** #define A vectorA.axis
 272:Core/Inc/FusionMath.h **** #define B vectorB.axis
 273:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 274:Core/Inc/FusionMath.h ****             .x = A.y * B.z - A.z * B.y,
 275:Core/Inc/FusionMath.h ****             .y = A.z * B.x - A.x * B.z,
 276:Core/Inc/FusionMath.h ****             .z = A.x * B.y - A.y * B.x,
 277:Core/Inc/FusionMath.h ****     }};
 278:Core/Inc/FusionMath.h ****     return result;
 279:Core/Inc/FusionMath.h **** #undef A
 280:Core/Inc/FusionMath.h **** #undef B
 281:Core/Inc/FusionMath.h **** }
 282:Core/Inc/FusionMath.h **** 
 283:Core/Inc/FusionMath.h **** /**
 284:Core/Inc/FusionMath.h ****  * @brief Returns the dot product.
 285:Core/Inc/FusionMath.h ****  * @param vectorA Vector A.
 286:Core/Inc/FusionMath.h ****  * @param vectorB Vector B.
 287:Core/Inc/FusionMath.h ****  * @return Dot product.
 288:Core/Inc/FusionMath.h ****  */
 289:Core/Inc/FusionMath.h **** static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) 
 290:Core/Inc/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 291:Core/Inc/FusionMath.h **** }
 292:Core/Inc/FusionMath.h **** 
 293:Core/Inc/FusionMath.h **** /**
 294:Core/Inc/FusionMath.h ****  * @brief Returns the vector magnitude squared.
 295:Core/Inc/FusionMath.h ****  * @param vector Vector.
 296:Core/Inc/FusionMath.h ****  * @return Vector magnitude squared.
 297:Core/Inc/FusionMath.h ****  */
 298:Core/Inc/FusionMath.h **** static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 299:Core/Inc/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 300:Core/Inc/FusionMath.h **** }
 301:Core/Inc/FusionMath.h **** 
 302:Core/Inc/FusionMath.h **** /**
 303:Core/Inc/FusionMath.h ****  * @brief Returns the vector magnitude.
 304:Core/Inc/FusionMath.h ****  * @param vector Vector.
 305:Core/Inc/FusionMath.h ****  * @return Vector magnitude.
 306:Core/Inc/FusionMath.h ****  */
 307:Core/Inc/FusionMath.h **** static inline float FusionVectorMagnitude(const FusionVector vector) {
 308:Core/Inc/FusionMath.h ****     return sqrtf(FusionVectorMagnitudeSquared(vector));
 309:Core/Inc/FusionMath.h **** }
 310:Core/Inc/FusionMath.h **** 
 311:Core/Inc/FusionMath.h **** /**
 312:Core/Inc/FusionMath.h ****  * @brief Returns the normalised vector.
 313:Core/Inc/FusionMath.h ****  * @param vector Vector.
 314:Core/Inc/FusionMath.h ****  * @return Normalised vector.
 315:Core/Inc/FusionMath.h ****  */
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 7


 316:Core/Inc/FusionMath.h **** static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 317:Core/Inc/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 318:Core/Inc/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
 319:Core/Inc/FusionMath.h **** #else
 320:Core/Inc/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 321:Core/Inc/FusionMath.h **** #endif
 322:Core/Inc/FusionMath.h ****     return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 323:Core/Inc/FusionMath.h **** }
 324:Core/Inc/FusionMath.h **** 
 325:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 326:Core/Inc/FusionMath.h **** // Inline functions - Quaternion operations
 327:Core/Inc/FusionMath.h **** 
 328:Core/Inc/FusionMath.h **** /**
 329:Core/Inc/FusionMath.h ****  * @brief Returns the sum of two quaternions.
 330:Core/Inc/FusionMath.h ****  * @param quaternionA Quaternion A.
 331:Core/Inc/FusionMath.h ****  * @param quaternionB Quaternion B.
 332:Core/Inc/FusionMath.h ****  * @return Sum of two quaternions.
 333:Core/Inc/FusionMath.h ****  */
 334:Core/Inc/FusionMath.h **** static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const Fusion
 335:Core/Inc/FusionMath.h ****     const FusionQuaternion result = {.element = {
 336:Core/Inc/FusionMath.h ****             .w = quaternionA.element.w + quaternionB.element.w,
 337:Core/Inc/FusionMath.h ****             .x = quaternionA.element.x + quaternionB.element.x,
 338:Core/Inc/FusionMath.h ****             .y = quaternionA.element.y + quaternionB.element.y,
 339:Core/Inc/FusionMath.h ****             .z = quaternionA.element.z + quaternionB.element.z,
 340:Core/Inc/FusionMath.h ****     }};
 341:Core/Inc/FusionMath.h ****     return result;
 342:Core/Inc/FusionMath.h **** }
 343:Core/Inc/FusionMath.h **** 
 344:Core/Inc/FusionMath.h **** /**
 345:Core/Inc/FusionMath.h ****  * @brief Returns the multiplication of two quaternions.
 346:Core/Inc/FusionMath.h ****  * @param quaternionA Quaternion A (to be post-multiplied).
 347:Core/Inc/FusionMath.h ****  * @param quaternionB Quaternion B (to be pre-multiplied).
 348:Core/Inc/FusionMath.h ****  * @return Multiplication of two quaternions.
 349:Core/Inc/FusionMath.h ****  */
 350:Core/Inc/FusionMath.h **** static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const F
 351:Core/Inc/FusionMath.h **** #define A quaternionA.element
 352:Core/Inc/FusionMath.h **** #define B quaternionB.element
 353:Core/Inc/FusionMath.h ****     const FusionQuaternion result = {.element = {
 354:Core/Inc/FusionMath.h ****             .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 355:Core/Inc/FusionMath.h ****             .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 356:Core/Inc/FusionMath.h ****             .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 357:Core/Inc/FusionMath.h ****             .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 358:Core/Inc/FusionMath.h ****     }};
 359:Core/Inc/FusionMath.h ****     return result;
 360:Core/Inc/FusionMath.h **** #undef A
 361:Core/Inc/FusionMath.h **** #undef B
 362:Core/Inc/FusionMath.h **** }
 363:Core/Inc/FusionMath.h **** 
 364:Core/Inc/FusionMath.h **** /**
 365:Core/Inc/FusionMath.h ****  * @brief Returns the multiplication of a quaternion with a vector.  This is a
 366:Core/Inc/FusionMath.h ****  * normal quaternion multiplication where the vector is treated a
 367:Core/Inc/FusionMath.h ****  * quaternion with a W element value of zero.  The quaternion is post-
 368:Core/Inc/FusionMath.h ****  * multiplied by the vector.
 369:Core/Inc/FusionMath.h ****  * @param quaternion Quaternion.
 370:Core/Inc/FusionMath.h ****  * @param vector Vector.
 371:Core/Inc/FusionMath.h ****  * @return Multiplication of a quaternion with a vector.
 372:Core/Inc/FusionMath.h ****  */
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 8


 373:Core/Inc/FusionMath.h **** static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, co
 374:Core/Inc/FusionMath.h **** #define Q quaternion.element
 375:Core/Inc/FusionMath.h **** #define V vector.axis
 376:Core/Inc/FusionMath.h ****     const FusionQuaternion result = {.element = {
 377:Core/Inc/FusionMath.h ****             .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 378:Core/Inc/FusionMath.h ****             .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 379:Core/Inc/FusionMath.h ****             .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 380:Core/Inc/FusionMath.h ****             .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 381:Core/Inc/FusionMath.h ****     }};
 382:Core/Inc/FusionMath.h ****     return result;
 383:Core/Inc/FusionMath.h **** #undef Q
 384:Core/Inc/FusionMath.h **** #undef V
 385:Core/Inc/FusionMath.h **** }
 386:Core/Inc/FusionMath.h **** 
 387:Core/Inc/FusionMath.h **** /**
 388:Core/Inc/FusionMath.h ****  * @brief Returns the normalised quaternion.
 389:Core/Inc/FusionMath.h ****  * @param quaternion Quaternion.
 390:Core/Inc/FusionMath.h ****  * @return Normalised quaternion.
 391:Core/Inc/FusionMath.h ****  */
 392:Core/Inc/FusionMath.h **** static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 393:Core/Inc/FusionMath.h **** #define Q quaternion.element
 394:Core/Inc/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 395:Core/Inc/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 396:Core/Inc/FusionMath.h **** #else
 397:Core/Inc/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z
 398:Core/Inc/FusionMath.h **** #endif
 399:Core/Inc/FusionMath.h ****     const FusionQuaternion result = {.element = {
 400:Core/Inc/FusionMath.h ****             .w = Q.w * magnitudeReciprocal,
 401:Core/Inc/FusionMath.h ****             .x = Q.x * magnitudeReciprocal,
 402:Core/Inc/FusionMath.h ****             .y = Q.y * magnitudeReciprocal,
 403:Core/Inc/FusionMath.h ****             .z = Q.z * magnitudeReciprocal,
 404:Core/Inc/FusionMath.h ****     }};
 405:Core/Inc/FusionMath.h ****     return result;
 406:Core/Inc/FusionMath.h **** #undef Q
 407:Core/Inc/FusionMath.h **** }
 408:Core/Inc/FusionMath.h **** 
 409:Core/Inc/FusionMath.h **** //------------------------------------------------------------------------------
 410:Core/Inc/FusionMath.h **** // Inline functions - Matrix operations
 411:Core/Inc/FusionMath.h **** 
 412:Core/Inc/FusionMath.h **** /**
 413:Core/Inc/FusionMath.h ****  * @brief Returns the multiplication of a matrix with a vector.
 414:Core/Inc/FusionMath.h ****  * @param matrix Matrix.
 415:Core/Inc/FusionMath.h ****  * @param vector Vector.
 416:Core/Inc/FusionMath.h ****  * @return Multiplication of a matrix with a vector.
 417:Core/Inc/FusionMath.h ****  */
 418:Core/Inc/FusionMath.h **** static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector
  29              		.loc 2 418 109 view -0
  30              		.cfi_startproc
  31              		@ args = 36, pretend = 16, frame = 56
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 84B0     		sub	sp, sp, #16
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37 0002 8EB0     		sub	sp, sp, #56
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 72
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 9


  40 0004 0DF1380C 		add	ip, sp, #56
  41 0008 8CE80F00 		stm	ip, {r0, r1, r2, r3}
  42 000c 8DED050A 		vstr.32	s0, [sp, #20]
  43 0010 CDED060A 		vstr.32	s1, [sp, #24]
  44 0014 8DED071A 		vstr.32	s2, [sp, #28]
 419:Core/Inc/FusionMath.h **** #define R matrix.element
 420:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
  45              		.loc 2 420 5 view .LVU1
 421:Core/Inc/FusionMath.h ****             .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
  46              		.loc 2 421 19 is_stmt 0 view .LVU2
  47 0018 DDED0E7A 		vldr.32	s15, [sp, #56]
  48              		.loc 2 421 23 view .LVU3
  49 001c 67EE807A 		vmul.f32	s15, s15, s0
  50              		.loc 2 421 42 view .LVU4
  51 0020 9DED0F7A 		vldr.32	s14, [sp, #60]
  52              		.loc 2 421 46 view .LVU5
  53 0024 27EE207A 		vmul.f32	s14, s14, s1
  54              		.loc 2 421 39 view .LVU6
  55 0028 77EE877A 		vadd.f32	s15, s15, s14
  56              		.loc 2 421 65 view .LVU7
  57 002c 9DED107A 		vldr.32	s14, [sp, #64]
  58              		.loc 2 421 69 view .LVU8
  59 0030 27EE017A 		vmul.f32	s14, s14, s2
  60              		.loc 2 421 62 view .LVU9
  61 0034 77EE877A 		vadd.f32	s15, s15, s14
 420:Core/Inc/FusionMath.h ****             .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
  62              		.loc 2 420 24 view .LVU10
  63 0038 CDED087A 		vstr.32	s15, [sp, #32]
 422:Core/Inc/FusionMath.h ****             .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
  64              		.loc 2 422 19 view .LVU11
  65 003c DDED117A 		vldr.32	s15, [sp, #68]
  66              		.loc 2 422 23 view .LVU12
  67 0040 60EE277A 		vmul.f32	s15, s0, s15
  68              		.loc 2 422 42 view .LVU13
  69 0044 9DED127A 		vldr.32	s14, [sp, #72]
  70              		.loc 2 422 46 view .LVU14
  71 0048 20EE877A 		vmul.f32	s14, s1, s14
  72              		.loc 2 422 39 view .LVU15
  73 004c 77EE877A 		vadd.f32	s15, s15, s14
  74              		.loc 2 422 65 view .LVU16
  75 0050 9DED137A 		vldr.32	s14, [sp, #76]
  76              		.loc 2 422 69 view .LVU17
  77 0054 21EE077A 		vmul.f32	s14, s2, s14
  78              		.loc 2 422 62 view .LVU18
  79 0058 77EE877A 		vadd.f32	s15, s15, s14
 420:Core/Inc/FusionMath.h ****             .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
  80              		.loc 2 420 24 view .LVU19
  81 005c CDED097A 		vstr.32	s15, [sp, #36]
 423:Core/Inc/FusionMath.h ****             .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
  82              		.loc 2 423 19 view .LVU20
  83 0060 DDED147A 		vldr.32	s15, [sp, #80]
  84              		.loc 2 423 23 view .LVU21
  85 0064 20EE270A 		vmul.f32	s0, s0, s15
  86              		.loc 2 423 42 view .LVU22
  87 0068 DDED157A 		vldr.32	s15, [sp, #84]
  88              		.loc 2 423 46 view .LVU23
  89 006c 60EEA70A 		vmul.f32	s1, s1, s15
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 10


  90              		.loc 2 423 39 view .LVU24
  91 0070 30EE200A 		vadd.f32	s0, s0, s1
  92              		.loc 2 423 65 view .LVU25
  93 0074 DDED167A 		vldr.32	s15, [sp, #88]
  94              		.loc 2 423 69 view .LVU26
  95 0078 21EE271A 		vmul.f32	s2, s2, s15
  96              		.loc 2 423 62 view .LVU27
  97 007c 30EE010A 		vadd.f32	s0, s0, s2
 420:Core/Inc/FusionMath.h ****             .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
  98              		.loc 2 420 24 view .LVU28
  99 0080 8DED0A0A 		vstr.32	s0, [sp, #40]
 424:Core/Inc/FusionMath.h ****     }};
 425:Core/Inc/FusionMath.h ****     return result;
 100              		.loc 2 425 5 is_stmt 1 view .LVU29
 101              		.loc 2 425 12 is_stmt 0 view .LVU30
 102 0084 08AB     		add	r3, sp, #32
 103 0086 93E80700 		ldm	r3, {r0, r1, r2}
 104 008a 0CE90700 		stmdb	ip, {r0, r1, r2}
 426:Core/Inc/FusionMath.h **** #undef R
 427:Core/Inc/FusionMath.h **** }
 105              		.loc 2 427 1 view .LVU31
 106 008e 9DED0B0A 		vldr.32	s0, [sp, #44]
 107 0092 DDED0C0A 		vldr.32	s1, [sp, #48]
 108 0096 9DED0D1A 		vldr.32	s2, [sp, #52]
 109 009a 0EB0     		add	sp, sp, #56
 110              	.LCFI2:
 111              		.cfi_def_cfa_offset 16
 112              		@ sp needed
 113 009c 04B0     		add	sp, sp, #16
 114              	.LCFI3:
 115              		.cfi_def_cfa_offset 0
 116 009e 7047     		bx	lr
 117              		.cfi_endproc
 118              	.LFE156:
 120              		.section	.text.FusionCalibrationInertial,"ax",%progbits
 121              		.align	1
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 126              	FusionCalibrationInertial:
 127              	.LFB159:
 128              		.file 3 "Core/Inc/FusionCalibration.h"
   1:Core/Inc/FusionCalibration.h **** /**
   2:Core/Inc/FusionCalibration.h ****  * @file FusionCalibration.h
   3:Core/Inc/FusionCalibration.h ****  * @author Seb Madgwick
   4:Core/Inc/FusionCalibration.h ****  * @brief Gyroscope, accelerometer, and magnetometer calibration models.
   5:Core/Inc/FusionCalibration.h ****  */
   6:Core/Inc/FusionCalibration.h **** 
   7:Core/Inc/FusionCalibration.h **** #ifndef FUSION_CALIBRATION_H
   8:Core/Inc/FusionCalibration.h **** #define FUSION_CALIBRATION_H
   9:Core/Inc/FusionCalibration.h **** 
  10:Core/Inc/FusionCalibration.h **** //------------------------------------------------------------------------------
  11:Core/Inc/FusionCalibration.h **** // Includes
  12:Core/Inc/FusionCalibration.h **** 
  13:Core/Inc/FusionCalibration.h **** #include "FusionMath.h"
  14:Core/Inc/FusionCalibration.h **** 
  15:Core/Inc/FusionCalibration.h **** //------------------------------------------------------------------------------
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 11


  16:Core/Inc/FusionCalibration.h **** // Inline functions
  17:Core/Inc/FusionCalibration.h **** 
  18:Core/Inc/FusionCalibration.h **** /**
  19:Core/Inc/FusionCalibration.h ****  * @brief Gyroscope and accelerometer calibration model.
  20:Core/Inc/FusionCalibration.h ****  * @param uncalibrated Uncalibrated measurement.
  21:Core/Inc/FusionCalibration.h ****  * @param misalignment Misalignment matrix.
  22:Core/Inc/FusionCalibration.h ****  * @param sensitivity Sensitivity.
  23:Core/Inc/FusionCalibration.h ****  * @param offset Offset.
  24:Core/Inc/FusionCalibration.h ****  * @return Calibrated measurement.
  25:Core/Inc/FusionCalibration.h ****  */
  26:Core/Inc/FusionCalibration.h **** static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionM
 129              		.loc 3 26 179 is_stmt 1 view -0
 130              		.cfi_startproc
 131              		@ args = 36, pretend = 16, frame = 128
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133 0000 84B0     		sub	sp, sp, #16
 134              	.LCFI4:
 135              		.cfi_def_cfa_offset 16
 136 0002 00B5     		push	{lr}
 137              	.LCFI5:
 138              		.cfi_def_cfa_offset 20
 139              		.cfi_offset 14, -20
 140 0004 A7B0     		sub	sp, sp, #156
 141              	.LCFI6:
 142              		.cfi_def_cfa_offset 176
 143 0006 0DF1A00C 		add	ip, sp, #160
 144 000a 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 145 000e 8DED110A 		vstr.32	s0, [sp, #68]
 146 0012 CDED120A 		vstr.32	s1, [sp, #72]
 147 0016 8DED131A 		vstr.32	s2, [sp, #76]
 148 001a CDED0E1A 		vstr.32	s3, [sp, #56]
 149 001e 8DED0F2A 		vstr.32	s4, [sp, #60]
 150 0022 CDED102A 		vstr.32	s5, [sp, #64]
 151 0026 8DED0B3A 		vstr.32	s6, [sp, #44]
 152 002a CDED0C3A 		vstr.32	s7, [sp, #48]
 153 002e 8DED0D4A 		vstr.32	s8, [sp, #52]
  27:Core/Inc/FusionCalibration.h ****     return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtrac
 154              		.loc 3 27 5 view .LVU33
 155              	.LBB16:
 156              	.LBI16:
 216:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 157              		.loc 2 216 28 view .LVU34
 158              	.LBB17:
 217:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 159              		.loc 2 217 5 view .LVU35
 218:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y - vectorB.axis.y,
 160              		.loc 2 218 33 is_stmt 0 view .LVU36
 161 0032 30EE430A 		vsub.f32	s0, s0, s6
 217:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 162              		.loc 2 217 24 view .LVU37
 163 0036 8DED140A 		vstr.32	s0, [sp, #80]
 219:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z - vectorB.axis.z,
 164              		.loc 2 219 33 view .LVU38
 165 003a 70EEE30A 		vsub.f32	s1, s1, s7
 217:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 166              		.loc 2 217 24 view .LVU39
 167 003e CDED150A 		vstr.32	s1, [sp, #84]
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 12


 220:Core/Inc/FusionMath.h ****     }};
 168              		.loc 2 220 33 view .LVU40
 169 0042 31EE441A 		vsub.f32	s2, s2, s8
 217:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 170              		.loc 2 217 24 view .LVU41
 171 0046 8DED161A 		vstr.32	s2, [sp, #88]
 222:Core/Inc/FusionMath.h **** }
 172              		.loc 2 222 5 is_stmt 1 view .LVU42
 222:Core/Inc/FusionMath.h **** }
 173              		.loc 2 222 12 is_stmt 0 view .LVU43
 174 004a 23AB     		add	r3, sp, #140
 175 004c 0DF1500C 		add	ip, sp, #80
 176 0050 9CE80700 		ldm	ip, {r0, r1, r2}
 177 0054 83E80700 		stm	r3, {r0, r1, r2}
 178 0058 0DF1680E 		add	lr, sp, #104
 179 005c 8EE80700 		stm	lr, {r0, r1, r2}
 180              	.LBE17:
 181              	.LBE16:
 182              	.LBB18:
 183              	.LBI18:
 255:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 184              		.loc 2 255 28 is_stmt 1 view .LVU44
 185              	.LBB19:
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 186              		.loc 2 256 5 view .LVU45
 257:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y * vectorB.axis.y,
 187              		.loc 2 257 33 is_stmt 0 view .LVU46
 188 0060 61EE801A 		vmul.f32	s3, s3, s0
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 189              		.loc 2 256 24 view .LVU47
 190 0064 CDED141A 		vstr.32	s3, [sp, #80]
 258:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z * vectorB.axis.z,
 191              		.loc 2 258 33 view .LVU48
 192 0068 22EE202A 		vmul.f32	s4, s4, s1
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 193              		.loc 2 256 24 view .LVU49
 194 006c 8DED152A 		vstr.32	s4, [sp, #84]
 259:Core/Inc/FusionMath.h ****     }};
 195              		.loc 2 259 33 view .LVU50
 196 0070 62EE812A 		vmul.f32	s5, s5, s2
 256:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x * vectorB.axis.x,
 197              		.loc 2 256 24 view .LVU51
 198 0074 CDED162A 		vstr.32	s5, [sp, #88]
 261:Core/Inc/FusionMath.h **** }
 199              		.loc 2 261 5 is_stmt 1 view .LVU52
 261:Core/Inc/FusionMath.h **** }
 200              		.loc 2 261 12 is_stmt 0 view .LVU53
 201 0078 20AB     		add	r3, sp, #128
 202 007a 9CE80700 		ldm	ip, {r0, r1, r2}
 203 007e 83E80700 		stm	r3, {r0, r1, r2}
 204 0082 0DF1740C 		add	ip, sp, #116
 205 0086 8CE80700 		stm	ip, {r0, r1, r2}
 206              	.LBE19:
 207              	.LBE18:
 208              		.loc 3 27 12 discriminator 2 view .LVU54
 209 008a EC46     		mov	ip, sp
 210 008c 0DF1B00E 		add	lr, sp, #176
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 13


 211 0090 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 212 0094 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 213 0098 DEF80030 		ldr	r3, [lr]
 214 009c CCF80030 		str	r3, [ip]
 215 00a0 28AB     		add	r3, sp, #160
 216 00a2 0FCB     		ldm	r3, {r0, r1, r2, r3}
 217 00a4 9DED1D0A 		vldr.32	s0, [sp, #116]
 218 00a8 DDED1E0A 		vldr.32	s1, [sp, #120]
 219 00ac 9DED1F1A 		vldr.32	s2, [sp, #124]
 220 00b0 FFF7FEFF 		bl	FusionMatrixMultiplyVector
 221              	.LVL0:
 222 00b4 8DED170A 		vstr.32	s0, [sp, #92]
 223 00b8 CDED180A 		vstr.32	s1, [sp, #96]
 224 00bc 8DED191A 		vstr.32	s2, [sp, #100]
  28:Core/Inc/FusionCalibration.h **** }
 225              		.loc 3 28 1 view .LVU55
 226 00c0 27B0     		add	sp, sp, #156
 227              	.LCFI7:
 228              		.cfi_def_cfa_offset 20
 229              		@ sp needed
 230 00c2 5DF804EB 		ldr	lr, [sp], #4
 231              	.LCFI8:
 232              		.cfi_restore 14
 233              		.cfi_def_cfa_offset 16
 234 00c6 04B0     		add	sp, sp, #16
 235              	.LCFI9:
 236              		.cfi_def_cfa_offset 0
 237 00c8 7047     		bx	lr
 238              		.cfi_endproc
 239              	.LFE159:
 241              		.section	.text.FusionCalibrationMagnetic,"ax",%progbits
 242              		.align	1
 243              		.syntax unified
 244              		.thumb
 245              		.thumb_func
 247              	FusionCalibrationMagnetic:
 248              	.LFB160:
  29:Core/Inc/FusionCalibration.h **** 
  30:Core/Inc/FusionCalibration.h **** /**
  31:Core/Inc/FusionCalibration.h ****  * @brief Magnetometer calibration model.
  32:Core/Inc/FusionCalibration.h ****  * @param uncalibrated Uncalibrated measurement.
  33:Core/Inc/FusionCalibration.h ****  * @param softIronMatrix Soft-iron matrix.
  34:Core/Inc/FusionCalibration.h ****  * @param hardIronOffset Hard-iron offset.
  35:Core/Inc/FusionCalibration.h ****  * @return Calibrated measurement.
  36:Core/Inc/FusionCalibration.h ****  */
  37:Core/Inc/FusionCalibration.h **** static inline FusionVector FusionCalibrationMagnetic(const FusionVector uncalibrated, const FusionM
 249              		.loc 3 37 157 is_stmt 1 view -0
 250              		.cfi_startproc
 251              		@ args = 36, pretend = 16, frame = 88
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253 0000 84B0     		sub	sp, sp, #16
 254              	.LCFI10:
 255              		.cfi_def_cfa_offset 16
 256 0002 00B5     		push	{lr}
 257              	.LCFI11:
 258              		.cfi_def_cfa_offset 20
 259              		.cfi_offset 14, -20
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 14


 260 0004 9DB0     		sub	sp, sp, #116
 261              	.LCFI12:
 262              		.cfi_def_cfa_offset 136
 263 0006 0DF1780C 		add	ip, sp, #120
 264 000a 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 265 000e 8DED0D0A 		vstr.32	s0, [sp, #52]
 266 0012 CDED0E0A 		vstr.32	s1, [sp, #56]
 267 0016 8DED0F1A 		vstr.32	s2, [sp, #60]
 268 001a CDED0A1A 		vstr.32	s3, [sp, #40]
 269 001e 8DED0B2A 		vstr.32	s4, [sp, #44]
 270 0022 CDED0C2A 		vstr.32	s5, [sp, #48]
  38:Core/Inc/FusionCalibration.h ****     return FusionMatrixMultiplyVector(softIronMatrix, FusionVectorSubtract(uncalibrated, hardIronOf
 271              		.loc 3 38 5 view .LVU57
 272              	.LBB20:
 273              	.LBI20:
 216:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 274              		.loc 2 216 28 view .LVU58
 275              	.LBB21:
 217:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 276              		.loc 2 217 5 view .LVU59
 218:Core/Inc/FusionMath.h ****             .y = vectorA.axis.y - vectorB.axis.y,
 277              		.loc 2 218 33 is_stmt 0 view .LVU60
 278 0026 30EE610A 		vsub.f32	s0, s0, s3
 217:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 279              		.loc 2 217 24 view .LVU61
 280 002a 8DED100A 		vstr.32	s0, [sp, #64]
 219:Core/Inc/FusionMath.h ****             .z = vectorA.axis.z - vectorB.axis.z,
 281              		.loc 2 219 33 view .LVU62
 282 002e 70EEC20A 		vsub.f32	s1, s1, s4
 217:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 283              		.loc 2 217 24 view .LVU63
 284 0032 CDED110A 		vstr.32	s1, [sp, #68]
 220:Core/Inc/FusionMath.h ****     }};
 285              		.loc 2 220 33 view .LVU64
 286 0036 31EE621A 		vsub.f32	s2, s2, s5
 217:Core/Inc/FusionMath.h ****             .x = vectorA.axis.x - vectorB.axis.x,
 287              		.loc 2 217 24 view .LVU65
 288 003a 8DED121A 		vstr.32	s2, [sp, #72]
 222:Core/Inc/FusionMath.h **** }
 289              		.loc 2 222 5 is_stmt 1 view .LVU66
 222:Core/Inc/FusionMath.h **** }
 290              		.loc 2 222 12 is_stmt 0 view .LVU67
 291 003e 19AB     		add	r3, sp, #100
 292 0040 10AA     		add	r2, sp, #64
 293 0042 07CA     		ldm	r2, {r0, r1, r2}
 294 0044 83E80700 		stm	r3, {r0, r1, r2}
 295 0048 0DF1580C 		add	ip, sp, #88
 296 004c 8CE80700 		stm	ip, {r0, r1, r2}
 297              	.LBE21:
 298              	.LBE20:
 299              		.loc 3 38 12 discriminator 1 view .LVU68
 300 0050 EC46     		mov	ip, sp
 301 0052 0DF1880E 		add	lr, sp, #136
 302 0056 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 303 005a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 304 005e DEF80030 		ldr	r3, [lr]
 305 0062 CCF80030 		str	r3, [ip]
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 15


 306 0066 1EAB     		add	r3, sp, #120
 307 0068 0FCB     		ldm	r3, {r0, r1, r2, r3}
 308 006a 9DED160A 		vldr.32	s0, [sp, #88]
 309 006e DDED170A 		vldr.32	s1, [sp, #92]
 310 0072 9DED181A 		vldr.32	s2, [sp, #96]
 311 0076 FFF7FEFF 		bl	FusionMatrixMultiplyVector
 312              	.LVL1:
 313 007a 8DED130A 		vstr.32	s0, [sp, #76]
 314 007e CDED140A 		vstr.32	s1, [sp, #80]
 315 0082 8DED151A 		vstr.32	s2, [sp, #84]
  39:Core/Inc/FusionCalibration.h **** }
 316              		.loc 3 39 1 view .LVU69
 317 0086 1DB0     		add	sp, sp, #116
 318              	.LCFI13:
 319              		.cfi_def_cfa_offset 20
 320              		@ sp needed
 321 0088 5DF804EB 		ldr	lr, [sp], #4
 322              	.LCFI14:
 323              		.cfi_restore 14
 324              		.cfi_def_cfa_offset 16
 325 008c 04B0     		add	sp, sp, #16
 326              	.LCFI15:
 327              		.cfi_def_cfa_offset 0
 328 008e 7047     		bx	lr
 329              		.cfi_endproc
 330              	.LFE160:
 332              		.section	.text.IMU_update,"ax",%progbits
 333              		.align	1
 334              		.global	IMU_update
 335              		.syntax unified
 336              		.thumb
 337              		.thumb_func
 339              	IMU_update:
 340              	.LFB162:
   1:Core/Src/IMU.c **** //IMU.c
   2:Core/Src/IMU.c **** //2023.11.3
   3:Core/Src/IMU.c **** //by gjx
   4:Core/Src/IMU.c **** 
   5:Core/Src/IMU.c **** #include "IMU.h"
   6:Core/Src/IMU.c **** #include <math.h>
   7:Core/Src/IMU.c **** #include "Fusion.h"
   8:Core/Src/IMU.c **** 
   9:Core/Src/IMU.c **** // Do not Change!
  10:Core/Src/IMU.c **** #define g 9.795f // For SuZhou, JiangSu, China
  11:Core/Src/IMU.c **** 
  12:Core/Src/IMU.c **** // Initialise algorithms
  13:Core/Src/IMU.c **** FusionAhrs ahrs;
  14:Core/Src/IMU.c **** FusionOffset offset;
  15:Core/Src/IMU.c **** float IMUdeltaTime = 0.002; // default 500Hz
  16:Core/Src/IMU.c **** float gyro[3], accel[3], temp;
  17:Core/Src/IMU.c **** FusionVector gyroscope;
  18:Core/Src/IMU.c **** FusionVector accelerometer;
  19:Core/Src/IMU.c **** FusionVector magnetometer;
  20:Core/Src/IMU.c **** 
  21:Core/Src/IMU.c **** // Define calibration (replace with actual calibration data if available)
  22:Core/Src/IMU.c **** const FusionMatrix gyroscopeMisalignment = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f}; 
  23:Core/Src/IMU.c **** const FusionVector gyroscopeSensitivity = {1.0f, 1.0f, 1.011047f}; // Done!
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 16


  24:Core/Src/IMU.c **** const FusionVector gyroscopeOffset = {0.067f, -0.045f, 0.038f}; // Done!
  25:Core/Src/IMU.c **** const FusionMatrix accelerometerMisalignment = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0
  26:Core/Src/IMU.c **** const FusionVector accelerometerSensitivity = {1.009082f, 1.006542f, 1.009082f}; // Done!
  27:Core/Src/IMU.c **** const FusionVector accelerometerOffset = {0.003f, -0.002f, -0.001f}; // Done!
  28:Core/Src/IMU.c **** const FusionMatrix softIronMatrix = {0.9580f, -0.0081f, 0.0222f, -0.0081f, 1.0402f, -0.0020f, 0.022
  29:Core/Src/IMU.c **** const FusionVector hardIronOffset = {-4.4666f, 2.9855f, 7.9047f};
  30:Core/Src/IMU.c **** 
  31:Core/Src/IMU.c **** 
  32:Core/Src/IMU.c **** void IMU_update()
  33:Core/Src/IMU.c **** {
 341              		.loc 1 33 1 is_stmt 1 view -0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 48
 344              		@ frame_needed = 0, uses_anonymous_args = 0
 345 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 346              	.LCFI16:
 347              		.cfi_def_cfa_offset 28
 348              		.cfi_offset 4, -28
 349              		.cfi_offset 5, -24
 350              		.cfi_offset 6, -20
 351              		.cfi_offset 7, -16
 352              		.cfi_offset 8, -12
 353              		.cfi_offset 9, -8
 354              		.cfi_offset 14, -4
 355 0004 2DED068B 		vpush.64	{d8, d9, d10}
 356              	.LCFI17:
 357              		.cfi_def_cfa_offset 52
 358              		.cfi_offset 80, -52
 359              		.cfi_offset 81, -48
 360              		.cfi_offset 82, -44
 361              		.cfi_offset 83, -40
 362              		.cfi_offset 84, -36
 363              		.cfi_offset 85, -32
 364 0008 93B0     		sub	sp, sp, #76
 365              	.LCFI18:
 366              		.cfi_def_cfa_offset 128
  34:Core/Src/IMU.c **** 	BMI088_read(gyro, accel, &temp); // read IMU Date
 367              		.loc 1 34 2 view .LVU71
 368 000a 7A4C     		ldr	r4, .L9
 369 000c 7A4D     		ldr	r5, .L9+4
 370 000e 7B4A     		ldr	r2, .L9+8
 371 0010 2146     		mov	r1, r4
 372 0012 2846     		mov	r0, r5
 373 0014 FFF7FEFF 		bl	BMI088_read
 374              	.LVL2:
  35:Core/Src/IMU.c **** 
  36:Core/Src/IMU.c **** 	gyroscope = (FusionVector){{FusionRadiansToDegrees(gyro[0]), FusionRadiansToDegrees(gyro[1]), Fusi
 375              		.loc 1 36 2 view .LVU72
 376              		.loc 1 36 30 is_stmt 0 view .LVU73
 377 0018 95ED000A 		vldr.32	s0, [r5]
 378              	.LVL3:
 379              	.LBB22:
 380              	.LBI22:
 136:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 381              		.loc 2 136 21 is_stmt 1 view .LVU74
 382              	.LBB23:
 137:Core/Inc/FusionMath.h **** }
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 17


 383              		.loc 2 137 5 view .LVU75
 137:Core/Inc/FusionMath.h **** }
 384              		.loc 2 137 20 is_stmt 0 view .LVU76
 385 001c DFED787A 		vldr.32	s15, .L9+12
 386 0020 20EE270A 		vmul.f32	s0, s0, s15
 387              	.LVL4:
 137:Core/Inc/FusionMath.h **** }
 388              		.loc 2 137 20 view .LVU77
 389              	.LBE23:
 390              	.LBE22:
 391              		.loc 1 36 63 discriminator 1 view .LVU78
 392 0024 D5ED010A 		vldr.32	s1, [r5, #4]
 393              	.LVL5:
 394              	.LBB24:
 395              	.LBI24:
 136:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 396              		.loc 2 136 21 is_stmt 1 view .LVU79
 397              	.LBB25:
 137:Core/Inc/FusionMath.h **** }
 398              		.loc 2 137 5 view .LVU80
 137:Core/Inc/FusionMath.h **** }
 399              		.loc 2 137 20 is_stmt 0 view .LVU81
 400 0028 60EEA70A 		vmul.f32	s1, s1, s15
 401              	.LVL6:
 137:Core/Inc/FusionMath.h **** }
 402              		.loc 2 137 20 view .LVU82
 403              	.LBE25:
 404              	.LBE24:
 405              		.loc 1 36 96 discriminator 2 view .LVU83
 406 002c 95ED021A 		vldr.32	s2, [r5, #8]
 407              	.LVL7:
 408              	.LBB26:
 409              	.LBI26:
 136:Core/Inc/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 410              		.loc 2 136 21 is_stmt 1 view .LVU84
 411              	.LBB27:
 137:Core/Inc/FusionMath.h **** }
 412              		.loc 2 137 5 view .LVU85
 137:Core/Inc/FusionMath.h **** }
 413              		.loc 2 137 20 is_stmt 0 view .LVU86
 414 0030 21EE271A 		vmul.f32	s2, s2, s15
 415              	.LVL8:
 137:Core/Inc/FusionMath.h **** }
 416              		.loc 2 137 20 view .LVU87
 417              	.LBE27:
 418              	.LBE26:
 419              		.loc 1 36 12 discriminator 3 view .LVU88
 420 0034 734E     		ldr	r6, .L9+16
 421 0036 86ED000A 		vstr.32	s0, [r6]
 422 003a C6ED010A 		vstr.32	s1, [r6, #4]
 423 003e 86ED021A 		vstr.32	s2, [r6, #8]
  37:Core/Src/IMU.c **** 	accelerometer = FusionVectorMultiplyScalar((FusionVector){{accel[0], accel[1], accel[2]}}, 1.0f / 
 424              		.loc 1 37 2 is_stmt 1 view .LVU89
 425              		.loc 1 37 66 is_stmt 0 view .LVU90
 426 0042 D4ED006A 		vldr.32	s13, [r4]
 427              		.loc 1 37 59 view .LVU91
 428 0046 CDED096A 		vstr.32	s13, [sp, #36]
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 18


 429              		.loc 1 37 76 view .LVU92
 430 004a 94ED017A 		vldr.32	s14, [r4, #4]
 431              		.loc 1 37 59 view .LVU93
 432 004e 8DED0A7A 		vstr.32	s14, [sp, #40]
 433              		.loc 1 37 86 view .LVU94
 434 0052 D4ED027A 		vldr.32	s15, [r4, #8]
 435              		.loc 1 37 59 view .LVU95
 436 0056 CDED0B7A 		vstr.32	s15, [sp, #44]
 437              	.LVL9:
 438              	.LBB28:
 439              	.LBI28:
 240:Core/Inc/FusionMath.h ****     const FusionVector result = {.axis = {
 440              		.loc 2 240 28 is_stmt 1 view .LVU96
 441              	.LBB29:
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 442              		.loc 2 241 5 view .LVU97
 242:Core/Inc/FusionMath.h ****             .y = vector.axis.y * scalar,
 443              		.loc 2 242 32 is_stmt 0 view .LVU98
 444 005a 9FED6B6A 		vldr.32	s12, .L9+20
 445 005e 66EE866A 		vmul.f32	s13, s13, s12
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 446              		.loc 2 241 24 view .LVU99
 447 0062 CDED066A 		vstr.32	s13, [sp, #24]
 243:Core/Inc/FusionMath.h ****             .z = vector.axis.z * scalar,
 448              		.loc 2 243 32 view .LVU100
 449 0066 27EE067A 		vmul.f32	s14, s14, s12
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 450              		.loc 2 241 24 view .LVU101
 451 006a 8DED077A 		vstr.32	s14, [sp, #28]
 244:Core/Inc/FusionMath.h ****     }};
 452              		.loc 2 244 32 view .LVU102
 453 006e 67EE867A 		vmul.f32	s15, s15, s12
 241:Core/Inc/FusionMath.h ****             .x = vector.axis.x * scalar,
 454              		.loc 2 241 24 view .LVU103
 455 0072 CDED087A 		vstr.32	s15, [sp, #32]
 246:Core/Inc/FusionMath.h **** }
 456              		.loc 2 246 5 is_stmt 1 view .LVU104
 246:Core/Inc/FusionMath.h **** }
 457              		.loc 2 246 12 is_stmt 0 view .LVU105
 458 0076 0FAC     		add	r4, sp, #60
 459 0078 06AB     		add	r3, sp, #24
 460 007a 93E80700 		ldm	r3, {r0, r1, r2}
 461 007e 84E80700 		stm	r4, {r0, r1, r2}
 462 0082 0CAB     		add	r3, sp, #48
 463 0084 83E80700 		stm	r3, {r0, r1, r2}
 464              	.LVL10:
 246:Core/Inc/FusionMath.h **** }
 465              		.loc 2 246 12 view .LVU106
 466              	.LBE29:
 467              	.LBE28:
 468              		.loc 1 37 18 view .LVU107
 469 0088 604C     		ldr	r4, .L9+24
 470 008a 84E80700 		stm	r4, {r0, r1, r2}
  38:Core/Src/IMU.c **** 	magnetometer = (FusionVector){{IST8310data[0],IST8310data[1],-IST8310data[2]}};
 471              		.loc 1 38 2 is_stmt 1 view .LVU108
 472              		.loc 1 38 44 is_stmt 0 view .LVU109
 473 008e 604B     		ldr	r3, .L9+28
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 19


 474 0090 D3ED00AA 		vldr.32	s21, [r3]
 475              		.loc 1 38 59 view .LVU110
 476 0094 93ED01AA 		vldr.32	s20, [r3, #4]
 477              		.loc 1 38 75 view .LVU111
 478 0098 D3ED029A 		vldr.32	s19, [r3, #8]
 479              		.loc 1 38 63 view .LVU112
 480 009c F1EE699A 		vneg.f32	s19, s19
 481              		.loc 1 38 15 view .LVU113
 482 00a0 5C4D     		ldr	r5, .L9+32
 483 00a2 C5ED00AA 		vstr.32	s21, [r5]
 484 00a6 85ED01AA 		vstr.32	s20, [r5, #4]
 485 00aa C5ED029A 		vstr.32	s19, [r5, #8]
  39:Core/Src/IMU.c **** 	
  40:Core/Src/IMU.c **** 	// Apply calibration
  41:Core/Src/IMU.c **** 	gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity, gyro
 486              		.loc 1 41 2 is_stmt 1 view .LVU114
 487              		.loc 1 41 14 is_stmt 0 view .LVU115
 488 00ae DFF88091 		ldr	r9, .L9+60
 489 00b2 DFF88081 		ldr	r8, .L9+64
 490 00b6 584F     		ldr	r7, .L9+36
 491 00b8 EC46     		mov	ip, sp
 492 00ba 07F1100E 		add	lr, r7, #16
 493 00be BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 494 00c2 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 495 00c6 DEF80030 		ldr	r3, [lr]
 496 00ca CCF80030 		str	r3, [ip]
 497 00ce 97E80F00 		ldm	r7, {r0, r1, r2, r3}
 498 00d2 99ED003A 		vldr.32	s6, [r9]
 499 00d6 D9ED013A 		vldr.32	s7, [r9, #4]
 500 00da 99ED024A 		vldr.32	s8, [r9, #8]
 501 00de D8ED001A 		vldr.32	s3, [r8]
 502 00e2 98ED012A 		vldr.32	s4, [r8, #4]
 503 00e6 D8ED022A 		vldr.32	s5, [r8, #8]
 504 00ea FFF7FEFF 		bl	FusionCalibrationInertial
 505              	.LVL11:
 506 00ee B0EE409A 		vmov.f32	s18, s0
 507 00f2 F0EE608A 		vmov.f32	s17, s1
 508 00f6 B0EE418A 		vmov.f32	s16, s2
 509 00fa 86ED000A 		vstr.32	s0, [r6]
 510 00fe C6ED010A 		vstr.32	s1, [r6, #4]
 511 0102 86ED021A 		vstr.32	s2, [r6, #8]
  42:Core/Src/IMU.c **** 	accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerometerS
 512              		.loc 1 42 2 is_stmt 1 view .LVU116
 513              		.loc 1 42 18 is_stmt 0 view .LVU117
 514 0106 DFF83091 		ldr	r9, .L9+68
 515 010a DFF83081 		ldr	r8, .L9+72
 516 010e 434F     		ldr	r7, .L9+40
 517 0110 EC46     		mov	ip, sp
 518 0112 07F1100E 		add	lr, r7, #16
 519 0116 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 520 011a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 521 011e DEF80030 		ldr	r3, [lr]
 522 0122 CCF80030 		str	r3, [ip]
 523 0126 97E80F00 		ldm	r7, {r0, r1, r2, r3}
 524 012a 99ED003A 		vldr.32	s6, [r9]
 525 012e D9ED013A 		vldr.32	s7, [r9, #4]
 526 0132 99ED024A 		vldr.32	s8, [r9, #8]
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 20


 527 0136 D8ED001A 		vldr.32	s3, [r8]
 528 013a 98ED012A 		vldr.32	s4, [r8, #4]
 529 013e D8ED022A 		vldr.32	s5, [r8, #8]
 530 0142 94ED000A 		vldr.32	s0, [r4]
 531 0146 D4ED010A 		vldr.32	s1, [r4, #4]
 532 014a 94ED021A 		vldr.32	s2, [r4, #8]
 533 014e FFF7FEFF 		bl	FusionCalibrationInertial
 534              	.LVL12:
 535 0152 84ED000A 		vstr.32	s0, [r4]
 536 0156 C4ED010A 		vstr.32	s1, [r4, #4]
 537 015a 84ED021A 		vstr.32	s2, [r4, #8]
  43:Core/Src/IMU.c **** 	magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 538              		.loc 1 43 2 is_stmt 1 view .LVU118
 539              		.loc 1 43 17 is_stmt 0 view .LVU119
 540 015e DFF8E080 		ldr	r8, .L9+76
 541 0162 2F4F     		ldr	r7, .L9+44
 542 0164 EC46     		mov	ip, sp
 543 0166 07F1100E 		add	lr, r7, #16
 544 016a BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 545 016e ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 546 0172 DEF80030 		ldr	r3, [lr]
 547 0176 CCF80030 		str	r3, [ip]
 548 017a 97E80F00 		ldm	r7, {r0, r1, r2, r3}
 549 017e D8ED001A 		vldr.32	s3, [r8]
 550 0182 98ED012A 		vldr.32	s4, [r8, #4]
 551 0186 D8ED022A 		vldr.32	s5, [r8, #8]
 552 018a B0EE6A0A 		vmov.f32	s0, s21
 553 018e F0EE4A0A 		vmov.f32	s1, s20
 554 0192 B0EE691A 		vmov.f32	s2, s19
 555 0196 FFF7FEFF 		bl	FusionCalibrationMagnetic
 556              	.LVL13:
 557 019a 85ED000A 		vstr.32	s0, [r5]
 558 019e C5ED010A 		vstr.32	s1, [r5, #4]
 559 01a2 85ED021A 		vstr.32	s2, [r5, #8]
  44:Core/Src/IMU.c **** 	
  45:Core/Src/IMU.c **** 	// Update gyroscope offset correction algorithm
  46:Core/Src/IMU.c **** 	gyroscope = FusionOffsetUpdate(&offset, gyroscope);
 560              		.loc 1 46 2 is_stmt 1 view .LVU120
 561              		.loc 1 46 14 is_stmt 0 view .LVU121
 562 01a6 B0EE490A 		vmov.f32	s0, s18
 563 01aa F0EE680A 		vmov.f32	s1, s17
 564 01ae B0EE481A 		vmov.f32	s2, s16
 565 01b2 1C48     		ldr	r0, .L9+48
 566 01b4 FFF7FEFF 		bl	FusionOffsetUpdate
 567              	.LVL14:
 568 01b8 86ED000A 		vstr.32	s0, [r6]
 569 01bc C6ED010A 		vstr.32	s1, [r6, #4]
 570 01c0 86ED021A 		vstr.32	s2, [r6, #8]
  47:Core/Src/IMU.c **** 	
  48:Core/Src/IMU.c **** 	// FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, IMUdeltaTime);
  49:Core/Src/IMU.c **** 	FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, IMUdeltaTime); // AHRS Calculation
 571              		.loc 1 49 2 is_stmt 1 view .LVU122
 572 01c4 184B     		ldr	r3, .L9+52
 573 01c6 D3ED004A 		vldr.32	s9, [r3]
 574 01ca 95ED003A 		vldr.32	s6, [r5]
 575 01ce D5ED013A 		vldr.32	s7, [r5, #4]
 576 01d2 95ED024A 		vldr.32	s8, [r5, #8]
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 21


 577 01d6 D4ED001A 		vldr.32	s3, [r4]
 578 01da 94ED012A 		vldr.32	s4, [r4, #4]
 579 01de D4ED022A 		vldr.32	s5, [r4, #8]
 580 01e2 1248     		ldr	r0, .L9+56
 581 01e4 FFF7FEFF 		bl	FusionAhrsUpdate
 582              	.LVL15:
  50:Core/Src/IMU.c **** }
 583              		.loc 1 50 1 is_stmt 0 view .LVU123
 584 01e8 13B0     		add	sp, sp, #76
 585              	.LCFI19:
 586              		.cfi_def_cfa_offset 52
 587              		@ sp needed
 588 01ea BDEC068B 		vldm	sp!, {d8-d10}
 589              	.LCFI20:
 590              		.cfi_restore 84
 591              		.cfi_restore 85
 592              		.cfi_restore 82
 593              		.cfi_restore 83
 594              		.cfi_restore 80
 595              		.cfi_restore 81
 596              		.cfi_def_cfa_offset 28
 597 01ee BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 598              	.L10:
 599 01f2 00BF     		.align	2
 600              	.L9:
 601 01f4 00000000 		.word	accel
 602 01f8 00000000 		.word	gyro
 603 01fc 00000000 		.word	temp
 604 0200 E02E6542 		.word	1113927392
 605 0204 00000000 		.word	gyroscope
 606 0208 1616D13D 		.word	1037112854
 607 020c 00000000 		.word	accelerometer
 608 0210 00000000 		.word	IST8310data
 609 0214 00000000 		.word	magnetometer
 610 0218 00000000 		.word	gyroscopeMisalignment
 611 021c 00000000 		.word	accelerometerMisalignment
 612 0220 00000000 		.word	softIronMatrix
 613 0224 00000000 		.word	offset
 614 0228 00000000 		.word	IMUdeltaTime
 615 022c 00000000 		.word	ahrs
 616 0230 00000000 		.word	gyroscopeOffset
 617 0234 00000000 		.word	gyroscopeSensitivity
 618 0238 00000000 		.word	accelerometerOffset
 619 023c 00000000 		.word	accelerometerSensitivity
 620 0240 00000000 		.word	hardIronOffset
 621              		.cfi_endproc
 622              	.LFE162:
 624              		.section	.rodata.IMU_print.str1.4,"aMS",%progbits,1
 625              		.align	2
 626              	.LC0:
 627 0000 41636365 		.ascii	"Accel:X=%d,Y=%d,Z=%d\015\012GYRO:X=%d,Y=%d,Z=%d\015"
 627      6C3A583D 
 627      25642C59 
 627      3D25642C 
 627      5A3D2564 
 628 002a 0A74656D 		.ascii	"\012temp=%d\015\012 \000"
 628      703D2564 
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 22


 628      0D0A2000 
 629              		.section	.text.IMU_print,"ax",%progbits
 630              		.align	1
 631              		.global	IMU_print
 632              		.syntax unified
 633              		.thumb
 634              		.thumb_func
 636              	IMU_print:
 637              	.LFB163:
  51:Core/Src/IMU.c **** 
  52:Core/Src/IMU.c **** void IMU_print()
  53:Core/Src/IMU.c **** {
 638              		.loc 1 53 1 is_stmt 1 view -0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 0
 641              		@ frame_needed = 0, uses_anonymous_args = 0
 642 0000 00B5     		push	{lr}
 643              	.LCFI21:
 644              		.cfi_def_cfa_offset 4
 645              		.cfi_offset 14, -4
 646 0002 85B0     		sub	sp, sp, #20
 647              	.LCFI22:
 648              		.cfi_def_cfa_offset 24
  54:Core/Src/IMU.c **** 	usart_printf("Accel:X=%d,Y=%d,Z=%d\r\nGYRO:X=%d,Y=%d,Z=%d\r\ntemp=%d\r\n ",(int)(accel[0]*100),(in
 649              		.loc 1 54 2 view .LVU125
 650              		.loc 1 54 88 is_stmt 0 view .LVU126
 651 0004 214B     		ldr	r3, .L13
 652 0006 93ED005A 		vldr.32	s10, [r3]
 653              		.loc 1 54 91 view .LVU127
 654 000a DFED217A 		vldr.32	s15, .L13+4
 655 000e 25EE275A 		vmul.f32	s10, s10, s15
 656              		.loc 1 54 108 view .LVU128
 657 0012 D3ED014A 		vldr.32	s9, [r3, #4]
 658              		.loc 1 54 111 view .LVU129
 659 0016 64EEA74A 		vmul.f32	s9, s9, s15
 660              		.loc 1 54 128 view .LVU130
 661 001a 93ED024A 		vldr.32	s8, [r3, #8]
 662              		.loc 1 54 131 view .LVU131
 663 001e 24EE274A 		vmul.f32	s8, s8, s15
 664              		.loc 1 54 147 view .LVU132
 665 0022 1C4B     		ldr	r3, .L13+8
 666 0024 93ED007A 		vldr.32	s14, [r3]
 667              		.loc 1 54 150 view .LVU133
 668 0028 27EE277A 		vmul.f32	s14, s14, s15
 669              		.loc 1 54 166 view .LVU134
 670 002c D3ED016A 		vldr.32	s13, [r3, #4]
 671              		.loc 1 54 169 view .LVU135
 672 0030 66EEA76A 		vmul.f32	s13, s13, s15
 673              		.loc 1 54 185 view .LVU136
 674 0034 93ED026A 		vldr.32	s12, [r3, #8]
 675              		.loc 1 54 188 view .LVU137
 676 0038 26EE276A 		vmul.f32	s12, s12, s15
 677              		.loc 1 54 204 view .LVU138
 678 003c 164B     		ldr	r3, .L13+12
 679 003e D3ED005A 		vldr.32	s11, [r3]
 680 0042 65EEA77A 		vmul.f32	s15, s11, s15
 681              		.loc 1 54 2 view .LVU139
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 23


 682 0046 FDEEE77A 		vcvt.s32.f32	s15, s15
 683 004a CDED037A 		vstr.32	s15, [sp, #12]	@ int
 684 004e BDEEC66A 		vcvt.s32.f32	s12, s12
 685 0052 8DED026A 		vstr.32	s12, [sp, #8]	@ int
 686 0056 FDEEE66A 		vcvt.s32.f32	s13, s13
 687 005a CDED016A 		vstr.32	s13, [sp, #4]	@ int
 688 005e BDEEC77A 		vcvt.s32.f32	s14, s14
 689 0062 8DED007A 		vstr.32	s14, [sp]	@ int
 690 0066 FDEEC47A 		vcvt.s32.f32	s15, s8
 691 006a 17EE903A 		vmov	r3, s15	@ int
 692 006e FDEEE47A 		vcvt.s32.f32	s15, s9
 693 0072 17EE902A 		vmov	r2, s15	@ int
 694 0076 FDEEC57A 		vcvt.s32.f32	s15, s10
 695 007a 17EE901A 		vmov	r1, s15	@ int
 696 007e 0748     		ldr	r0, .L13+16
 697 0080 FFF7FEFF 		bl	usart_printf
 698              	.LVL16:
  55:Core/Src/IMU.c **** }	
 699              		.loc 1 55 1 view .LVU140
 700 0084 05B0     		add	sp, sp, #20
 701              	.LCFI23:
 702              		.cfi_def_cfa_offset 4
 703              		@ sp needed
 704 0086 5DF804FB 		ldr	pc, [sp], #4
 705              	.L14:
 706 008a 00BF     		.align	2
 707              	.L13:
 708 008c 00000000 		.word	accel
 709 0090 0000C842 		.word	1120403456
 710 0094 00000000 		.word	gyro
 711 0098 00000000 		.word	temp
 712 009c 00000000 		.word	.LC0
 713              		.cfi_endproc
 714              	.LFE163:
 716              		.section	.rodata.IMU_Vofa_print.str1.4,"aMS",%progbits,1
 717              		.align	2
 718              	.LC1:
 719 0000 25642E25 		.ascii	"%d.%d,%d,%d,%d,%d,%d\012 \000"
 719      642C2564 
 719      2C25642C 
 719      25642C25 
 719      642C2564 
 720              		.section	.text.IMU_Vofa_print,"ax",%progbits
 721              		.align	1
 722              		.global	IMU_Vofa_print
 723              		.syntax unified
 724              		.thumb
 725              		.thumb_func
 727              	IMU_Vofa_print:
 728              	.LFB164:
  56:Core/Src/IMU.c **** 		
  57:Core/Src/IMU.c **** void IMU_Vofa_print()
  58:Core/Src/IMU.c **** {
 729              		.loc 1 58 1 is_stmt 1 view -0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 24


 733 0000 00B5     		push	{lr}
 734              	.LCFI24:
 735              		.cfi_def_cfa_offset 4
 736              		.cfi_offset 14, -4
 737 0002 85B0     		sub	sp, sp, #20
 738              	.LCFI25:
 739              		.cfi_def_cfa_offset 24
  59:Core/Src/IMU.c **** 	usart_printf("%d.%d,%d,%d,%d,%d,%d\n ",(int)(accel[0]*100),(int)(accel[1]*100),(int)(accel[2]*100)
 740              		.loc 1 59 2 view .LVU142
 741              		.loc 1 59 52 is_stmt 0 view .LVU143
 742 0004 214B     		ldr	r3, .L17
 743 0006 93ED005A 		vldr.32	s10, [r3]
 744              		.loc 1 59 55 view .LVU144
 745 000a DFED217A 		vldr.32	s15, .L17+4
 746 000e 25EE275A 		vmul.f32	s10, s10, s15
 747              		.loc 1 59 72 view .LVU145
 748 0012 D3ED014A 		vldr.32	s9, [r3, #4]
 749              		.loc 1 59 75 view .LVU146
 750 0016 64EEA74A 		vmul.f32	s9, s9, s15
 751              		.loc 1 59 92 view .LVU147
 752 001a 93ED024A 		vldr.32	s8, [r3, #8]
 753              		.loc 1 59 95 view .LVU148
 754 001e 24EE274A 		vmul.f32	s8, s8, s15
 755              		.loc 1 59 111 view .LVU149
 756 0022 1C4B     		ldr	r3, .L17+8
 757 0024 93ED007A 		vldr.32	s14, [r3]
 758              		.loc 1 59 114 view .LVU150
 759 0028 27EE277A 		vmul.f32	s14, s14, s15
 760              		.loc 1 59 130 view .LVU151
 761 002c D3ED016A 		vldr.32	s13, [r3, #4]
 762              		.loc 1 59 133 view .LVU152
 763 0030 66EEA76A 		vmul.f32	s13, s13, s15
 764              		.loc 1 59 149 view .LVU153
 765 0034 93ED026A 		vldr.32	s12, [r3, #8]
 766              		.loc 1 59 152 view .LVU154
 767 0038 26EE276A 		vmul.f32	s12, s12, s15
 768              		.loc 1 59 168 view .LVU155
 769 003c 164B     		ldr	r3, .L17+12
 770 003e D3ED005A 		vldr.32	s11, [r3]
 771 0042 65EEA77A 		vmul.f32	s15, s11, s15
 772              		.loc 1 59 2 view .LVU156
 773 0046 FDEEE77A 		vcvt.s32.f32	s15, s15
 774 004a CDED037A 		vstr.32	s15, [sp, #12]	@ int
 775 004e BDEEC66A 		vcvt.s32.f32	s12, s12
 776 0052 8DED026A 		vstr.32	s12, [sp, #8]	@ int
 777 0056 FDEEE66A 		vcvt.s32.f32	s13, s13
 778 005a CDED016A 		vstr.32	s13, [sp, #4]	@ int
 779 005e BDEEC77A 		vcvt.s32.f32	s14, s14
 780 0062 8DED007A 		vstr.32	s14, [sp]	@ int
 781 0066 FDEEC47A 		vcvt.s32.f32	s15, s8
 782 006a 17EE903A 		vmov	r3, s15	@ int
 783 006e FDEEE47A 		vcvt.s32.f32	s15, s9
 784 0072 17EE902A 		vmov	r2, s15	@ int
 785 0076 FDEEC57A 		vcvt.s32.f32	s15, s10
 786 007a 17EE901A 		vmov	r1, s15	@ int
 787 007e 0748     		ldr	r0, .L17+16
 788 0080 FFF7FEFF 		bl	usart_printf
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 25


 789              	.LVL17:
  60:Core/Src/IMU.c **** }	...
 790              		.loc 1 60 1 view .LVU157
 791 0084 05B0     		add	sp, sp, #20
 792              	.LCFI26:
 793              		.cfi_def_cfa_offset 4
 794              		@ sp needed
 795 0086 5DF804FB 		ldr	pc, [sp], #4
 796              	.L18:
 797 008a 00BF     		.align	2
 798              	.L17:
 799 008c 00000000 		.word	accel
 800 0090 0000C842 		.word	1120403456
 801 0094 00000000 		.word	gyro
 802 0098 00000000 		.word	temp
 803 009c 00000000 		.word	.LC1
 804              		.cfi_endproc
 805              	.LFE164:
 807              		.global	hardIronOffset
 808              		.section	.rodata.hardIronOffset,"a"
 809              		.align	2
 812              	hardIronOffset:
 813 0000 63EE8EC0 		.word	-1064374685
 814 0004 6F123F40 		.word	1077875311
 815 0008 4DF3FC40 		.word	1090319181
 816              		.global	softIronMatrix
 817              		.section	.rodata.softIronMatrix,"a"
 818              		.align	2
 821              	softIronMatrix:
 822 0000 7D3F753F 		.word	1064648573
 823 0004 DDB504BC 		.word	-1140541987
 824 0008 C6DCB53C 		.word	1018551494
 825 000c DDB504BC 		.word	-1140541987
 826 0010 4625853F 		.word	1065690438
 827 0014 6F1203BB 		.word	-1157426577
 828 0018 C6DCB53C 		.word	1018551494
 829 001c 6F1203BB 		.word	-1157426577
 830 0020 5986803F 		.word	1065387609
 831              		.global	accelerometerOffset
 832              		.section	.rodata.accelerometerOffset,"a"
 833              		.align	2
 836              	accelerometerOffset:
 837 0000 A69B443B 		.word	994352038
 838 0004 6F1203BB 		.word	-1157426577
 839 0008 6F1283BA 		.word	-1165815185
 840              		.global	accelerometerSensitivity
 841              		.section	.rodata.accelerometerSensitivity,"a"
 842              		.align	2
 845              	accelerometerSensitivity:
 846 0000 9929813F 		.word	1065429401
 847 0004 5ED6803F 		.word	1065408094
 848 0008 9929813F 		.word	1065429401
 849              		.global	accelerometerMisalignment
 850              		.section	.rodata.accelerometerMisalignment,"a"
 851              		.align	2
 854              	accelerometerMisalignment:
 855 0000 0000803F 		.word	1065353216
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 26


 856 0004 00000000 		.word	0
 857 0008 00000000 		.word	0
 858 000c 00000000 		.word	0
 859 0010 0000803F 		.word	1065353216
 860 0014 00000000 		.word	0
 861 0018 00000000 		.word	0
 862 001c 00000000 		.word	0
 863 0020 0000803F 		.word	1065353216
 864              		.global	gyroscopeOffset
 865              		.section	.rodata.gyroscopeOffset,"a"
 866              		.align	2
 869              	gyroscopeOffset:
 870 0000 4C37893D 		.word	1032402764
 871 0004 EC5138BD 		.word	-1120382484
 872 0008 E3A51B3D 		.word	1025222115
 873              		.global	gyroscopeSensitivity
 874              		.section	.rodata.gyroscopeSensitivity,"a"
 875              		.align	2
 878              	gyroscopeSensitivity:
 879 0000 0000803F 		.word	1065353216
 880 0004 0000803F 		.word	1065353216
 881 0008 FD69813F 		.word	1065445885
 882              		.global	gyroscopeMisalignment
 883              		.section	.rodata.gyroscopeMisalignment,"a"
 884              		.align	2
 887              	gyroscopeMisalignment:
 888 0000 0000803F 		.word	1065353216
 889 0004 00000000 		.word	0
 890 0008 00000000 		.word	0
 891 000c 00000000 		.word	0
 892 0010 0000803F 		.word	1065353216
 893 0014 00000000 		.word	0
 894 0018 00000000 		.word	0
 895 001c 00000000 		.word	0
 896 0020 0000803F 		.word	1065353216
 897              		.global	magnetometer
 898              		.section	.bss.magnetometer,"aw",%nobits
 899              		.align	2
 902              	magnetometer:
 903 0000 00000000 		.space	12
 903      00000000 
 903      00000000 
 904              		.global	accelerometer
 905              		.section	.bss.accelerometer,"aw",%nobits
 906              		.align	2
 909              	accelerometer:
 910 0000 00000000 		.space	12
 910      00000000 
 910      00000000 
 911              		.global	gyroscope
 912              		.section	.bss.gyroscope,"aw",%nobits
 913              		.align	2
 916              	gyroscope:
 917 0000 00000000 		.space	12
 917      00000000 
 917      00000000 
 918              		.global	temp
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 27


 919              		.section	.bss.temp,"aw",%nobits
 920              		.align	2
 923              	temp:
 924 0000 00000000 		.space	4
 925              		.global	accel
 926              		.section	.bss.accel,"aw",%nobits
 927              		.align	2
 930              	accel:
 931 0000 00000000 		.space	12
 931      00000000 
 931      00000000 
 932              		.global	gyro
 933              		.section	.bss.gyro,"aw",%nobits
 934              		.align	2
 937              	gyro:
 938 0000 00000000 		.space	12
 938      00000000 
 938      00000000 
 939              		.global	IMUdeltaTime
 940              		.section	.data.IMUdeltaTime,"aw"
 941              		.align	2
 944              	IMUdeltaTime:
 945 0000 6F12033B 		.word	990057071
 946              		.global	offset
 947              		.section	.bss.offset,"aw",%nobits
 948              		.align	2
 951              	offset:
 952 0000 00000000 		.space	24
 952      00000000 
 952      00000000 
 952      00000000 
 952      00000000 
 953              		.global	ahrs
 954              		.section	.bss.ahrs,"aw",%nobits
 955              		.align	2
 958              	ahrs:
 959 0000 00000000 		.space	116
 959      00000000 
 959      00000000 
 959      00000000 
 959      00000000 
 960              		.text
 961              	.Letext0:
 962              		.file 4 "Core/Inc/struct_typedef.h"
 963              		.file 5 "Core/Inc/FusionConvention.h"
 964              		.file 6 "Core/Inc/FusionAhrs.h"
 965              		.file 7 "Core/Inc/FusionOffset.h"
 966              		.file 8 "Core/Inc/main.h"
 967              		.file 9 "Core/Inc/IMU.h"
 968              		.file 10 "Core/Inc/user_usart.h"
 969              		.file 11 "Core/Inc/BMI088driver.h"
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 28


DEFINED SYMBOLS
                            *ABS*:00000000 IMU.c
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:21     .text.FusionMatrixMultiplyVector:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:26     .text.FusionMatrixMultiplyVector:00000000 FusionMatrixMultiplyVector
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:121    .text.FusionCalibrationInertial:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:126    .text.FusionCalibrationInertial:00000000 FusionCalibrationInertial
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:242    .text.FusionCalibrationMagnetic:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:247    .text.FusionCalibrationMagnetic:00000000 FusionCalibrationMagnetic
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:333    .text.IMU_update:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:339    .text.IMU_update:00000000 IMU_update
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:601    .text.IMU_update:000001f4 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:930    .bss.accel:00000000 accel
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:937    .bss.gyro:00000000 gyro
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:923    .bss.temp:00000000 temp
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:916    .bss.gyroscope:00000000 gyroscope
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:909    .bss.accelerometer:00000000 accelerometer
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:902    .bss.magnetometer:00000000 magnetometer
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:887    .rodata.gyroscopeMisalignment:00000000 gyroscopeMisalignment
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:854    .rodata.accelerometerMisalignment:00000000 accelerometerMisalignment
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:821    .rodata.softIronMatrix:00000000 softIronMatrix
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:951    .bss.offset:00000000 offset
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:944    .data.IMUdeltaTime:00000000 IMUdeltaTime
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:958    .bss.ahrs:00000000 ahrs
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:869    .rodata.gyroscopeOffset:00000000 gyroscopeOffset
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:878    .rodata.gyroscopeSensitivity:00000000 gyroscopeSensitivity
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:836    .rodata.accelerometerOffset:00000000 accelerometerOffset
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:845    .rodata.accelerometerSensitivity:00000000 accelerometerSensitivity
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:812    .rodata.hardIronOffset:00000000 hardIronOffset
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:625    .rodata.IMU_print.str1.4:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:630    .text.IMU_print:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:636    .text.IMU_print:00000000 IMU_print
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:708    .text.IMU_print:0000008c $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:717    .rodata.IMU_Vofa_print.str1.4:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:721    .text.IMU_Vofa_print:00000000 $t
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:727    .text.IMU_Vofa_print:00000000 IMU_Vofa_print
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:799    .text.IMU_Vofa_print:0000008c $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:809    .rodata.hardIronOffset:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:818    .rodata.softIronMatrix:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:833    .rodata.accelerometerOffset:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:842    .rodata.accelerometerSensitivity:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:851    .rodata.accelerometerMisalignment:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:866    .rodata.gyroscopeOffset:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:875    .rodata.gyroscopeSensitivity:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:884    .rodata.gyroscopeMisalignment:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:899    .bss.magnetometer:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:906    .bss.accelerometer:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:913    .bss.gyroscope:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:920    .bss.temp:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:927    .bss.accel:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:934    .bss.gyro:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:941    .data.IMUdeltaTime:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:948    .bss.offset:00000000 $d
/var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s:955    .bss.ahrs:00000000 $d

UNDEFINED SYMBOLS
BMI088_read
FusionOffsetUpdate
ARM GAS  /var/folders/w5/30yxzty101lfkjn94y0dlkk00000gn/T//cct7Nwj7.s 			page 29


FusionAhrsUpdate
IST8310data
usart_printf
